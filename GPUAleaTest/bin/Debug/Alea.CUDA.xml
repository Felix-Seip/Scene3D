<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Alea.CUDA</name></assembly>
<members>
<member name="">

</member>
<member name="F:Alea.CUDA.AOTCompileAttribute.MinimalArch">
<summary>
 Sets a minimal arch (e.g. `sm30`) for AOT compiling.
</summary>
</member>
<member name="F:Alea.CUDA.AOTCompileAttribute.SpecificArchs">
<summary>
 Overrides the AOT configuration from `FodyWeaver.xml` to instead compile the entity using 
 the specified arch(s) (e.g. `sm20;sm30`).
</summary>
</member>
<member name="F:Alea.CUDA.AOTCompileAttribute.AOTOnly">
<summary>
Setting this field to `true` will cause an exception while launching a kernel or kernels in
a GPU module if they haven&apos;t been properly AOT compiled. When this field is set to `false`
and AOT compilation results aren&apos;t found or are otherwise erroneous, the kernel or GPU module
will be JIT compiled. This attribute is usually used as an assertion in order to ensure that
your code is properly AOT compiled.
Default value is `false`.
</summary>
</member>
<member name="M:Alea.CUDA.AOTCompileAttribute.GetSpecificArchs">
<summary>
 Gets the specified arch(s); will return `None` if no SpecificArchs have been set.
</summary>
</member>
<member name="M:Alea.CUDA.AOTCompileAttribute.GetMinimalArch">
<summary>
 Gets the minimal arch; returns `None` if no minimal arch has been set.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.AOTCompileAttribute">
<summary>
Attribute used to annotate a static method or a type derived from the `GPUModule` type.
This instructs the AOT compiler, e.g. `Alea.CUDA.Fody`, to do AOT compilation of the
annotated target.  A type derived from `GPUModule` will be compiled as a CUDA module;
static method will be compiled as a CUDA module with single kernel.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.AOTCompileBit">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.AOTCompileInfo">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.AOTCompileLevel">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.AOTCompileLogEntry">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.AOTCompileLogger">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.AOTCompileSM">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.AOTCompiler">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.AOTCompilerBuilders">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.AddressSize.Address64">
<summary>
 64bit.
</summary>
</member>
<member name="T:Alea.CUDA.AddressSize.Address32">
<summary>
 32bit.
</summary>
</member>
<member name="P:Alea.CUDA.AddressSize._Current">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.AddressSize.Size">
<summary>
 Size in bytes.
</summary>
</member>
<member name="P:Alea.CUDA.AddressSize.Bits">
<summary>
 Size in bits.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.AddressSize">
<summary>
 Address size. 32bit or 64bit.
</summary>
</member>
<member name="T:Alea.CUDA.AddressSpace.Local">
<summary>
 Local space.
</summary>
</member>
<member name="T:Alea.CUDA.AddressSpace.Constant">
<summary>
 Constant space.
</summary>
</member>
<member name="T:Alea.CUDA.AddressSpace.Shared">
<summary>
 Shared space.
</summary>
</member>
<member name="T:Alea.CUDA.AddressSpace.Global">
<summary>
 Global space.
</summary>
</member>
<member name="T:Alea.CUDA.AddressSpace.Generic">
<summary>
 Generic space.
</summary>
</member>
<member name="T:Alea.CUDA.AddressSpace.Code">
<summary>
 Code space.
</summary>
</member>
<member name="P:Alea.CUDA.AddressSpace.UInt">
<summary>
 The NVVM unsigned integer number for this address space.
</summary>
</member>
<member name="P:Alea.CUDA.AddressSpace.Int">
<summary>
 The NVVM integer number for this address space.
</summary>
</member>
<member name="P:Alea.CUDA.AddressSpace.Description">
<summary>
 Description of this address space.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.AddressSpace.OfUInt32(System.UInt32)">
<summary>
 Convert an unsigned integer to address space.
</summary>
</member>
<member name="T:Alea.CUDA.AddressSpace">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.AlignAttribute">
<summary>
Attribute used to specify alignment.  You can add this to a struct in order to explicitly declare an alignment.
Valid alignments are: 1, 2, 4, 8 and 16. The specified alignment must be equal to, or greater than the type&apos;s
natural alignment.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.BuilderRegistry.Instance">
<summary>
 Get the instance of the registry.
</summary>
</member>
<member name="M:Alea.CUDA.BuilderRegistry.Reset(Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.CustomBuilder})">
<summary>
 Resets all previously defined builders and then registers the custom builders from the provided list.
</summary>
</member>
<member name="M:Alea.CUDA.BuilderRegistry.Reset">
<summary>
 Resets all previously defined builders.
</summary>
</member>
<member name="M:Alea.CUDA.BuilderRegistry.Ping">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.BuilderRegistry">
<summary>
 Builder registry, used to register new builders.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.CUDADriver.Version">
<summary>
 Gets the version number of the installed CUDA driver.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDADriver">
<summary>
 Utility type used to represent information about the installed CUDA driver.
</summary>
</member>
<member name="T:Alea.CUDA.CacheConfig.PreferEqual">
<summary>
 Prefer equal sized L1 cache and shared memory.
</summary>
</member>
<member name="T:Alea.CUDA.CacheConfig.PreferL1">
<summary>
 Prefer larger L1 cache and smaller shared memory.
</summary>
</member>
<member name="T:Alea.CUDA.CacheConfig.PreferShared">
<summary>
 Prefer larger shared memory and smaller L1 cache.
</summary>
</member>
<member name="T:Alea.CUDA.CacheConfig.Default">
<summary>
 No preference for shared memory or L1.
</summary>
</member>
<member name="P:Alea.CUDA.CacheConfig.Enum">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.CacheConfig">
<summary>
 GPU cache configuration.
</summary>
</member>
<member name="T:Alea.CUDA.CompileError.LicenseInvalid">
<summary>
 The license is not valid
</summary>
</member>
<member name="T:Alea.CUDA.CompileError.Exception">
<summary>
 General error reported by exception.
</summary>
</member>
<member name="T:Alea.CUDA.CompileError.InvalidFunctionExpression">
<summary>
 Invalid function expression; the reason is attached.
</summary>
</member>
<member name="T:Alea.CUDA.CompileError.UnsupportedPropertySet">
<summary>
 Unsupported property set expression; the property information and diagnostic messages are attached.
 This error means that there is no IR builder available for this method call.  You can fix this by adding the corresponding IR builder.
</summary>
</member>
<member name="T:Alea.CUDA.CompileError.UnsupportedPropertyGet">
<summary>
 Unsupported property get expression; the property information and diagnostic messages are attached.
 This error means that there is no IR builder available for this method call.  You can fix this by adding the corresponding IR builder.
</summary>
</member>
<member name="T:Alea.CUDA.CompileError.UnsupportedNewObject">
<summary>
 Unsupported new object expression; the constructor information and diagnostic messages are attached.
 This error means that the IRNewObjectBuilder failed to construct your custom object.
</summary>
</member>
<member name="T:Alea.CUDA.CompileError.UnsupportedCall">
<summary>
 Unsupported call expression; the method information and diagnostic messages are attached.
 This error means that there is no IR builder available for this method call.  You can fix this by adding the corresponding IR builder.
</summary>
</member>
<member name="T:Alea.CUDA.CompileError.UnsupportedExpression">
<summary>
 Unsupported quotation expression; the expression object is attached.
 This error means that you are using some language construct that is not allowed in the Alea GPU CUDA kernel DSL specification.
</summary>
</member>
<member name="P:Alea.CUDA.CompileError.Diagnostics">
<summary>
 Diagnostic message in string.
</summary>
</member>
<member name="P:Alea.CUDA.CompileError.Detail">
<summary>
 Detail error message in a string.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CompileError">
<summary>
 A union of various compilation errors.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.CompileOptions.LinkageFMA">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.LinkagePrecDiv">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.LinkagePrecSqrt">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.LinkageFTZ">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.LinkageOpt">
<summary>
 NVVM linking option for optimization level.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.LinkageGenerateLineInfo">
<summary>
 NVVM linking option for generating line information.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.LinkageG">
<summary>
 NVVM linking option &apos;-g&apos;, for debugging linking.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.LibDeviceMode">
<summary>
 Specify how to use LibDevice. `Auto` is recommended.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.DiagnosticInfo">
<summary>
 The level of diagnostic information that should be generated.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.StickToMinimalArch">
<summary>
 Tells the worker to use the minimal arch to load instead of the worker&apos;s arch.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.MinimalArch">
<summary>
 minimal GPU arch.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.AddressSize">
<summary>
 Address size for the GPU code.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.ModuleName">
<summary>
 The module name. If a module is used as library, it _must_ be assigned with a module name.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.ProfilingConfig">
<summary>
 Creates a profiling-level configuration using the address size of the current process.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.OptimizedConfig">
<summary>
 Creates an optimized-level configuration using the address size of the current process.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.NameSeperator">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.HasModuleName">
<summary>
 Indicates if the module name has been set explicitly.
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.ExtensionKeyIRBitCodeTransform">
<summary>
[omit]
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.ExtensionKeyCustomCallBuilder">
<summary>
[omit]
</summary>
</member>
<member name="P:Alea.CUDA.CompileOptions.DiagnosticConfig">
<summary>
 Creates a diagnostic-level configuration using the address size of the current process.
</summary>
</member>
<member name="M:Alea.CUDA.CompileOptions.Verify">
<summary>
 Verify current options.
</summary>
</member>
<member name="M:Alea.CUDA.CompileOptions.ToProfilingConfig">
<summary>
 Returns new options specialized for obtaining profiling information.
</summary>
</member>
<member name="M:Alea.CUDA.CompileOptions.ToFastMathConfig">
<summary>
 Returns new options with CUDA Fast Math turned on.
</summary>
</member>
<member name="M:Alea.CUDA.CompileOptions.ToDiagnosticConfig">
<summary>
 Returns new options specialized for obtaining diagnostic information. This configuration
 is used for debugging.
</summary>
</member>
<member name="M:Alea.CUDA.CompileOptions.SetStickToMinimalArch(System.Boolean)">
<summary>
 Returns new options with the specified `StickToMinmalArch` setting.
</summary>
</member>
<member name="M:Alea.CUDA.CompileOptions.SetModuleName(System.String)">
<summary>
 Returns new options with the specified module name.
</summary>
</member>
<member name="M:Alea.CUDA.CompileOptions.SetMinimalArch(Alea.CUDA.DeviceArch)">
<summary>
 Returns new options with the specified minimal GPU arch.
</summary>
</member>
<member name="M:Alea.CUDA.CompileOptions.SetAddressSize(Alea.CUDA.AddressSize)">
<summary>
 Returns new options with the specified GPU address size.
</summary>
</member>
<member name="M:Alea.CUDA.CompileOptions.InstallExtensions(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}})">
<summary>
 Install a set of compiler extensions.
</summary>
</member>
<member name="M:Alea.CUDA.CompileOptions.InstallExtension(System.Tuple{System.String,System.Object})">
<summary>
 Install compiler extension.
</summary>
</member>
<member name="M:Alea.CUDA.CompileOptions.CreateProfilingConfig(Alea.CUDA.AddressSize)">
<summary>
 Create a profiling-level configuration using the specified GPU address size.
</summary>
</member>
<member name="M:Alea.CUDA.CompileOptions.CreateOptimizedConfig(Alea.CUDA.AddressSize)">
<summary>
 Creates an optimize-level configuration using the specified GPU address size.
</summary>
</member>
<member name="M:Alea.CUDA.CompileOptions.CreateDiagnosticConfig(Alea.CUDA.AddressSize)">
<summary>
 Creates a diagnostic-level configuration using the specified GPU address size.
</summary>
</member>
<member name="T:Alea.CUDA.CompileOptions">
<summary>
 A record used for the specification of various compilation options.
</summary>
</member>
<member name="T:Alea.CUDA.CompileResult`1.Failure">
<summary>
 Compilation failed; the source location, compile error, and exception are attached.
</summary>
</member>
<member name="T:Alea.CUDA.CompileResult`1.Success">
<summary>
 Compilation succeeded; the `IRModule&lt;&apos;T&gt;`, compiler warnings, and the source locations of the compiler warnings are attached.
</summary>
</member>
<member name="P:Alea.CUDA.CompileResult`1.Warnings">
<summary>
 Get the compilation warnings.
</summary>
</member>
<member name="P:Alea.CUDA.CompileResult`1.Succeeded">
<summary>
 Returns true if the compilation has succeeded; false otherwise.
</summary>
</member>
<member name="P:Alea.CUDA.CompileResult`1.IRModule">
<summary>
 Get the resulting `IRModule` of a successful compilation.
</summary>
</member>
<member name="P:Alea.CUDA.CompileResult`1.HasWarning">
<summary>
 Returns true if there are any compilation warnings.
</summary>
</member>
<member name="P:Alea.CUDA.CompileResult`1.HasError">
<summary>
 Returns true if there are any compilation errors.
</summary>
</member>
<member name="P:Alea.CUDA.CompileResult`1.Failed">
<summary>
 Returns true if the compilation has failed; false otherwise.
</summary>
</member>
<member name="P:Alea.CUDA.CompileResult`1.Exception">
<summary>
 Internally, compilation errors are reported by exceptions.  You can access these exceptions via this property
</summary>
</member>
<member name="P:Alea.CUDA.CompileResult`1.Error">
<summary>
 Get the source location and error from a failed compilation; returns a tuple of type `SourceLocation * CompileError` 
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CompileResult`1">
<summary>
 A union representing the compilation result of a `Template&lt;&apos;T&gt;`.
</summary>
</member>
<member name="T:Alea.CUDA.CompileWarning.SourceInfoUnavailable">
<summary>
 Cannot access source code information; the reason is attached.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CompileWarning">
<summary>
 A union of various compilation warnings.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Compiler.DefaultCompileOptions(Alea.CUDA.CompileOptions)">
<summary>
 Gets the default compilation options using the bitness of the current process as the address size.
</summary>
</member>
<member name="P:Alea.CUDA.Compiler.DefaultCompileOptions">
<summary>
 Gets the default compilation options using the bitness of the current process as the address size.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.UpdateOptions(Microsoft.FSharp.Core.FSharpFunc{Alea.CUDA.CompileOptions,Alea.CUDA.CompileOptions})">
<summary>
 A workflow statement used to modify the compilation options within a `cuda` workflow.
 This __MUST__ be the first statement in the workflow, and you __CANNOT__
 change the module name within the compilation options.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.SetIRBitCodeTransform(System.Object)">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.Link``1(Alea.CUDA.IRModule{``0},Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.IRModule},Alea.CUDA.LinkOptions,System.Byte[])">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.Link``1(Alea.CUDA.IRModule{``0},Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.IRModule},Alea.CUDA.LinkOptions)">
<summary>
 Link an `IRModule` and libraries (a list of IR modules) to a `PTXModule` using the specified linking options.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.Link``1(Alea.CUDA.IRModule{``0},Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.IRModule},Alea.CUDA.DeviceArch)">
<summary>
 Link an `IRModule` and _libraries_ (a list of IR modules) to a `PTXModule` using the specified device arch.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.Link``1(Alea.CUDA.IRModule{``0},Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.IRModule})">
<summary>
 Link an `IRModule` and _libraries_ (a list of IR modules) to a `PTXModule`.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.Link``1(Alea.CUDA.IRModule{``0},Alea.CUDA.LinkOptions)">
<summary>
 Link an `IRModule` to a `PTXModule` using the specified linking options.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.Link``1(Alea.CUDA.IRModule{``0},Alea.CUDA.DeviceArch)">
<summary>
 Link an `IRModule` to a `PTXModule` using the specified device arch.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.Link``1(Alea.CUDA.IRModule{``0})">
<summary>
 Link an `IRModule` to a `PTXModule`; the linking options are generated using the compilation options of the IRModule.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.DefineNonInlineFunction``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 A workflow statement used to define a non-inline device function.  When used within a workflow this function will return a
 `Resources.Kernel&lt;&apos;KernelSig&gt;` object which has a `member Invoke : &apos;Sig`.  This member is used to invoke the device function
 from within a kernel.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.DefineKernelWithName``1(System.String,Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 A workflow statement used to define a kernel function with a name.  This can be helpful when analyzing diagnostic and
 debugging information.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.DefineKernelByMethod(Microsoft.FSharp.Core.FSharpOption{System.Object},System.Reflection.MethodInfo,Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.DefineKernel``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 A workflow statement used to define a kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.DefineInlineFunction``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 A workflow statement used to define an inline device function.  When used within a workflow this function will return a
 `Resources.Kernel&lt;&apos;KernelSig&gt;` object which has a `member Invoke : &apos;Sig`.  This member is used to invoke the device 
 function from within a kernel.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.DefineFunction``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 A workflow statement used to define a device function.  When used within a workflow this function will return a
 `Resources.Kernel&lt;&apos;KernelSig&gt;` object which has a `member Invoke : &apos;Sig`.  This member is used to invoke the 
 device function from within a kernel.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.DefineConstantVariable``1">
<summary>
 A workflow statement used to define a constant variable.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.DefineConstantVariable``1(``0)">
<summary>
 A workflow statement used to define a constant variable resource with an initial value.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.DefineConstantArray``1(System.Int32)">
<summary>
 A workflow statement used to define a constant array.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.Compile``1(Alea.CUDA.Template{``0},Alea.CUDA.CompileOptions,System.Byte[],Alea.CUDA.ModuleInfo)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.Compile``1(Alea.CUDA.Template{``0},Alea.CUDA.CompileOptions)">
<summary>
 Compile the template using the specified compilation options.
</summary>
</member>
<member name="M:Alea.CUDA.Compiler.Compile``1(Alea.CUDA.Template{``0})">
<summary>
 Compile the template using the default compilation options for release.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Compiler">
<summary>
 A type which provides the compiling and linking service(s) via its static methods.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CustomBuilder.CustomNewObjectBuilder">
<summary>
 Custom new object expression builder by a `ConstructorInfo` as key and a `ICustomNewObjectBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.CustomBuilder.CustomPropertySetBuilder">
<summary>
 Custom property set expression builder by a `PropertyInfo` as key and a `ICustomPropertySetBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.CustomBuilder.CustomPropertyGetBuilder">
<summary>
 Custom property get expression builder by a `PropertyInfo` as key and a `ICustomPropertyGetBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.CustomBuilder.CustomFieldSetBuilder">
<summary>
 Custom field set expression builder by a `FieldInfo` as key and a `ICustomFieldSetBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.CustomBuilder.CustomFieldGetBuilder">
<summary>
 Custom field get expression builder by a `FieldInfo` as key and a `ICustomFieldGetBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.CustomBuilder.CustomCallBuilder">
<summary>
 Custom call expression builder by a `MethodInfo` as key and a `ICustomCallBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.CustomBuilder.CustomConstantBuilder">
<summary>
 Custom constant expression builder by a `Type` as key and a `ICustomConstantBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.CustomBuilder.CustomTypeBuilder">
<summary>
 Custom type builder by a `Type` as key and a `ICustomTypeBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.CustomBuilder">
<summary>
 A union of different custom builders; used with the builder registry.
</summary>
</member>
<member name="T:Alea.CUDA.CustomMarshaler.CustomFromUnmanagedMarshaler">
<summary>
 Custom from unmanaged marshaler by a `Type` as key and a `ICustomFromUnmanagedMarshaler`.
</summary>
</member>
<member name="T:Alea.CUDA.CustomMarshaler.CustomToUnmanagedMarshaler">
<summary>
 Custom to unmanaged marshaler by a `Type` as key and a `ICustomToUnmanagedMarshaler`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.DIScope">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.DefaultMonitor">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Device.Type">
<summary>
 The device type, if known
</summary>
</member>
<member name="P:Alea.CUDA.Device.TotalMemory">
<summary>
 Total device memory size.
</summary>
</member>
<member name="P:Alea.CUDA.Device.Properties">
<summary>
 Properties of this device.
</summary>
</member>
<member name="P:Alea.CUDA.Device.Name">
<summary>
 The device name.
</summary>
</member>
<member name="P:Alea.CUDA.Device.ID">
<summary>
 The zero-based integer id of this device in the system.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Device.DeviceDict">
<summary>
 Maps the device id to a device object
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Device.Cores">
<summary>
 Total number of cuda cores.
</summary>
</member>
<member name="P:Alea.CUDA.Device.Attributes">
<summary>
 Attributes of this device.
</summary>
</member>
<member name="P:Alea.CUDA.Device.Arch">
<summary>
 The device architecture (a.k.a. the compute capability).
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Device.QueryAll">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Device.Query">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Device">
<summary>
 Represents a CUDA-capable device.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.DeviceArch.WarpThreads">
<summary>
 The number of threads per warp i.e. 32
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.WarpAllocUnit">
<summary>
 If `number` &gt;= 300 then 4 else 2
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.SubscriptionFactor">
<summary>
 If `number` &gt;= 300 then 5 else 3
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.SMEMBytes">
<summary>
 Total number of bytes of shared memory available per thread block i.e. 48*1024 = 49152
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.SMEMBanks">
<summary>
 The number of shared memory banks i.e. 32
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.SMEMBankBytes">
<summary>
 The number of bytes per shared memory bank i.e. 4
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.SMEMAllocUnit">
<summary>
 If `number` &gt;= 300 then 256 else 128
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.RegsByBlock">
<summary>
 false
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.RegAllocUnit">
<summary>
 If `number` &gt;= 300 then 256 else 64
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.PreferConflictOverPadding">
<summary>
 If `number` &gt;= 300 then 1 else 4
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.Number">
<summary>
 major * 100 + minor * 10; e.g., 3.5 is represented as 350
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.Minor">
<summary>
 The minor version number of the compute capability e.g., 5 of 3.5
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.MaxSMThreads">
<summary>
 If `number` &gt;= 300 then 2048 else 1536
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.MaxSMRegisters">
<summary>
 If `number` &gt;= 300 then 64 * 1024 else 32 * 1024
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.MaxSMBlocks">
<summary>
 If `number` &gt;= 300 then 16 else 8
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.MaxBlockThreads">
<summary>
 Maximum number of threads per block i.e. 1024
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.Major">
<summary>
 The major version number of the compute capability e.g., 3 of 3.5
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.LogWarpThreads">
<summary>
 Log base 2 of the number of threads per warp i.e. log(32) = 5
</summary>
</member>
<member name="P:Alea.CUDA.DeviceArch.LogSMEMBanks">
<summary>
 Log base 2 of the number of shared memory banks i.e. log(32) = 5
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.DeviceArch.Create(System.String)">
<summary>
 Create a `DeviceArch` object using one of the following strings:
 sm20, sm30, sm35
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.DeviceArch">
<summary>
 A type used to represent information related to a particular cuda compute capability.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.DeviceAttributes">
<summary>
 Device attributes.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.DeviceFunctionAttribute">
<summary>
 Attribute for device functions.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.DeviceMemory.Worker">
<summary>
 Reflected worker.
</summary>
</member>
<member name="P:Alea.CUDA.DeviceMemory.Size">
<summary>
 Allocated memory size in bytes.
</summary>
</member>
<member name="P:Alea.CUDA.DeviceMemory.Handle">
<summary>
 The `CUdeviceptr` handle of this memory.
</summary>
</member>
<member name="P:Alea.CUDA.DeviceMemory.Context">
<summary>
 The worker context that created this stream.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.DeviceMemory">
<summary>
 A wrapper for a CUDA device memory pointer, representing a device memory allocation. This type
 implements the `IDisposable` interface. 
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.DeviceMemory`1.Ptr">
<summary>
 Gets the `deviceptr&lt;&apos;T&gt;` of this memory
</summary>
</member>
<member name="P:Alea.CUDA.DeviceMemory`1.LongLength">
<summary>
 Number of elements (in 64bit integer).
</summary>
</member>
<member name="P:Alea.CUDA.DeviceMemory`1.Length">
<summary>
 Number of elements (in 32bit integer).
</summary>
</member>
<member name="P:Alea.CUDA.DeviceMemory`1.IntPtrLength">
<summary>
 Number of elements (in IntPtr).
</summary>
</member>
<member name="M:Alea.CUDA.DeviceMemory`1.ScatterScalar(`0)">
<summary>
 Scatters a scalar value at index 0.
</summary>
</member>
<member name="M:Alea.CUDA.DeviceMemory`1.ScatterScalar(`0,System.Int32)">
<summary>
 Scatters a scalar value at specified index.
</summary>
</member>
<member name="M:Alea.CUDA.DeviceMemory`1.Scatter(`0[])">
<summary>
 Scatter host data to device.
</summary>
</member>
<member name="M:Alea.CUDA.DeviceMemory`1.GatherScalar">
<summary>
 Gathers the scalar value at index 0.
</summary>
</member>
<member name="M:Alea.CUDA.DeviceMemory`1.GatherScalar(System.Int32)">
<summary>
 Gathers the scalar value at the specified index.
</summary>
</member>
<member name="M:Alea.CUDA.DeviceMemory`1.Gather">
<summary>
 Gathers data from device to host.
</summary>
</member>
<member name="M:Alea.CUDA.DeviceMemory`1.Gather(`0[])">
<summary>
 Gathers data from device to host.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.DeviceMemory`1">
<summary>
 Typed device memory, inherited from untyped `DeviceMemory`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.DeviceProperties">
<summary>
 Device properties.
</summary>
</member>
<member name="T:Alea.CUDA.DiagnosticInfo.NoInfo">
<summary>
 Used in optimized configuration; instructs the compiler to provide no extra information about the source code.
</summary>
</member>
<member name="T:Alea.CUDA.DiagnosticInfo.LineInfo">
<summary>
 Used in profiling configuration; instructs the compiler to provide line information, a subset of debugging information.
</summary>
</member>
<member name="T:Alea.CUDA.DiagnosticInfo.DebugInfo">
<summary>
 Used in debug configuration; instructs the compiler to provide all debugging information.
</summary>
</member>
<member name="P:Alea.CUDA.DiagnosticInfo.NeedLineInfo">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.DiagnosticInfo.NeedDebugInfo">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.DiagnosticInfo">
<summary>
 Used within `CompileOptions`; provides different modes for diagnostic feedback.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.DisposableObject">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Entry`1.Main">
<summary>
 Returns a function of type `Program -&gt; &apos;T`.
</summary>
</member>
<member name="M:Alea.CUDA.Entry`1.Apply(Alea.CUDA.Program)">
<summary>
 Applies the function returned by the Main property to the specified program.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Entry`1">
<summary>
 A host resource for a template. A template _must_ return this kind of host resource to enable it
 to be loaded into a program.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Event.Worker">
<summary>
 The worker that created this event.
</summary>
</member>
<member name="P:Alea.CUDA.Event.Handle">
<summary>
 CUDA native handle of this event.
</summary>
</member>
<member name="P:Alea.CUDA.Event.Context">
<summary>
 The worker context that created this stream.
</summary>
</member>
<member name="M:Alea.CUDA.Event.Synchronize">
<summary>
 Synchronize event.
</summary>
</member>
<member name="M:Alea.CUDA.Event.Record">
<summary>
 Record event on stream 0n.
</summary>
</member>
<member name="M:Alea.CUDA.Event.Record(Alea.CUDA.Stream)">
<summary>
 Record event.
</summary>
</member>
<member name="M:Alea.CUDA.Event.ElapsedMilliseconds(Alea.CUDA.Event,Alea.CUDA.Event)">
<summary>
 Get the elapsed time, in milliseconds, between two events.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Event">
<summary>
 A wrapper for a CUDA event object. This type implements the `IDisposable` interface.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Events.remove_PTXCode(Microsoft.FSharp.Control.FSharpHandler{System.Byte[]})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.Events.remove_Message(System.EventHandler{Alea.CUDA.Message})">
<summary>
 The logging message event.
</summary>
</member>
<member name="M:Alea.CUDA.Events.remove_IRCode(Microsoft.FSharp.Control.FSharpHandler{System.Byte[]})">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.Events.PTXCode">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.Events.Message">
<summary>
 The logging message event.
</summary>
</member>
<member name="P:Alea.CUDA.Events.Instance">
<summary>
 Gets the singleton instance of the events collection.
</summary>
</member>
<member name="P:Alea.CUDA.Events.IRCode">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.Events.add_PTXCode(Microsoft.FSharp.Control.FSharpHandler{System.Byte[]})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.Events.add_Message(System.EventHandler{Alea.CUDA.Message})">
<summary>
 The logging message event.
</summary>
</member>
<member name="M:Alea.CUDA.Events.add_IRCode(Microsoft.FSharp.Control.FSharpHandler{System.Byte[]})">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Events">
<summary>
 A collection of events that can be monitored.
</summary>
</member>
<member name="T:Alea.CUDA.FloatingPointKind.Double">
<summary>
 Double precision floating point number.
</summary>
</member>
<member name="T:Alea.CUDA.FloatingPointKind.Single">
<summary>
 Single precision floating point number.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.FloatingPointKind">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.FunctionResource.LambdaType">
<summary>
 The CLR type of this function.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.FunctionResource">
<summary>
 An untyped kernel compile time resource for a device function. `FunctionResource` is derived form `Resource`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.FunctionResourceAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.FunctionResource`1.Invoke">
<summary>
 Invoke the device function in a kernel quotation.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.FunctionResource`1">
<summary>
 A typed kernel compile time resource for a device function. `FunctionResource&lt;&apos;T&gt;` is derived from
 from the untyped `FunctionResource`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.GPUModule.GPUWorker">
<summary>
 Returns the GPU worker of this instance. Throws an exception when the current instance is
 created by a target which doesn&apos;t have a GPU worker, such as a compiler target.
</summary>
</member>
<member name="P:Alea.CUDA.GPUModule.GPUEntities">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.RetrieveKernel(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.OnLoad(Alea.CUDA.Program)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.OnLoad(Alea.CUDA.Program)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.ModifyCompileOptions(Alea.CUDA.CompileOptions)">
<summary>
 Override this to have control of the compile options during JIT or AOT compilation.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.ModifyCompileOptions(Alea.CUDA.CompileOptions)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GenerateTemplate(Alea.CUDA.CompileOptions)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``16(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``15(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``14(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``13(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``12(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``11(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``10(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``9(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``8(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``7(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``6(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``5(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``4(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``3(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunchMethod``2(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function when
 kernel function is fully tupled.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``16(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.FSharpFunc{``9,Microsoft.FSharp.Core.FSharpFunc{``10,Microsoft.FSharp.Core.FSharpFunc{``11,Microsoft.FSharp.Core.FSharpFunc{``12,Microsoft.FSharp.Core.FSharpFunc{``13,Microsoft.FSharp.Core.FSharpFunc{``14,Microsoft.FSharp.Core.FSharpFunc{``15,Microsoft.FSharp.Core.Unit}}}}}}}}}}}}}}}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``15(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.FSharpFunc{``9,Microsoft.FSharp.Core.FSharpFunc{``10,Microsoft.FSharp.Core.FSharpFunc{``11,Microsoft.FSharp.Core.FSharpFunc{``12,Microsoft.FSharp.Core.FSharpFunc{``13,Microsoft.FSharp.Core.FSharpFunc{``14,Microsoft.FSharp.Core.Unit}}}}}}}}}}}}}}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``14(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.FSharpFunc{``9,Microsoft.FSharp.Core.FSharpFunc{``10,Microsoft.FSharp.Core.FSharpFunc{``11,Microsoft.FSharp.Core.FSharpFunc{``12,Microsoft.FSharp.Core.FSharpFunc{``13,Microsoft.FSharp.Core.Unit}}}}}}}}}}}}}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``13(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.FSharpFunc{``9,Microsoft.FSharp.Core.FSharpFunc{``10,Microsoft.FSharp.Core.FSharpFunc{``11,Microsoft.FSharp.Core.FSharpFunc{``12,Microsoft.FSharp.Core.Unit}}}}}}}}}}}}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``12(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.FSharpFunc{``9,Microsoft.FSharp.Core.FSharpFunc{``10,Microsoft.FSharp.Core.FSharpFunc{``11,Microsoft.FSharp.Core.Unit}}}}}}}}}}}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``11(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.FSharpFunc{``9,Microsoft.FSharp.Core.FSharpFunc{``10,Microsoft.FSharp.Core.Unit}}}}}}}}}}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``10(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.FSharpFunc{``9,Microsoft.FSharp.Core.Unit}}}}}}}}}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``9(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.Unit}}}}}}}}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``8(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.Unit}}}}}}}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``7(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.Unit}}}}}}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``6(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``5(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``4(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``3(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``2(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPULaunch``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}})">
<summary>
 Gets launching function by given a quotation of the kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPUForceLoad">
<summary>
 By default, GPU JIT or AOT compiling is delayed until you first launch a kernel.
 Call this method to force the instance to JIT or AOT compile the module.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPUDefineResource``1(Alea.CUDA.Template{``0})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPUDefineResource``1(Microsoft.FSharp.Core.FSharpFunc{Alea.CUDA.CompileOptions,Alea.CUDA.Template{``0}})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPUDefineEntry``1(Microsoft.FSharp.Core.FSharpFunc{Alea.CUDA.CompileOptions,Alea.CUDA.Template{Alea.CUDA.Entry{``0}}})">
<summary>
Defines a GPU resource using the provided template factory function.  The factory function
can provide different implementations according to different compilation options. 
For example, `MinimalArch` will be set to the device architecture of the worker when 
doing JIT compilation; in an AOT compilation this will be specified in `FodyWeaver.xml`.

#### Examples

The following example shows two different implementations of a shuffling feature.
Shared memory is used if the required minimal architecture is 2.0. If the minimal
architecture is 3.0 or higher, then the intrinsic shuffle function is used instead.

    [lang=fsharp]
    [&lt;AOTCompile(SpecificArchs=&quot;sm20;sm30&quot;)&gt;]
    type ShuffleModule(target) as this =
        inherit GPUModule(target)

        let kernelShufl = cuda {
            let! kernel =
                &lt;@ fun (outputs:deviceptr&lt;int&gt;) (delta:int) -&gt;
                    let tid = threadIdx.x
                    outputs.[tid] &lt;- __shfl_down tid delta (__warp_size()) @&gt;
                |&gt; Compiler.DefineKernel
            return Entry(fun program -&gt; program.Apply kernel) }

        let kernelSmem = cuda {
            let warpSize = DeviceArch(2, 0).WarpThreads
            let! kernel =
                &lt;@ fun (outputs:deviceptr&lt;int&gt;) (delta:int) -&gt;
                    let tid = threadIdx.x
                    let shared = __shared__.Array&lt;int&gt;(warpSize)
                    shared.[tid] &lt;- tid
                    outputs.[tid] &lt;- shared.[(tid + delta) % warpSize] @&gt;
                |&gt; Compiler.DefineKernel
            return Entry(fun program -&gt; program.Apply kernel) }

        let kernel =
            fun (options:CompileOptions) -&gt;
                match options.MinimalArch with
                | arch when arch.Number &gt;= 300 -&gt; kernelShufl
                | _ -&gt; kernelSmem
            |&gt; this.GPUDefineEntry

        member this.Test() =
            let warpSize = this.GPUWorker.Device.Arch.WarpThreads
            use outputs = this.GPUWorker.Malloc&lt;int&gt;(warpSize)
            let lp = LaunchParam(1, warpSize)
            let delta = if this.GPUWorker.Device.Arch.Number = 200 then 2 else 3
            kernel.Runtime.Launch lp outputs.Ptr delta
            let outputs = outputs.Gather()
            printfn &quot;%A&quot; outputs
            for i = 0 to outputs.Length - delta - 1 do
                Assert.AreEqual(i + delta, outputs.[i])

    [&lt;Test&gt;]
    let foo() =
        use m = new ShuffleModule(GPUModuleTarget.DefaultWorker)
        m.Test()
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.GPUDefineEntry``1(Alea.CUDA.Template{Alea.CUDA.Entry{``0}})">
<summary>
Defines a GPU resource using the provided template. This is useful when you want to use
F# inline functions.

#### Examples

The following example shows how to reuse an algorithm in both single and double
precision:

    [lang=fsharp]
    let inline distanceTemplate() = cuda {
        let! kernel =
            &lt;@ fun (ds:deviceptr&lt;&apos;T&gt;)
                   (xs:deviceptr&lt;&apos;T&gt;)
                   (ys:deviceptr&lt;&apos;T&gt;) -&gt;
                let tid = threadIdx.x
                let x = xs.[tid]
                let y = ys.[tid]
                let d = sqrt(x*x + y*y) 
                ds.[tid] &lt;- d @&gt;
            |&gt; Compiler.DefineKernel
        return Entry(fun program -&gt; program.Apply kernel) }

    type DistanceKernel&lt;&apos;T&gt; =
        Kernel&lt;deviceptr&lt;&apos;T&gt; -&gt; deviceptr&lt;&apos;T&gt; -&gt; deviceptr&lt;&apos;T&gt; -&gt; unit&gt;

    type DistanceModule&lt;&apos;T&gt;(target, template:Template&lt;Entry&lt;DistanceKernel&lt;&apos;T&gt;&gt;&gt;) as this =
        inherit GPUModule(target)
        let kernel = this.GPUDefineEntry template
        member this.Calc(xs:&apos;T[], ys:&apos;T[]) =
            let n = xs.Length
            let lp = LaunchParam(1, n)
            use xs = this.GPUWorker.Malloc(xs)
            use ys = this.GPUWorker.Malloc(ys)
            use ds = this.GPUWorker.Malloc(n)
            kernel.Runtime.Launch lp ds.Ptr xs.Ptr ys.Ptr
            ds.Gather()

    [&lt;AOTCompile&gt;]
    type DistanceModuleF32(target) =
        inherit DistanceModule&lt;float32&gt;(target, distanceTemplate())

    [&lt;AOTCompile&gt;] 
    type DistanceModuleF64(target) =
        inherit DistanceModule&lt;float&gt;(target, distanceTemplate())

    [&lt;Test&gt;]
    let foo() =
        let xs = [| 1.0; 1.5; 2.0 |]
        let ys = [| 1.5; 2.0; 3.0 |]
        let expected = (xs, ys) ||&gt; Array.map2 (fun x y -&gt; sqrt(x*x + y*y))
        printfn &quot;%A&quot; expected

        use m32 = new DistanceModuleF32(GPUModuleTarget.DefaultWorker)
        let ds = m32.Calc(xs |&gt; Array.map float32, ys |&gt; Array.map float32)
        printfn &quot;%A&quot; ds

        use m64 = new DistanceModuleF64(GPUModuleTarget.DefaultWorker)
        let ds = m64.Calc(xs, ys)
        printfn &quot;%A&quot; ds
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.GPUModule.#ctor(Alea.CUDA.GPUModuleTarget)">
<summary>
 Create an instance by using a `GPUModuleTarget`.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GPUModule">
<summary>
Provides a way to organize GPU resources. You derive a type from this type, define kernels
as instance methods, then launch them at runtime.

#### Examples

Following is a minimal example of using `GPUModule`:

    [lang=fsharp]
    [&lt;AOTCompile&gt;]
    type MyModule(target) =
        inherit GPUModule(target)

        [&lt;Kernel;ReflectedDefinition&gt;]
        member this.Kernel (outputs:deviceptr&lt;int&gt;) (inputs:deviceptr&lt;int&gt;) =
            let tid = threadIdx.x
            outputs.[tid] &lt;- inputs.[tid] + 1

        member this.Run() =
            let n = 5
            let inputs = Array.init n id
            use inputs = this.GPUWorker.Malloc(inputs)
            use outputs = this.GPUWorker.Malloc(n)
            let lp = LaunchParam(1, n)
            this.GPULaunch &lt;@ this.Kernel @&gt; lp outputs.Ptr inputs.Ptr
            let outputs = outputs.Gather()
            printfn &quot;%A&quot; outputs

    let foo() =
        use myModule = new MyModule(GPUModuleTarget.DefaultWorker)
        myModule.Run()

The following example shows correct and incorrect ways to use the runtime resources:

    type MyModule2(target) as this =
        inherit GPUModule(target)
 
        // not recommended, it cannot be AOT compiled.
        let worker = this.GPUWorker
 
        // not recommended, it cannot be AOT compiled.
        let dmem1 = this.GPUWorker.Malloc&lt;int&gt;(100)
 
        // correct, it can be AOT compiled.
        let dmem2 = Lazy.Create &lt;| fun _ -&gt; this.GPUWorker.Malloc&lt;int&gt;(100)
 
        member this.Run() =
            // correct
            let worker = this.GPUWorker
 
            // correct
            let dmem2 = dmem2.Value
 
            ()

#### Remarks

- Kernels are defined as public instance methods using the attributes `[&lt;Kernel;ReflectedDefinition&gt;]`.
- Kernels are defined as F# function values; arguments should not be tupled.
- Kernels cannot be defined as inline instance methods.
- To use F# inline functions, you need to combine using a template and the `GPUModule.GPUDefineEntry` method.
- Avoid evaluating runtime resources in the constructor; see examples below.
- This type implements the `IDisposable` interface; it is recommended to use it with the `use` keyword, or
  explicitly manage the life cycle of its instance by calling its `Dispose()` method.
- Add the `[&lt;AOTCompile&gt;]` attribute to your derived type to inform `Alea.CUDA.Fody` to AOT 
  compile your GPU module. This requires that your derived type has one and only one constructor
  which accepts one and only one argument of `GPUModuleTarget`.

</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GPUModuleEntities">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.GPUModuleEntry`1.Runtime">
<summary>
 Gets the runtime object. This property should not be accessed in `YourGPUModule`&apos;s constructor.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GPUModuleEntry`1">
<summary>
 Represents a GPU entry resource and its runtime object embedded as a field in `YourGPUModule`.
 Resource is of type `Entry&lt;&apos;T&gt;`, and its runtime object is of type `&apos;T`. This type inherits from
 type `GPUModuleResource&lt;Entry&lt;&apos;T&gt;&gt;`.
 You __shouldn&apos;t__ access its resource and runtime object in `YourGPUModule`&apos;s constructor.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GPUModuleKernelEntry">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.GPUModuleResource.UntypedResource(System.Object)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.GPUModuleResource.UntypedResource">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.GPUModuleResource.UntypedTemplate(Alea.CUDA.CompileOptions)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GPUModuleResource">
<summary>
 Represents a GPU resource embedded in `GPUModule`.
</summary>
</member>
<member name="P:Alea.CUDA.GPUModuleResource`1.Resource">
<summary>
 Gets the resource. This property __shouldn&apos;t__ be accessed in `YourGPUModule`&apos;s constructor.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GPUModuleResource`1">
<summary>
 Represents a GPU resource embedded as a field in `YourGPUModule`. Resource is of type `&apos;T`.
 This type inherits from type `GPUModuleResource`.
 You __shouldn&apos;t__ access resource property in `YourGPUModule`&apos;s constructor.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.GPUModuleTarget.DefaultWorker">
<summary>
 Using default worker as the target.
</summary>
</member>
<member name="P:Alea.CUDA.GPUModuleTarget.Compiler">
<summary>
 Using a compiler as the target. This is an internal usage for AOT compilation.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModuleTarget.Worker(Alea.CUDA.Worker)">
<summary>
 Using a worker instance as the target.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModuleTarget.TryGetWorker">
<summary>
 Gets the worker, if the target doesn&apos;t have worker, returns `None`.
</summary>
</member>
<member name="M:Alea.CUDA.GPUModuleTarget.GetWorker">
<summary>
 Gets the worker, if the target doesn&apos;t have worker, throws exception.
</summary>
</member>
<member name="T:Alea.CUDA.GPUModuleTarget">
<summary>
 Represents a target on which a `GPUModule` will be instantiated.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.GlobalArray.Resource">
<summary>
 The resource of this array
</summary>
</member>
<member name="P:Alea.CUDA.GlobalArray.Program">
<summary>
 The program which created this global array.
</summary>
</member>
<member name="P:Alea.CUDA.GlobalArray.Length">
<summary>
 The length of this array
</summary>
</member>
<member name="P:Alea.CUDA.GlobalArray.Handle">
<summary>
 The CUDA native handle of this global array.
</summary>
</member>
<member name="P:Alea.CUDA.GlobalArray.Context">
<summary>
 The worker context that created this stream.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GlobalArray">
<summary>
 Untyped runtime resource of global array. Also called _symbol_ in CUDA context.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.GlobalArrayResource.Length">
<summary>
 Length of the array.
</summary>
</member>
<member name="P:Alea.CUDA.GlobalArrayResource.ElementType">
<summary>
 The CLR type of the array element.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GlobalArrayResource">
<summary>
 Untyped kernel compile time global array resource. This type is derived from `Resource`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GlobalArrayResourceAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.GlobalArrayResource`1.Item(System.Int32,`0)">
<summary>
 Set the array element at index _idx_ in a kernel quotation. If this global array is in constant
 memory, setting an element will cause a kernel compile time error.
</summary>
</member>
<member name="P:Alea.CUDA.GlobalArrayResource`1.Ptr">
<summary>
 Get a pointer pointing to the first element of the array.
</summary>
</member>
<member name="P:Alea.CUDA.GlobalArrayResource`1.Item(System.Int32)">
<summary>
 Get the array element at index _idx_ in a kernel quotation.
</summary>
</member>
<member name="P:Alea.CUDA.GlobalArrayResource`1.Array">
<summary>
 Use this property in a kernel quotation to get the array.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GlobalArrayResource`1">
<summary>
 Kernel compile time global array resource of element type `&apos;T`. This type is derived from
 untyped `GlobalArray`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.GlobalArray`1.Ptr">
<summary>
 The device pointer of this global array.
</summary>
</member>
<member name="M:Alea.CUDA.GlobalArray`1.Scatter(`0[])">
<summary>
 Scatter host data into this global array.
</summary>
</member>
<member name="M:Alea.CUDA.GlobalArray`1.Gather">
<summary>
 Gather data to host from this global array.
</summary>
</member>
<member name="M:Alea.CUDA.GlobalArray`1.Copy(Alea.CUDA.DeviceMemory{`0})">
<summary>
 Scatter data from device memory.
</summary>
</member>
<member name="M:Alea.CUDA.GlobalArray`1.Copy(Alea.CUDA.deviceptr{`0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Scatter data from device pointer.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GlobalArray`1">
<summary>
 Typed runtime resource of global array. Inherited from untyped `GlobalArray`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.GlobalVariable.Resource">
<summary>
 The resource of this variable
</summary>
</member>
<member name="P:Alea.CUDA.GlobalVariable.Program">
<summary>
 The program which created this global variable.
</summary>
</member>
<member name="P:Alea.CUDA.GlobalVariable.Handle">
<summary>
 The CUDA native handle of this global variable.
</summary>
</member>
<member name="P:Alea.CUDA.GlobalVariable.Context">
<summary>
 The worker context that created this stream.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GlobalVariable">
<summary>
 Untyped runtime resource of global variable. Also called _symbol_ in CUDA context.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.GlobalVariableResource.Type">
<summary>
 The CLR type of this variable.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GlobalVariableResource">
<summary>
 Untyped kernel compile time global variable resource. This type is derived from `Resource`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GlobalVariableResourceAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.GlobalVariableResource`1.Value">
<summary>
 Use this property in a kernel quotation to get the value of this variable.
</summary>
</member>
<member name="P:Alea.CUDA.GlobalVariableResource`1.Ref">
<summary>
 Use this property in a kernel quotation to get an F# `Ref&lt;&apos;T&gt;` of this variable.
</summary>
</member>
<member name="P:Alea.CUDA.GlobalVariableResource`1.Ptr">
<summary>
 Use this property in a kernel quotation to get the pointer to this variable.
 If this global variable is in constant memory, writing to this pointer will
 cause a kernel compile time error.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GlobalVariableResource`1">
<summary>
 Kernel compile time global variable resource of type `&apos;T`. This type is derived from 
 untyped `GlobalVariable`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.GlobalVariable`1.Ptr">
<summary>
 The device pointer of this global variable.
</summary>
</member>
<member name="M:Alea.CUDA.GlobalVariable`1.Scatter(`0)">
<summary>
 Scatter host data into this global variable.
</summary>
</member>
<member name="M:Alea.CUDA.GlobalVariable`1.Gather">
<summary>
 Gather data to host.
</summary>
</member>
<member name="M:Alea.CUDA.GlobalVariable`1.Copy(Alea.CUDA.deviceptr{`0})">
<summary>
 Copy data from device memory.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.GlobalVariable`1">
<summary>
 Typed runtime resource of global variable. Inherited from untyped `GlobalVariable`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.IPointer">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.IRFunctionBuildingContext">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.IRModule.CompileOptions">
<summary>
 The compiling options that are used to generate this `IRModule`.
</summary>
</member>
<member name="P:Alea.CUDA.IRModule.Bitcode">
<summary>
 The bitcode of this `IRModule`.
</summary>
</member>
<member name="M:Alea.CUDA.IRModule.Dump">
<summary>
 Dump this `IRModule`.
</summary>
</member>
<member name="M:Alea.CUDA.IRModule.#ctor(Alea.CUDA.ModuleInfo,Alea.CUDA.CompileOptions,System.Byte[])">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.IRModule">
<summary>
 Untyped IRModule.  Multiple `IRModule` objects can be compiled separately and linked together.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.IRModuleBuildingContext">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.IRModule`1.Untype">
<summary>
 Casts this object into untyped `IRModule`.
</summary>
</member>
<member name="P:Alea.CUDA.IRModule`1.Entry">
<summary>
 The entry point.
</summary>
</member>
<member name="M:Alea.CUDA.IRModule`1.#ctor(Alea.CUDA.ModuleInfo,Alea.CUDA.CompileOptions,System.Byte[],`0)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.IRModule`1">
<summary>
 Typed IRModule which is inherited from untyped `IRModule`. The type `&apos;T` is the entry point of this module.
 Multiple `IRModule` objects can be compiled separately and linked together.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.IRResourceBuildingContext">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.IRemoteAOTCompiler">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.IWorkerContext.ID">
<summary>
The identity of this worker context.
</summary>
</member>
<member name="P:Alea.CUDA.IWorkerContext.Device">
<summary>
The device of this worker context.
</summary>
</member>
<member name="M:Alea.CUDA.IWorkerContext.EvalFunc``1(System.Func{``0})">
<summary>
Evaluate a `System.Func` delegate withint this worker context.
</summary>
</member>
<member name="M:Alea.CUDA.IWorkerContext.EvalAction(System.Action)">
<summary>
Execute a `System.Action` delegate within this worker context.
</summary>
</member>
<member name="M:Alea.CUDA.IWorkerContext.Eval``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
Evaluate an F# function within this worker context.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.InteropUtil">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.JITCacheMode.CA">
<summary>
 Compile with L1 cache enabled.
</summary>
</member>
<member name="T:Alea.CUDA.JITCacheMode.CG">
<summary>
 Compile with L1 cache disabled.
</summary>
</member>
<member name="T:Alea.CUDA.JITCacheMode">
<summary>
 CUDA JIT compiling cache mode.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.JITOptions">
<summary>
 Loading options.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Kernel.SharedMemConfig(Alea.CUDA.SharedMemConfig)">
<summary>
 Set the shared memory configuration of this kernel function.
</summary>
</member>
<member name="P:Alea.CUDA.Kernel.CacheConfig(Alea.CUDA.CacheConfig)">
<summary>
 Set the cache configuration of this kernel function.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Kernel.SharedMemConfig">
<summary>
 Get the shared memory configuration of this kernel function.
</summary>
</member>
<member name="P:Alea.CUDA.Kernel.Resource">
<summary>
 The kernel compile time resource of this kernel function.
</summary>
</member>
<member name="P:Alea.CUDA.Kernel.Program">
<summary>
 The program that created this kernel function.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Kernel.Handle">
<summary>
 CUDA native handle of this kernel function.
</summary>
</member>
<member name="P:Alea.CUDA.Kernel.Context">
<summary>
 The worker context that created this stream.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Kernel.CacheConfig">
<summary>
 Get the cache configuration of this kernel function.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Kernel.MaxSmOccupancy(System.Int32)">
<summary>
 Calculates max SM occupancy via the provided block threads number. This function
 does not count the usage of extern shared memory.
</summary>
</member>
<member name="M:Alea.CUDA.Kernel.LaunchRaw(Alea.CUDA.LaunchParam,Microsoft.FSharp.Collections.FSharpList{System.Object})">
<summary>
 A raw launching method by sending parameters as `obj list`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Kernel">
<summary>
 Untyped runtime resource for a kernel function. This type implements the `IDisposable` interface to hold an unmanaged buffer for
 parameters allowing you to control its lifetime via calling its `Dispose()` method and/or using the _use_ keyword.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.KernelAttribute">
<summary>
 Attribute used to annotate an instance method of a `GPUModule` derived type as a 
 kernel function. The method should return `unit` in F# or `void` in other .NET languages.
 For more details, please reference the `GPUModule` type.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.KernelResource.SharedMemConfig(Alea.CUDA.SharedMemConfig)">
<summary>
 Set or Get the shared memory configuration of this kernel.
</summary>
</member>
<member name="P:Alea.CUDA.KernelResource.CacheConfig(Alea.CUDA.CacheConfig)">
<summary>
 Set or Get the GPU cache for this kernel.
</summary>
</member>
<member name="P:Alea.CUDA.KernelResource.SharedMemConfig">
<summary>
 Set or Get the shared memory configuration of this kernel.
</summary>
</member>
<member name="P:Alea.CUDA.KernelResource.ParamBufferSize">
<summary>
 Unmanaged buffer size for holding the kernel parameters.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.KernelResource.CacheConfig">
<summary>
 Set or Get the GPU cache for this kernel.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.KernelResource.PrepareParamPointerBuffer(System.IntPtr)">
<summary>
 Do some initial job for the unmanaged pointer buffer.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.KernelResource">
<summary>
 Untyped kernel compile time kernel function resource; inherits from `Resource` type.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.KernelResourceAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.KernelResource`1.CULaunch">
<summary>
 A raw kernel launching function, used by a runtime kernel resource.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.KernelResource`1">
<summary>
 Kernel compile time kernel function resource. The function is of type `&apos;T`. It is inherited
 from untyped `Kernel`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Kernel`1.cuLaunch(Alea.CUDA.LaunchParam)">
<summary>
 Launch this kernel without checking if it is in worker thread.
 You _must_ make sure this function is called inside the worker thread by using `WorkerThread.Eval` or `Worker.Eval`.
 This function is for gaining higher launching performance because it will not check if the thread is the correct worker thread.
</summary>
</member>
<member name="M:Alea.CUDA.Kernel`1.Launch(Alea.CUDA.LaunchParam)">
<summary>
 Launch this kernel.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Kernel`1">
<summary>
 Typed runtime kernel function; derived from untyped runtime kernel function.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.KnownTypesAttribute">
<summary>
Provides concrete type list for AOT compiling a generic kernel or GPU module.
 
#### Examples
    
    [lang=fsharp]
    [&lt;ReflectedDefinition;AOTCompile&gt;]
    [&lt;KnownTypes([| typeof&lt;int&gt; |])&gt;]
    [&lt;KnownTypes([| typeof&lt;float&gt; |])&gt;]
    let kernel (outputs:deviceptr&lt;&apos;T&gt;) (inputs:deviceptr&lt;&apos;T&gt;) (n:int) =
        let start = blockIdx.x * blockDim.x + threadIdx.x
        let stride = gridDim.x * blockDim.x
        let mutable i = start
        while i &lt; n do
            outputs.[i] &lt;- inputs.[i]
            i &lt;- i + stride
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.LaunchParam.StreamHandle">
<summary>
 CUDA native handle of the stream, `0n` represents the default stream.
</summary>
</member>
<member name="P:Alea.CUDA.LaunchParam.Stream">
<summary>
 On which stream the launching will be applied. `None` represents the default stream.
</summary>
</member>
<member name="P:Alea.CUDA.LaunchParam.SharedMemorySize">
<summary>
 Dynamic shared memory size in bytes.
</summary>
</member>
<member name="P:Alea.CUDA.LaunchParam.IsDefaultStream">
<summary>
 Indicate if it is launched in the default stream.
</summary>
</member>
<member name="P:Alea.CUDA.LaunchParam.GridDim">
<summary>
 Grid dimensions.
</summary>
</member>
<member name="P:Alea.CUDA.LaunchParam.BlockDim">
<summary>
 Block dimensions.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.LaunchParam.NewWithStream(Alea.CUDA.Stream)">
<summary>
 Creates a new `LaunchParam` with specified stream.
</summary>
</member>
<member name="M:Alea.CUDA.LaunchParam.NewWithSharedMemorySize(System.Int32)">
<summary>
 Creates a new `LaunchParam` with specified dynamic shared memory size.
</summary>
</member>
<member name="M:Alea.CUDA.LaunchParam.#ctor(System.Int32,System.Int32,System.Int32,Alea.CUDA.Stream)">
<summary>
 Create launching parameters with specified grid and block dimensions, and a dynamic allocated shared memory, and a specified stream.
</summary>
</member>
<member name="M:Alea.CUDA.LaunchParam.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
 Create launching parameters with specified grid and block dimensions, and a dynamic allocated shared memory.
</summary>
</member>
<member name="M:Alea.CUDA.LaunchParam.#ctor(System.Int32,System.Int32)">
<summary>
 Create launching parameters with only specified grid and block dimensions.
</summary>
</member>
<member name="M:Alea.CUDA.LaunchParam.#ctor(Alea.CUDA.dim3,Alea.CUDA.dim3,System.Int32,Alea.CUDA.Stream)">
<summary>
 Create launching parameters with specified grid and block dimensions, and a dynamic allocated shared memory, and a specified stream.
</summary>
</member>
<member name="M:Alea.CUDA.LaunchParam.#ctor(Alea.CUDA.dim3,Alea.CUDA.dim3,System.Int32)">
<summary>
 Create launching parameters using the provided grid and block dimensions, and a dynamically allocated shared memory.
</summary>
</member>
<member name="M:Alea.CUDA.LaunchParam.#ctor(Alea.CUDA.dim3,Alea.CUDA.dim3)">
<summary>
 Create launching parameters using the provided grid and block dimensions.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LaunchParam">
<summary>
 Kernel launching parameters.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LibDeviceMode">
<summary>
 LibDevice mode configuration.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LicenseUtil">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.LinkError.Exception">
<summary>
 General error reported by general exception.
</summary>
</member>
<member name="T:Alea.CUDA.LinkError.Error">
<summary>
 Error with the NVVM result, message, and log.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LinkError">
<summary>
 Linking error union.
</summary>
</member>
<member name="P:Alea.CUDA.LinkOptions.fma">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.CUDA.LinkOptions.prec_div">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.CUDA.LinkOptions.prec_sqrt">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.CUDA.LinkOptions.ftz">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.CUDA.LinkOptions.arch">
<summary>
 Target device architecture.
</summary>
</member>
<member name="P:Alea.CUDA.LinkOptions.opt">
<summary>
 Linkage optimization configuration.
</summary>
</member>
<member name="P:Alea.CUDA.LinkOptions.generate_line_info">
<summary>
 NVVM linking option for generating line information.
</summary>
</member>
<member name="P:Alea.CUDA.LinkOptions.g">
<summary>
 NVVM linking option &apos;-g&apos;, for debugging linking.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.LinkOptions.OptionStrings">
<summary>
 Returns an array of linker option strings based on the values of this record&apos;s fields.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LinkOptions">
<summary>
 Linking options.
</summary>
</member>
<member name="T:Alea.CUDA.LinkResult`1.Failure">
<summary>
 Linking has failed; the linking error is attached.
</summary>
</member>
<member name="T:Alea.CUDA.LinkResult`1.Success">
<summary>
 Linking has succeeded; the `PTXModule&lt;&apos;T&gt;` and logs are attached.
</summary>
</member>
<member name="P:Alea.CUDA.LinkResult`1.Succeeded">
<summary>
 Returns true if this linking succeeded; false otherwise
</summary>
</member>
<member name="P:Alea.CUDA.LinkResult`1.PTXModule">
<summary>
 Get the resulting `PTXModule&lt;&apos;T&gt;` from this property if the linking succeeded
</summary>
</member>
<member name="P:Alea.CUDA.LinkResult`1.Log">
<summary>
 Get the log for this linking if one was generated.
</summary>
</member>
<member name="P:Alea.CUDA.LinkResult`1.HasLog">
<summary>
 Returns true if the linking generated a log.
</summary>
</member>
<member name="P:Alea.CUDA.LinkResult`1.HasError">
<summary>
 Returns true if the linking had an error.
</summary>
</member>
<member name="P:Alea.CUDA.LinkResult`1.Failed">
<summary>
 Returns true if this linking failed; false otherwise
</summary>
</member>
<member name="P:Alea.CUDA.LinkResult`1.Error">
<summary>
 Get the error with this property if the linking failed.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LinkResult`1">
<summary>
 Linking result of `IRModule&lt;&apos;T&gt;`.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LinkWarning">
<summary>
 Linking warning union.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LinkageOpt">
<summary>
 Linkage optimization configuration.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LocalArray2DCreatorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LocalArrayCreatorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LocalVariableCreatorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.MachineArchitecture">
<summary>
 Represents host machine architecture.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.MarshalerRegistry.Instance">
<summary>
 Get the instance of the registry.
</summary>
</member>
<member name="M:Alea.CUDA.MarshalerRegistry.Reset(Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.CustomMarshaler})">
<summary>
 Resets all previously defined builders and then registers the custom builders from the provided list.
</summary>
</member>
<member name="M:Alea.CUDA.MarshalerRegistry.Reset">
<summary>
 Resets all previously defined builders.
</summary>
</member>
<member name="M:Alea.CUDA.MarshalerRegistry.Ping">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.MarshalerRegistry">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.MatrixStorageOrder">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Message">
<summary>
 A type representing log messages.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.MessageImportance">
<summary>
 Importance level of messages for logging.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.ModuleInfo">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.NameBuilder">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.NameSchema">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.OperatingSystem._Current">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.OperatingSystem">
<summary>
 Represents operating system.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.PTXModule.LinkOptions">
<summary>
 The linking options that are used to generate this `PTXModule`.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.PTXModule.CompileOptions">
<summary>
 The compiling options that are used to generate this `PTXModule`.
</summary>
</member>
<member name="P:Alea.CUDA.PTXModule.Bitcode">
<summary>
 The bitcode of this `PTXModule`.
</summary>
</member>
<member name="M:Alea.CUDA.PTXModule.Dump">
<summary>
 Dump this `PTXModule`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.PTXModule">
<summary>
 Untyped PTXModule.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.PTXModuleBuilder">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.PTXModuleBuildingMessage">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.PTXModuleBuildingResult">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.PTXModule`1.Entry">
<summary>
 The entry point.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.PTXModule`1">
<summary>
 Typed PTXModule which is inherited from untyped `PTXModule`. The type `&apos;T` is the entry point of this module.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.PackedAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.PlatformUtil.ProcessBitness">
<summary>
 Gets current process bitness.
</summary>
</member>
<member name="P:Alea.CUDA.PlatformUtil.OperatingSystem">
<summary>
 Gets current operating system.
</summary>
</member>
<member name="P:Alea.CUDA.PlatformUtil.NewLine">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.PlatformUtil.MachineArchitecture">
<summary>
 Gets current host machine architecture.
</summary>
</member>
<member name="P:Alea.CUDA.PlatformUtil.Instance">
<summary>
 Gets the singleton instance of platform utility.
</summary>
</member>
<member name="P:Alea.CUDA.PlatformUtil.CTNativeDirectory">
<summary>
 Gets the directory for JIT compile natives.
</summary>
</member>
<member name="P:Alea.CUDA.PlatformUtil.CTLibDeviceDirectory">
<summary>
 Gets the directory for JIT compile LibDevice bitcode libraries.
</summary>
</member>
<member name="M:Alea.CUDA.PlatformUtil.MakeNativeExeName(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.PlatformUtil.MakeNativeDllName(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.PlatformUtil.GetModulePdbFileInfo(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.PlatformUtil.ExtractResource(System.Reflection.Assembly,System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.PlatformUtil">
<summary>
 Utility type that provides information about the current process.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.PointerAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.PointerDiffAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Program.Worker">
<summary>
 Reflected worker.
</summary>
</member>
<member name="P:Alea.CUDA.Program.Handle">
<summary>
 CUDA native handle of this program.
</summary>
</member>
<member name="P:Alea.CUDA.Program.Context">
<summary>
 The worker context that created this stream.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Program.Apply``1(Alea.CUDA.GlobalVariableResource{``0})">
<summary>
 Apply this program to a compile time global variable resource to get the global variable runtime.
</summary>
</member>
<member name="M:Alea.CUDA.Program.Apply``1(Alea.CUDA.GlobalArrayResource{``0})">
<summary>
 Apply this program to a compile time global array resource to get the global array runtime.
</summary>
</member>
<member name="M:Alea.CUDA.Program.Apply``1(Alea.CUDA.KernelResource{``0})">
<summary>
 Apply this program to a compile time kernel resource to get the kernel runtime.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Program">
<summary>
Untyped program runtime. A program is a runtime representation of `PTXModule`, it holds all
runtime resources, and implements `IDisposable` interface.
The program type:

 - represents a JIT compiled module
 - has a host entry point function
 - is loaded by a worker
 - has untyped and generic versions

 After loading a program, the generated program will be cast to its untyped version and then fed to the template&apos;s entry
 point host function as the first argument
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.ProgramProvider">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.ProgramProvider`1">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Program`1.Run">
<summary>
 This is the entry point of your program.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Program`1">
<summary>
 Typed runtime program, inherited from untyped `Program`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.QuotationSourceLocation.FileName">
<summary>
 Returns the name of the source file.
</summary>
</member>
<member name="M:Alea.CUDA.QuotationSourceLocation.TryGet(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Try to get the source location from an expression.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.QuotationSourceLocation">
<summary>
 Quotation source location.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.RemoteAOTCompileLogger">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.RemoteAOTCompiler">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Resource.Name">
<summary>
 The name of this resource.
</summary>
</member>
<member name="P:Alea.CUDA.Resource.AddressSpace">
<summary>
 The address space of this resource.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Resource">
<summary>
 Base type for kernel compile time resources.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SRegTripleAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Settings.Resource(Alea.CUDA.SettingElements.ResourceElement)">
<summary>
Configures resource settings.  When you want to do a JIT compilation, make sure
that this setting is set properly.  Alea.CUDA uses this information to locate 
things like native libraries required for performing a JIT compilation. The XML 
element is `&lt;resource ..../&gt;`.
Read more [here](alea-cuda-settingelements-resourceelement.html).
</summary>
</member>
<member name="P:Alea.CUDA.Settings.Monitor(Alea.CUDA.SettingElements.MonitorElement)">
<summary>
Configures a default monitor for events.
The XML element is `&lt;monitor .../&gt;`.
Read more [here](alea-cuda-settingelements-monitorelement.html).
</summary>
</member>
<member name="P:Alea.CUDA.Settings.License(Alea.CUDA.SettingElements.LicenseElement)">
<summary>
Configures license system, such as the license repository path.
The XML element is `&lt;license .../&gt;`.
Read more [here](alea-cuda-settingelements-licenseelement.html).
</summary>
</member>
<member name="P:Alea.CUDA.Settings.JITCompile(Alea.CUDA.SettingElements.JITCompileElement)">
<summary>
Configures JIT compiling. For example, you can set the default JIT compiling level.
The XML element is `&lt;jitCompile ..../&gt;`.
Read more [here](alea-cuda-settingelements-jitcompileelement.html).
</summary>
</member>
<member name="P:Alea.CUDA.Settings.Diagnostics(Alea.CUDA.SettingElements.DiagnosticsElement)">
<summary>
Configures diagnostics settings. The XML element is `&lt;diagnostics ..../&gt;`.
Read more [here](alea-cuda-settingelements-diagnosticselement.html).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Settings.CUDADriver(Alea.CUDA.SettingElements.CUDADriverElement)">
<summary>
Configures CUDA driver. Use this setting if you use a non-standard path for your
cuda driver dll installation.  The XML element is `&lt;cudaDriver ..../&gt;`.
Read more [here](alea-cuda-settingelements-cudadriverelement.html).
</summary>
</member>
<member name="P:Alea.CUDA.Settings.CUBLAS(Alea.CUDA.SettingElements.CULibElement)">
<summary>
Configures cuBLAS library; e.g. the path to find the NVIDIA cuBlas library.
The XML element is `&lt;cuBLAS ..../&gt;`.
Read more [here](alea-cuda-settingelements-culibelement.html).
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Settings.Resource">
<summary>
Configures resource settings.  When you want to do a JIT compilation, make sure
that this setting is set properly.  Alea.CUDA uses this information to locate 
things like native libraries required for performing a JIT compilation. The XML 
element is `&lt;resource ..../&gt;`.
Read more [here](alea-cuda-settingelements-resourceelement.html).
</summary>
</member>
<member name="P:Alea.CUDA.Settings.Monitor">
<summary>
Configures a default monitor for events.
The XML element is `&lt;monitor .../&gt;`.
Read more [here](alea-cuda-settingelements-monitorelement.html).
</summary>
</member>
<member name="P:Alea.CUDA.Settings.License">
<summary>
Configures license system, such as the license repository path.
The XML element is `&lt;license .../&gt;`.
Read more [here](alea-cuda-settingelements-licenseelement.html).
</summary>
</member>
<member name="P:Alea.CUDA.Settings.JITCompile">
<summary>
Configures JIT compiling. For example, you can set the default JIT compiling level.
The XML element is `&lt;jitCompile ..../&gt;`.
Read more [here](alea-cuda-settingelements-jitcompileelement.html).
</summary>
</member>
<member name="P:Alea.CUDA.Settings.Instance">
<summary>
Gets the singleton instance of Settings.
</summary>
</member>
<member name="P:Alea.CUDA.Settings.Diagnostics">
<summary>
Configures diagnostics settings. The XML element is `&lt;diagnostics ..../&gt;`.
Read more [here](alea-cuda-settingelements-diagnosticselement.html).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Settings.CUDADriver">
<summary>
Configures CUDA driver. Use this setting if you use a non-standard path for your
cuda driver dll installation.  The XML element is `&lt;cudaDriver ..../&gt;`.
Read more [here](alea-cuda-settingelements-cudadriverelement.html).
</summary>
</member>
<member name="P:Alea.CUDA.Settings.CUBLAS">
<summary>
Configures cuBLAS library; e.g. the path to find the NVIDIA cuBlas library.
The XML element is `&lt;cuBLAS ..../&gt;`.
Read more [here](alea-cuda-settingelements-culibelement.html).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Settings">
<summary>
This type derives from the .NET `ConfigurationSection` class. You can configure Alea.CUDA through .NET
configuration system.

#### Examples

Here is a simple example of what your `app.config` file would look like.

    [lang=xml]
    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
    &lt;configuration&gt;
      &lt;configSections&gt;
        &lt;section name=&quot;aleaCUDASettings&quot; type=&quot;Alea.CUDA.Settings, Alea.CUDA&quot; /&gt;
      &lt;/configSections&gt;
      &lt;startup&gt;
        &lt;supportedRuntime version=&quot;v4.0&quot; sku=&quot;.NETFramework,Version=v4.5&quot; /&gt;
      &lt;/startup&gt;
      &lt;aleaCUDASettings&gt;
        &lt;monitor name=&quot;default&quot;/&gt;
        &lt;jitCompile level=&quot;Diagnostic&quot;/&gt;
      &lt;/aleaCUDASettings&gt;
    &lt;/configuration&gt;

#### Remarks
 
There are two ways you can use this type to for configuring Alea.CUDA:

 - By using `app.config`, see examples above;
 - Or you can directly set it programmatically, by `Settings.Instance.XXXX &lt;- XXXX` (in F#),
   or `Settings.Instance.XXXX = XXXX` (in C#).
 
Note:

 - You can only choose one way to do a configuration, but you cannot use them both. If you used
   `app.config`, then `Settings.Instance` will become read-only.
 - If you choose to use `app.config`, the `configSections` element must be the first child
   element of the `configuration` element. For more details, please reference 
   [MSDN](https://msdn.microsoft.com/en-us/library/vstudio/ms228256(v=vs.100).aspx).
 - If you intend to set your configuration in a programmatical way, make sure you are setting
   everything prior to using any Alea.CUDA features.  This will ensure all features use the same
   configuration.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SharedArray2DCreatorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SharedArrayCreatorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SharedExternArrayCreatorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.SharedMemConfig.EightBytesBank">
<summary>
 Set shared memory bank width to eight bytes.
</summary>
</member>
<member name="T:Alea.CUDA.SharedMemConfig.FourBytesBank">
<summary>
 Set shared memory bank width to four bytes. 
</summary>
</member>
<member name="T:Alea.CUDA.SharedMemConfig.Default">
<summary>
 Set shared memory bank width to default.
</summary>
</member>
<member name="P:Alea.CUDA.SharedMemConfig.Enum">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.SharedMemConfig">
<summary>
 Shared memory configuration.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SharedVariableCreatorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.SourceLocation.Quotation">
<summary>
 Source location by quotation location.
</summary>
</member>
<member name="T:Alea.CUDA.SourceLocation.Description">
<summary>
 Source location by description.
</summary>
</member>
<member name="T:Alea.CUDA.SourceLocation.NotAvailable">
<summary>
 Source location is not available.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SourceLocation">
<summary>
 Source location.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Stream.Worker">
<summary>
 The worker that created this stream.
</summary>
</member>
<member name="P:Alea.CUDA.Stream.Handle">
<summary>
 CUDA native handle of this stream.
</summary>
</member>
<member name="P:Alea.CUDA.Stream.Context">
<summary>
 The worker context that created this stream.
</summary>
</member>
<member name="M:Alea.CUDA.Stream.Synchronize">
<summary>
 Synchronize this stream.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Stream">
<summary>
 A wrapper for a CUDA stream object. This type implements the `IDisposable` interface.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.SymbolTable`1.Scopes">
<summary>
 The scopes dictionary used within this symbol table
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.SymbolTable`1._IncreaseScope">
<summary>
 Redefines the `scopes` dictionary to be the concatenation of a new empty dictionary with the current value of `scopes`.
</summary>
</member>
<member name="M:Alea.CUDA.SymbolTable`1._DecreaseScope">
<summary>
 Redefines the `scopes` dictionary by removing the head dictionary in the list.
</summary>
</member>
<member name="M:Alea.CUDA.SymbolTable`1.TryGetSymbol(System.String)">
<summary>
 Attempts to find the symbol in the scopes dictionary using `name` as the key.
</summary>
</member>
<member name="M:Alea.CUDA.SymbolTable`1.HasSymbol(System.String)">
<summary>
 Returns `true` if the scopes dictionary contains the key `name`.
</summary>
</member>
<member name="M:Alea.CUDA.SymbolTable`1.Dump">
<summary>
 Outputs the current state of the symbol table.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SymbolTable`1">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.TargetGPU">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.TemplateBuilder">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.TemplateExtensions">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Template`1">
<summary>
 Template represents a resource of type `&apos;T` defined in the module.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.ThreadWorkerContext.ThreadID">
<summary>
 Managed thread id of this thread.
</summary>
</member>
<member name="P:Alea.CUDA.ThreadWorkerContext.SynchronizationContext">
<summary>
 A thread synchronization context; works with F# `async` workflow.
</summary>
</member>
<member name="P:Alea.CUDA.ThreadWorkerContext.Name">
<summary>
 Thread name; combines thread id and device name which is used to create the CUDA context.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.ThreadWorkerContext.ID">
<summary>
 A GUID of this thread.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.ThreadWorkerContext.Device">
<summary>
 The device that is used to create the CUDA context.
</summary>
</member>
<member name="P:Alea.CUDA.ThreadWorkerContext.ContextHandle">
<summary>
 Native handle of the CUDA context.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.ThreadWorkerContext.Eval``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Evaluate a value within the worker thread. All raw CUDA API should be called in the worker
 thread where it has a CUDA context attached.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.TypeQualifier.Volatile">
<summary>
 Create volatile qualifier.
</summary>
</member>
<member name="P:Alea.CUDA.TypeQualifier.Mutable">
<summary>
 Create mutable qualifier.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.TypeQualifier.Description">
<summary>
 Returns `const` or `volatile` depending on mutability and volatility.
</summary>
</member>
<member name="P:Alea.CUDA.TypeQualifier.Const">
<summary>
 Create const qualifier.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.TypeQualifier">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.UnionAttribute">
<summary>
 An attribute which can be added to a struct having a 0-offset for all fields; the struct will then be usable within kernels and behave like a union.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.VariableType">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Worker.PrintBufferSize(System.IntPtr)">
<summary>
Set or get the print buffer size.
</summary>
</member>
<member name="P:Alea.CUDA.Worker.PrintBufferSize">
<summary>
Set or get the print buffer size.
</summary>
</member>
<member name="P:Alea.CUDA.Worker.Device">
<summary>
Return the underlying device of this worker.
</summary>
</member>
<member name="P:Alea.CUDA.Worker.DefaultCompileOptions">
<summary>
The default compilation options for this worker.
</summary>
</member>
<member name="P:Alea.CUDA.Worker.Default">
<summary>
The default worker.
</summary>
</member>
<member name="P:Alea.CUDA.Worker.Context">
<summary>
Returns the worker context object.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Worker.Synchronize">
<summary>
Synchronize the underlying thread (on its CUDA context).
</summary>
</member>
<member name="M:Alea.CUDA.Worker.Scatter``1(``0[],Alea.CUDA.deviceptr{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
Scatter a host array into the device memory pointed to by device pointer `dptr`.
You can optionally specify the offset and length of the host array.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.RetrieveKernel(System.Reflection.MethodInfo,Microsoft.FSharp.Core.FSharpFunc{Alea.CUDA.Worker,Microsoft.FSharp.Core.FSharpFunc{System.Reflection.MethodInfo,Microsoft.FSharp.Core.FSharpOption{Alea.CUDA.Program{Alea.CUDA.WorkerKernelEntry}}}})">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Worker.ResetKernels">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Worker.ProfilerStop">
<summary>
Define the end of a profiling region for Visual Profiler.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.ProfilerStart">
<summary>
Define the beginning of a profiling region for Visual Profiler.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.Malloc``1(``0[])">
<summary>
Allocate device memory and then scatter a host array to it.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.Malloc``1(System.Int64)">
<summary>
Allocate device memory of required space.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.Malloc``1(System.Int32)">
<summary>
Allocate device memory of required space.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.Malloc``1(System.IntPtr)">
<summary>
Allocate device memory of required space.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.LoadProgram``1(Alea.CUDA.Template{Alea.CUDA.Entry{``0}},Alea.CUDA.CompileOptions,Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.IRModule})">
<summary>
Load a disposable program from template and libraries with specified compiling options.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.LoadProgram``1(Alea.CUDA.Template{Alea.CUDA.Entry{``0}},Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.IRModule})">
<summary>
Load a disposable program from template and libraries.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.LoadProgram``1(Alea.CUDA.Template{Alea.CUDA.Entry{``0}},Alea.CUDA.CompileOptions)">
<summary>
Load a disposable program from a template using the specified compiling options.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.LoadProgram``1(Alea.CUDA.Template{Alea.CUDA.Entry{``0}})">
<summary>
Load a disposable program from a template.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.LoadProgram``1(Alea.CUDA.IRModule{Alea.CUDA.Entry{``0}},Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.IRModule})">
<summary>
Load a disposable program from an IR module and libraries.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.LoadProgram``1(Alea.CUDA.IRModule{Alea.CUDA.Entry{``0}})">
<summary>
Load a disposable program from an IR module.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.LoadProgram``1(Alea.CUDA.PTXModule{Alea.CUDA.Entry{``0}})">
<summary>
Load a disposable program from a PTX module.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.LoadProgram``1(Alea.CUDA.PTXModule{Alea.CUDA.Entry{``0}},Alea.CUDA.JITOptions)">
<summary>
Load a disposable program from a PTX module using the specified JIT compiling options.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.KernelParamTransform(System.Object)">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Worker.Get(Alea.CUDA.Device)">
<summary>
Gets the primary worker for the given device.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.Get(System.Int32)">
<summary>
Gets the primary worker for the given device id.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.Gather``1(Alea.CUDA.deviceptr{``0},``0[],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
Gather device memory (pointed to by a device pointer) into a host array.
You can optionally specify the offset and length of the host array.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.EvalFunc``1(System.Func{``0})">
<summary>
Evaluate a `Func` delegate using this worker&apos;s thread.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.EvalAction(System.Action)">
<summary>
Evaluate an `Action` delegate using this worker&apos;s thread.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.Eval``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
Evaluate a value using this worker&apos;s thread.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Worker.CreateThreadWorkerByFunc(System.Func{System.Tuple{Alea.CUDA.Device,System.IntPtr}})">
<summary>
Creates a worker with dedicated thread by giving a delegate
which returns a device and a CUDA context handle. 
</summary>
</member>
<member name="M:Alea.CUDA.Worker.CreateThreadWorker(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Tuple{Alea.CUDA.Device,System.IntPtr}})">
<summary>
Creates a worker with dedicated thread by giving an F# function
which returns a device and a CUDA context handle.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.CreateThreadWorker(Alea.CUDA.Device)">
<summary>
Creates a worker with dedicated thread by the given device.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.CreateThreadWorker(System.Int32)">
<summary>
Creates a worker with dedicated thread by the given device id.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.CreateStream">
<summary>
Create a CUDA stream object.       
</summary>
</member>
<member name="M:Alea.CUDA.Worker.CreateStream(System.UInt32)">
<summary>
Create a CUDA stream object.       
</summary>
</member>
<member name="M:Alea.CUDA.Worker.CreateEvent">
<summary>
Create a CUDA event object.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.CreateEvent(System.UInt32)">
<summary>
Create a CUDA event object.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.CreateByFunc(System.Func{System.Tuple{Alea.CUDA.Device,System.IntPtr}})">
<summary>
Creates a worker by giving a delegate
which returns a device and a CUDA context handle. 
</summary>
</member>
<member name="M:Alea.CUDA.Worker.Create(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Tuple{Alea.CUDA.Device,System.IntPtr}})">
<summary>
Creates a worker by giving an F# function
which returns a device and a CUDA context handle.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.Create(Alea.CUDA.Device)">
<summary>
Creates a worker by the given device.
</summary>
</member>
<member name="M:Alea.CUDA.Worker.Create(System.Int32)">
<summary>
Creates a worker by the given device id.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Worker">
<summary>
A Worker is essentially the combination of a device and a worker thread. The Worker provides services 
for creating CUDA runtime objects and loading a `PTXModule` into a `Program`. 
This type implements the `IDisposable` interface.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.WorkerExtension.RetrieveKernel(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``16(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``15(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``14(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``13(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``12(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``11(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``10(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``9(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7,``8},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``8(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``7(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5,``6},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``6(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4,``5},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``5(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``4(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``3(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.LaunchMethod``2(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 where the arguments are fully tupled, then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``16(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.FSharpFunc{``9,Microsoft.FSharp.Core.FSharpFunc{``10,Microsoft.FSharp.Core.FSharpFunc{``11,Microsoft.FSharp.Core.FSharpFunc{``12,Microsoft.FSharp.Core.FSharpFunc{``13,Microsoft.FSharp.Core.FSharpFunc{``14,Microsoft.FSharp.Core.FSharpFunc{``15,Microsoft.FSharp.Core.Unit}}}}}}}}}}}}}}}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``15(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.FSharpFunc{``9,Microsoft.FSharp.Core.FSharpFunc{``10,Microsoft.FSharp.Core.FSharpFunc{``11,Microsoft.FSharp.Core.FSharpFunc{``12,Microsoft.FSharp.Core.FSharpFunc{``13,Microsoft.FSharp.Core.FSharpFunc{``14,Microsoft.FSharp.Core.Unit}}}}}}}}}}}}}}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``14(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.FSharpFunc{``9,Microsoft.FSharp.Core.FSharpFunc{``10,Microsoft.FSharp.Core.FSharpFunc{``11,Microsoft.FSharp.Core.FSharpFunc{``12,Microsoft.FSharp.Core.FSharpFunc{``13,Microsoft.FSharp.Core.Unit}}}}}}}}}}}}}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``13(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.FSharpFunc{``9,Microsoft.FSharp.Core.FSharpFunc{``10,Microsoft.FSharp.Core.FSharpFunc{``11,Microsoft.FSharp.Core.FSharpFunc{``12,Microsoft.FSharp.Core.Unit}}}}}}}}}}}}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``12(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.FSharpFunc{``9,Microsoft.FSharp.Core.FSharpFunc{``10,Microsoft.FSharp.Core.FSharpFunc{``11,Microsoft.FSharp.Core.Unit}}}}}}}}}}}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``11(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.FSharpFunc{``9,Microsoft.FSharp.Core.FSharpFunc{``10,Microsoft.FSharp.Core.Unit}}}}}}}}}}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``10(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.FSharpFunc{``9,Microsoft.FSharp.Core.Unit}}}}}}}}}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``9(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.FSharpFunc{``8,Microsoft.FSharp.Core.Unit}}}}}}}}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``8(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.FSharpFunc{``7,Microsoft.FSharp.Core.Unit}}}}}}}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``7(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.FSharpFunc{``6,Microsoft.FSharp.Core.Unit}}}}}}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``6(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpFunc{``5,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``5(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``4(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``3(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``2(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="M:Alea.CUDA.WorkerExtension.Launch``1(Alea.CUDA.Worker,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}})">
<summary>
 Extension method for `Worker` type, given a quotation of a F# function,
 then returns a kernel launching function.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.WorkerExtension">
<summary>
 Provides extension methods for loading and launching kernels directly.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.WorkerExtensionForUsageByTemplate">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.WorkerKernelEntry">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.__local__.Variable``1(``0)">
<summary>
 Define a variable of type `&apos;T` on the stack, initialized to the specified value. Returns an F# `Ref&lt;&apos;T&gt;` object
 to represent the variable pointer.
</summary>
</member>
<member name="M:Alea.CUDA.__local__.Variable``1">
<summary>
 Define a variable of type `&apos;T` on the stack and return an F# `Ref&lt;&apos;T&gt;` object to represent
 the variable pointer.
</summary>
</member>
<member name="M:Alea.CUDA.__local__.Array2D``1(System.Int32,System.Int32)">
<summary>
 Define a 2D array of type `&apos;T` on the stack. `rows` and `cols` must be kernel compile time 
 constants.  The underlying storage order is row major.
</summary>
</member>
<member name="M:Alea.CUDA.__local__.Array``1(System.Int32,System.Int32)">
<summary>
 Define an array of type `&apos;T` on the stack having the specified alignment. `length` and `alignment`
 must be kernel compile time constants.
</summary>
</member>
<member name="M:Alea.CUDA.__local__.Array``1(System.Int32)">
<summary>
 Define an array of type `&apos;T` on the stack. `length` must be a kernel compile time constant.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.__local__">
<summary>
 Local memory manager.
</summary>
</member>
<member name="M:Alea.CUDA.__shared__.Variable``1(``0)">
<summary>
 Define a variable of type `&apos;T` in shared memory initialized to the specified value and return an F# `Ref&lt;&apos;T&gt;` object
 to represent the variable pointer.
</summary>
</member>
<member name="M:Alea.CUDA.__shared__.Variable``1">
<summary>
 Define a variable of type `&apos;T` in shared memory and returns an F# `Ref&lt;&apos;T&gt;` object to represent
 the variable pointer.
</summary>
</member>
<member name="M:Alea.CUDA.__shared__.ExternArray``1(System.Int32)">
<summary>
 Declare an array in extern shared memory having the specified alignment. The size of extern shared memory is specified 
 with the third parameter of the LaunchParam constructor and dynamically allocated when launching the kernel.
 For example: let lp = LaunchParam(numBlocks, numThreads, numThreads * __sizeof&lt;&apos;T&gt;())
</summary>
</member>
<member name="M:Alea.CUDA.__shared__.ExternArray``1">
<summary>
 Declare an array in extern shared memory. The size of extern shared memory is specified 
 with the third parameter of the LaunchParam constructor and dynamically allocated when launching the kernel.
 For example: let lp = LaunchParam(numBlocks, numThreads, numThreads * __sizeof&lt;&apos;T&gt;())
</summary>
</member>
<member name="M:Alea.CUDA.__shared__.Array2D``1(System.Int32,System.Int32)">
<summary>
 Define a 2D array of type `&apos;T` in shared memory. `rows` and `cols` must be kernel compile time 
 constants.  The underlying storage order is row major.
</summary>
</member>
<member name="M:Alea.CUDA.__shared__.Array``1(System.Int32,System.Int32)">
<summary>
 Define an array of type `&apos;T` in shared memory having the specified alignment. `length` and `alignment`
 must be kernel compile time constants.
</summary>
</member>
<member name="M:Alea.CUDA.__shared__.Array``1(System.Int32)">
<summary>
 Define an array of type `&apos;T` in shared memory. `length` must be a kernel compile time constant.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.__shared__">
<summary>
 Shared memory manager.
</summary>
</member>
<member name="P:Alea.CUDA.blockDim.z">
<summary>
 Gets the `z` dimension of block.
</summary>
</member>
<member name="P:Alea.CUDA.blockDim.y">
<summary>
 Gets the `y` dimension of block.
</summary>
</member>
<member name="P:Alea.CUDA.blockDim.x">
<summary>
 Gets the `x` dimension of block.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.blockDim">
<summary>
 Built-in property of block dimension. Can only be called from within a kernel.
</summary>
</member>
<member name="P:Alea.CUDA.blockIdx.z">
<summary>
 Gets the `z` index of current block.
</summary>
</member>
<member name="P:Alea.CUDA.blockIdx.y">
<summary>
 Gets the `y` index of current block.
</summary>
</member>
<member name="P:Alea.CUDA.blockIdx.x">
<summary>
 Gets the `x` index of current block.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.blockIdx">
<summary>
 Built-in property of block index. Can only be called from within a kernel.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.char1">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.char2">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.char3">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.char4">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.deviceptr`1.Item(System.Int32,`0)">
<summary>
 Set pointee value by advancing pointer by `idx` elements.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.op_Subtraction(Alea.CUDA.deviceptr{`0},Alea.CUDA.deviceptr{`0})">
<summary>
 Returns the difference between two pointers.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.op_Subtraction(Alea.CUDA.deviceptr{`0},System.Int32)">
<summary>
 Decrease pointer index by `idx` elements.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.op_Addition(Alea.CUDA.deviceptr{`0},System.Int32)">
<summary>
 Advance pointer by `idx` elements.
</summary>
</member>
<member name="P:Alea.CUDA.deviceptr`1.Item(System.Int32)">
<summary>
 Get pointee value by advancing pointer by `idx` elements.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.deviceptr`1.Handle">
<summary>
 The integer value of this pointer. It is of type `nativeint`.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.VolatileSet(`0)">
<summary>
 Sets data by turning this pointer into a volatile pointer.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.VolatileSet(System.Int32,`0)">
<summary>
 Sets data by turning this pointer into a volatile pointer.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.VolatileLongSet(System.Int64,`0)">
<summary>
 Sets data by turning this pointer into a volatile pointer.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.VolatileLongGet(System.Int64)">
<summary>
 Gets data by turning this pointer into a volatile pointer.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.VolatileGet">
<summary>
 Gets data by turning this pointer into a volatile pointer.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.VolatileGet(System.Int32)">
<summary>
 Gets data by turning this pointer into a volatile pointer.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.Volatile">
<summary>
 Returns a new pointer with same value but qualified as volatile pointer.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.deviceptr`1.Set(System.Int32,`0)">
<summary>
 Set pointee value by advancing pointer by `idx` elements.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.Reinterpret``1">
<summary>
 Reinterpret pointer to another element of type `&apos;U`.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.Ref(System.Int32)">
<summary>
 Gets an F# `Ref&lt;&apos;T&gt;` object by advancing pointer by `idx` elements.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.Ptr(System.Int32)">
<summary>
 Advances pointer by `idx` elements.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.deviceptr`1.LongSet(System.Int64,`0)">
<summary>
 Set pointee value by advancing pointer by `idx` elements.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.LongRef(System.Int64)">
<summary>
 Gets an F# `Ref&lt;&apos;T&gt;` object by advancing pointer by `idx` elements.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.LongPtr(System.Int64)">
<summary>
 Advances pointer by `idx` elements.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.LongGet(System.Int64)">
<summary>
 Get pointee value by advancing pointer by `idx` elements.
</summary>
</member>
<member name="M:Alea.CUDA.deviceptr`1.Get(System.Int32)">
<summary>
 Get pointee value by advancing pointer by `idx` elements.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.deviceptr`1">
<summary>
 Represents a device pointer of type `&apos;T`.
</summary>
</member>
<member name="F:Alea.CUDA.dim3.z">
<summary>
 Dimension `z`.
</summary>
</member>
<member name="F:Alea.CUDA.dim3.y">
<summary>
 Dimension `y`.
</summary>
</member>
<member name="F:Alea.CUDA.dim3.x">
<summary>
 Dimension `x`.
</summary>
</member>
<member name="P:Alea.CUDA.dim3.Size">
<summary>
 A host function for the size of this `dim3` object, given by `x * y * z`.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.dim3.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
 Build `dim3(x, y, z)`.
</summary>
</member>
<member name="M:Alea.CUDA.dim3.#ctor(System.Int32,System.Int32)">
<summary>
 Build `dim3(x, y, 1)`.
</summary>
</member>
<member name="M:Alea.CUDA.dim3.#ctor(System.Int32)">
<summary>
 Build `dim3(x, 1, 1)`.
</summary>
</member>
<member name="T:Alea.CUDA.dim3">
<summary>
 A triple integer struct used to represent a three-dimensional size, such as `blockDim` and `gridDim`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.double1">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.double2">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.float1">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.float2">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.float3">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.float4">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="P:Alea.CUDA.gridDim.z">
<summary>
 Gets the `z` dimension of grid.
</summary>
</member>
<member name="P:Alea.CUDA.gridDim.y">
<summary>
 Gets the `y` dimension of grid.
</summary>
</member>
<member name="P:Alea.CUDA.gridDim.x">
<summary>
 Gets the `x` dimension of grid.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.gridDim">
<summary>
 Built-in property of grid dimension. Can only be called from within a kernel.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.int1">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.int2">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.int3">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.int4">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.long1">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.long2">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.short1">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.short2">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.short3">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.short4">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="P:Alea.CUDA.threadIdx.z">
<summary>
 Gets the `z` index of current thread.
</summary>
</member>
<member name="P:Alea.CUDA.threadIdx.y">
<summary>
 Gets the `y` index of current thread.
</summary>
</member>
<member name="P:Alea.CUDA.threadIdx.x">
<summary>
 Gets the `x` index of current thread.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.threadIdx">
<summary>
 Built-in property of thread index. Can only be called from within a kernel.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.uchar1">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.uchar2">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.uchar3">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.uchar4">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.uint1">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.uint2">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.uint3">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.uint4">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.ulong1">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.ulong2">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.ushort1">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.ushort2">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.ushort3">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.ushort4">
<summary>
 Built-in vector struct with special alignment. 
 For more details, please reference [NVIDIA document](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.volatile_deviceptr`1.op_Subtraction(Alea.CUDA.volatile_deviceptr{`0},Alea.CUDA.volatile_deviceptr{`0})">
<summary>
 Returns the difference between two pointers.
</summary>
</member>
<member name="M:Alea.CUDA.volatile_deviceptr`1.op_Subtraction(Alea.CUDA.volatile_deviceptr{`0},System.Int32)">
<summary>
 Decrease pointer index by `idx` elements.
</summary>
</member>
<member name="M:Alea.CUDA.volatile_deviceptr`1.op_Addition(Alea.CUDA.volatile_deviceptr{`0},System.Int32)">
<summary>
 Advance pointer by `idx` elements.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.volatile_deviceptr`1.Reinterpret``1">
<summary>
 Reinterpret pointer to another element of type `&apos;U`.
</summary>
</member>
<member name="M:Alea.CUDA.volatile_deviceptr`1.Ptr(System.Int32)">
<summary>
 Advance pointer by `idx` elements.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.volatile_deviceptr`1">
<summary>
 Represents a volatile device pointer of type `&apos;T`.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CompileErrorException">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.AOTCompileUtil">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Builders">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUd3d11DeviceList">
<summary>
 P/Invoke alias type `CUd3d11DeviceList_enum -&gt; CUd3d11DeviceList`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUd3d11DeviceList_enum">
<summary>
 P/Invoke enum type `CUd3d11DeviceList_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUD3D10map_flags">
<summary>
 P/Invoke alias type `CUD3D10map_flags_enum -&gt; CUD3D10map_flags`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUD3D10map_flags_enum">
<summary>
 P/Invoke enum type `CUD3D10map_flags_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUD3D10register_flags">
<summary>
 P/Invoke alias type `CUD3D10register_flags_enum -&gt; CUD3D10register_flags`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUD3D10register_flags_enum">
<summary>
 P/Invoke enum type `CUD3D10register_flags_enum` (2 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUd3d10DeviceList">
<summary>
 P/Invoke alias type `CUd3d10DeviceList_enum -&gt; CUd3d10DeviceList`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUd3d10DeviceList_enum">
<summary>
 P/Invoke enum type `CUd3d10DeviceList_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUd3d9map_flags">
<summary>
 P/Invoke alias type `CUd3d9map_flags_enum -&gt; CUd3d9map_flags`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUd3d9map_flags_enum">
<summary>
 P/Invoke enum type `CUd3d9map_flags_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUd3d9register_flags">
<summary>
 P/Invoke alias type `CUd3d9register_flags_enum -&gt; CUd3d9register_flags`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUd3d9register_flags_enum">
<summary>
 P/Invoke enum type `CUd3d9register_flags_enum` (2 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUd3d9DeviceList">
<summary>
 P/Invoke alias type `CUd3d9DeviceList_enum -&gt; CUd3d9DeviceList`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUd3d9DeviceList_enum">
<summary>
 P/Invoke enum type `CUd3d9DeviceList_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUGLmap_flags">
<summary>
 P/Invoke alias type `CUGLmap_flags_enum -&gt; CUGLmap_flags`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUGLmap_flags_enum">
<summary>
 P/Invoke enum type `CUGLmap_flags_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUGLDeviceList">
<summary>
 P/Invoke alias type `CUGLDeviceList_enum -&gt; CUGLDeviceList`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUGLDeviceList_enum">
<summary>
 P/Invoke enum type `CUGLDeviceList_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.HGPUNV">
<summary>
 P/Invoke alias type `nativeint -&gt; HGPUNV`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.GLuint">
<summary>
 P/Invoke alias type `uint32 -&gt; GLuint`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.GLenum">
<summary>
 P/Invoke alias type `int -&gt; GLenum`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUoutput_mode">
<summary>
 P/Invoke alias type `CUoutput_mode_enum -&gt; CUoutput_mode`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUoutput_mode_enum">
<summary>
 P/Invoke enum type `CUoutput_mode_enum` (2 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_POINTER_ATTRIBUTE_P2P_TOKENS">
<summary>
 P/Invoke alias type `CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st -&gt; CUDA_POINTER_ATTRIBUTE_P2P_TOKENS`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st">
<summary>
 P/Invoke struct type `CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_RESOURCE_VIEW_DESC">
<summary>
 P/Invoke alias type `CUDA_RESOURCE_VIEW_DESC_st -&gt; CUDA_RESOURCE_VIEW_DESC`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_RESOURCE_VIEW_DESC_st">
<summary>
 P/Invoke struct type `CUDA_RESOURCE_VIEW_DESC_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUresourceViewFormat">
<summary>
 P/Invoke alias type `CUresourceViewFormat_enum -&gt; CUresourceViewFormat`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUresourceViewFormat_enum">
<summary>
 P/Invoke enum type `CUresourceViewFormat_enum` (35 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_TEXTURE_DESC">
<summary>
 P/Invoke alias type `CUDA_TEXTURE_DESC_st -&gt; CUDA_TEXTURE_DESC`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_TEXTURE_DESC_st">
<summary>
 P/Invoke struct type `CUDA_TEXTURE_DESC_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_ARRAY3D_DESCRIPTOR">
<summary>
 P/Invoke alias type `CUDA_ARRAY3D_DESCRIPTOR_st -&gt; CUDA_ARRAY3D_DESCRIPTOR`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_ARRAY3D_DESCRIPTOR_st">
<summary>
 P/Invoke struct type `CUDA_ARRAY3D_DESCRIPTOR_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_ARRAY_DESCRIPTOR">
<summary>
 P/Invoke alias type `CUDA_ARRAY_DESCRIPTOR_st -&gt; CUDA_ARRAY_DESCRIPTOR`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_ARRAY_DESCRIPTOR_st">
<summary>
 P/Invoke struct type `CUDA_ARRAY_DESCRIPTOR_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_MEMCPY3D_PEER">
<summary>
 P/Invoke alias type `CUDA_MEMCPY3D_PEER_st -&gt; CUDA_MEMCPY3D_PEER`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_MEMCPY3D_PEER_st">
<summary>
 P/Invoke struct type `CUDA_MEMCPY3D_PEER_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_MEMCPY3D">
<summary>
 P/Invoke alias type `CUDA_MEMCPY3D_st -&gt; CUDA_MEMCPY3D`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_MEMCPY3D_st">
<summary>
 P/Invoke struct type `CUDA_MEMCPY3D_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_MEMCPY2D">
<summary>
 P/Invoke alias type `CUDA_MEMCPY2D_st -&gt; CUDA_MEMCPY2D`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDA_MEMCPY2D_st">
<summary>
 P/Invoke struct type `CUDA_MEMCPY2D_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUresult">
<summary>
 P/Invoke alias type `cudaError_enum -&gt; CUresult`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.cudaError_enum">
<summary>
 P/Invoke enum type `cudaError_enum` (58 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUresourcetype">
<summary>
 P/Invoke alias type `CUresourcetype_enum -&gt; CUresourcetype`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUresourcetype_enum">
<summary>
 P/Invoke enum type `CUresourcetype_enum` (4 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUlimit">
<summary>
 P/Invoke alias type `CUlimit_enum -&gt; CUlimit`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUlimit_enum">
<summary>
 P/Invoke enum type `CUlimit_enum` (6 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUarray_cubemap_face">
<summary>
 P/Invoke alias type `CUarray_cubemap_face_enum -&gt; CUarray_cubemap_face`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUarray_cubemap_face_enum">
<summary>
 P/Invoke enum type `CUarray_cubemap_face_enum` (6 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUgraphicsMapResourceFlags">
<summary>
 P/Invoke alias type `CUgraphicsMapResourceFlags_enum -&gt; CUgraphicsMapResourceFlags`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUgraphicsMapResourceFlags_enum">
<summary>
 P/Invoke enum type `CUgraphicsMapResourceFlags_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUgraphicsRegisterFlags">
<summary>
 P/Invoke alias type `CUgraphicsRegisterFlags_enum -&gt; CUgraphicsRegisterFlags`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUgraphicsRegisterFlags_enum">
<summary>
 P/Invoke enum type `CUgraphicsRegisterFlags_enum` (5 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUlinkState">
<summary>
 P/Invoke alias type `nativeint -&gt; CUlinkState`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUjitInputType">
<summary>
 P/Invoke alias type `CUjitInputType_enum -&gt; CUjitInputType`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUjitInputType_enum">
<summary>
 P/Invoke enum type `CUjitInputType_enum` (6 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUjit_cacheMode">
<summary>
 P/Invoke alias type `CUjit_cacheMode_enum -&gt; CUjit_cacheMode`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUjit_cacheMode_enum">
<summary>
 P/Invoke enum type `CUjit_cacheMode_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUjit_fallback">
<summary>
 P/Invoke alias type `CUjit_fallback_enum -&gt; CUjit_fallback`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUjit_fallback_enum">
<summary>
 P/Invoke enum type `CUjit_fallback_enum` (2 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUjit_target">
<summary>
 P/Invoke alias type `CUjit_target_enum -&gt; CUjit_target`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUjit_target_enum">
<summary>
 P/Invoke enum type `CUjit_target_enum` (11 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUjit_option">
<summary>
 P/Invoke alias type `CUjit_option_enum -&gt; CUjit_option`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUjit_option_enum">
<summary>
 P/Invoke enum type `CUjit_option_enum` (16 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUcomputemode">
<summary>
 P/Invoke alias type `CUcomputemode_enum -&gt; CUcomputemode`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUcomputemode_enum">
<summary>
 P/Invoke enum type `CUcomputemode_enum` (4 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUmemorytype">
<summary>
 P/Invoke alias type `CUmemorytype_enum -&gt; CUmemorytype`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUmemorytype_enum">
<summary>
 P/Invoke enum type `CUmemorytype_enum` (4 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUsharedconfig">
<summary>
 P/Invoke alias type `CUsharedconfig_enum -&gt; CUsharedconfig`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUsharedconfig_enum">
<summary>
 P/Invoke enum type `CUsharedconfig_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUfunc_cache">
<summary>
 P/Invoke alias type `CUfunc_cache_enum -&gt; CUfunc_cache`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUfunc_cache_enum">
<summary>
 P/Invoke enum type `CUfunc_cache_enum` (4 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUfunction_attribute">
<summary>
 P/Invoke alias type `CUfunction_attribute_enum -&gt; CUfunction_attribute`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUfunction_attribute_enum">
<summary>
 P/Invoke enum type `CUfunction_attribute_enum` (9 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUpointer_attribute">
<summary>
 P/Invoke alias type `CUpointer_attribute_enum -&gt; CUpointer_attribute`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUpointer_attribute_enum">
<summary>
 P/Invoke enum type `CUpointer_attribute_enum` (8 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUdevprop">
<summary>
 P/Invoke alias type `CUdevprop_st -&gt; CUdevprop`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUdevprop_st">
<summary>
 P/Invoke struct type `CUdevprop_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUdevice_attribute">
<summary>
 P/Invoke alias type `CUdevice_attribute_enum -&gt; CUdevice_attribute`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUdevice_attribute_enum">
<summary>
 P/Invoke enum type `CUdevice_attribute_enum` (91 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUfilter_mode">
<summary>
 P/Invoke alias type `CUfilter_mode_enum -&gt; CUfilter_mode`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUfilter_mode_enum">
<summary>
 P/Invoke enum type `CUfilter_mode_enum` (2 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUaddress_mode">
<summary>
 P/Invoke alias type `CUaddress_mode_enum -&gt; CUaddress_mode`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUaddress_mode_enum">
<summary>
 P/Invoke enum type `CUaddress_mode_enum` (4 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUarray_format">
<summary>
 P/Invoke alias type `CUarray_format_enum -&gt; CUarray_format`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUarray_format_enum">
<summary>
 P/Invoke enum type `CUarray_format_enum` (8 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUevent_flags">
<summary>
 P/Invoke alias type `CUevent_flags_enum -&gt; CUevent_flags`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUevent_flags_enum">
<summary>
 P/Invoke enum type `CUevent_flags_enum` (4 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUstream_flags">
<summary>
 P/Invoke alias type `CUstream_flags_enum -&gt; CUstream_flags`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUstream_flags_enum">
<summary>
 P/Invoke enum type `CUstream_flags_enum` (2 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUctx_flags">
<summary>
 P/Invoke alias type `CUctx_flags_enum -&gt; CUctx_flags`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUctx_flags_enum">
<summary>
 P/Invoke enum type `CUctx_flags_enum` (9 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUmemAttach_flags">
<summary>
 P/Invoke alias type `CUmemAttach_flags_enum -&gt; CUmemAttach_flags`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUmemAttach_flags_enum">
<summary>
 P/Invoke enum type `CUmemAttach_flags_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUipcMem_flags">
<summary>
 P/Invoke alias type `CUipcMem_flags_enum -&gt; CUipcMem_flags`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUipcMem_flags_enum">
<summary>
 P/Invoke enum type `CUipcMem_flags_enum` (1 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUipcMemHandle">
<summary>
 P/Invoke alias type `CUipcMemHandle_st -&gt; CUipcMemHandle`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUipcMemHandle_st">
<summary>
 P/Invoke struct type `CUipcMemHandle_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUipcEventHandle">
<summary>
 P/Invoke alias type `CUipcEventHandle_st -&gt; CUipcEventHandle`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUipcEventHandle_st">
<summary>
 P/Invoke struct type `CUipcEventHandle_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUuuid">
<summary>
 P/Invoke alias type `CUuuid_st -&gt; CUuuid`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUuuid_st">
<summary>
 P/Invoke struct type `CUuuid_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUsurfObject">
<summary>
 P/Invoke alias type `uint64 -&gt; CUsurfObject`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUtexObject">
<summary>
 P/Invoke alias type `uint64 -&gt; CUtexObject`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUgraphicsResource">
<summary>
 P/Invoke alias type `nativeint -&gt; CUgraphicsResource`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUstream">
<summary>
 P/Invoke alias type `nativeint -&gt; CUstream`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUevent">
<summary>
 P/Invoke alias type `nativeint -&gt; CUevent`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUsurfref">
<summary>
 P/Invoke alias type `nativeint -&gt; CUsurfref`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUtexref">
<summary>
 P/Invoke alias type `nativeint -&gt; CUtexref`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUmipmappedArray">
<summary>
 P/Invoke alias type `nativeint -&gt; CUmipmappedArray`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUarray">
<summary>
 P/Invoke alias type `nativeint -&gt; CUarray`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUfunction">
<summary>
 P/Invoke alias type `nativeint -&gt; CUfunction`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUmodule">
<summary>
 P/Invoke alias type `nativeint -&gt; CUmodule`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUcontext">
<summary>
 P/Invoke alias type `nativeint -&gt; CUcontext`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUdevice">
<summary>
 P/Invoke alias type `int -&gt; CUdevice`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.CUdeviceptr">
<summary>
 P/Invoke alias type `nativeint -&gt; CUdeviceptr`.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop.size_t">
<summary>
 P/Invoke alias type `nativeint -&gt; size_t`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.initCUDA">
<summary>
 A lazy value of init CUDA environment.
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuSafeCall(Alea.CUDA.CUDAInterop.cudaError_enum)">
<summary>
 Throws an exception when the result is not successful.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D11GetDirect3DDevice(System.IntPtr*)">
<summary>
 P/Invoke function for `cuD3D11GetDirect3DDevice@cuD3D11GetDirect3DDevice`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D11GetDirect3DDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D11CtxCreateOnDevice(System.IntPtr*,System.UInt32,System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `cuD3D11CtxCreateOnDevice@cuD3D11CtxCreateOnDevice`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D11CtxCreateOnDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D11CtxCreate(System.IntPtr*,System.Int32*,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D11CtxCreate@cuD3D11CtxCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D11CtxCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGraphicsD3D11RegisterResource(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuGraphicsD3D11RegisterResource@cuGraphicsD3D11RegisterResource`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGraphicsD3D11RegisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D11GetDevices(System.UInt32*,System.Int32*,System.UInt32,System.IntPtr,Alea.CUDA.CUDAInterop.CUd3d11DeviceList_enum)">
<summary>
 P/Invoke function for `cuD3D11GetDevices@cuD3D11GetDevices`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D11GetDevices'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D11GetDevice(System.Int32*,System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D11GetDevice@cuD3D11GetDevice`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D11GetDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10ResourceGetSurfaceDimensions(System.IntPtr*,System.IntPtr*,System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D10ResourceGetSurfaceDimensions@cuD3D10ResourceGetSurfaceDimensions_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10ResourceGetSurfaceDimensions'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10ResourceGetMappedPitch(System.IntPtr*,System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D10ResourceGetMappedPitch@cuD3D10ResourceGetMappedPitch_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10ResourceGetMappedPitch'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10ResourceGetMappedSize(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D10ResourceGetMappedSize@cuD3D10ResourceGetMappedSize_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10ResourceGetMappedSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10ResourceGetMappedPointer(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D10ResourceGetMappedPointer@cuD3D10ResourceGetMappedPointer_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10ResourceGetMappedPointer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10ResourceGetMappedArray(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D10ResourceGetMappedArray@cuD3D10ResourceGetMappedArray`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10ResourceGetMappedArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10ResourceSetMapFlags(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D10ResourceSetMapFlags@cuD3D10ResourceSetMapFlags`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10ResourceSetMapFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10UnmapResources(System.UInt32,System.IntPtr*)">
<summary>
 P/Invoke function for `cuD3D10UnmapResources@cuD3D10UnmapResources`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10UnmapResources'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10MapResources(System.UInt32,System.IntPtr*)">
<summary>
 P/Invoke function for `cuD3D10MapResources@cuD3D10MapResources`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10MapResources'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10UnregisterResource(System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D10UnregisterResource@cuD3D10UnregisterResource`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10UnregisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10RegisterResource(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D10RegisterResource@cuD3D10RegisterResource`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10RegisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10GetDirect3DDevice(System.IntPtr*)">
<summary>
 P/Invoke function for `cuD3D10GetDirect3DDevice@cuD3D10GetDirect3DDevice`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10GetDirect3DDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10CtxCreateOnDevice(System.IntPtr*,System.UInt32,System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `cuD3D10CtxCreateOnDevice@cuD3D10CtxCreateOnDevice`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10CtxCreateOnDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10CtxCreate(System.IntPtr*,System.Int32*,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D10CtxCreate@cuD3D10CtxCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10CtxCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGraphicsD3D10RegisterResource(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuGraphicsD3D10RegisterResource@cuGraphicsD3D10RegisterResource`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGraphicsD3D10RegisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10GetDevices(System.UInt32*,System.Int32*,System.UInt32,System.IntPtr,Alea.CUDA.CUDAInterop.CUd3d10DeviceList_enum)">
<summary>
 P/Invoke function for `cuD3D10GetDevices@cuD3D10GetDevices`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10GetDevices'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D10GetDevice(System.Int32*,System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D10GetDevice@cuD3D10GetDevice`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D10GetDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9UnregisterVertexBuffer(System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D9UnregisterVertexBuffer@cuD3D9UnregisterVertexBuffer`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9UnregisterVertexBuffer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9UnmapVertexBuffer(System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D9UnmapVertexBuffer@cuD3D9UnmapVertexBuffer`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9UnmapVertexBuffer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9MapVertexBuffer(System.IntPtr*,System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D9MapVertexBuffer@cuD3D9MapVertexBuffer_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9MapVertexBuffer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9RegisterVertexBuffer(System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D9RegisterVertexBuffer@cuD3D9RegisterVertexBuffer`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9RegisterVertexBuffer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9End">
<summary>
 P/Invoke function for `cuD3D9End@cuD3D9End`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9End'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9Begin(System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D9Begin@cuD3D9Begin`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9Begin'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9ResourceGetMappedPitch(System.IntPtr*,System.IntPtr*,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D9ResourceGetMappedPitch@cuD3D9ResourceGetMappedPitch_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9ResourceGetMappedPitch'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9ResourceGetMappedSize(System.IntPtr*,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D9ResourceGetMappedSize@cuD3D9ResourceGetMappedSize_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9ResourceGetMappedSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9ResourceGetMappedPointer(System.IntPtr*,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D9ResourceGetMappedPointer@cuD3D9ResourceGetMappedPointer_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9ResourceGetMappedPointer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9ResourceGetMappedArray(System.IntPtr*,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D9ResourceGetMappedArray@cuD3D9ResourceGetMappedArray`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9ResourceGetMappedArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9ResourceGetSurfaceDimensions(System.IntPtr*,System.IntPtr*,System.IntPtr*,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D9ResourceGetSurfaceDimensions@cuD3D9ResourceGetSurfaceDimensions_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9ResourceGetSurfaceDimensions'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9ResourceSetMapFlags(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D9ResourceSetMapFlags@cuD3D9ResourceSetMapFlags`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9ResourceSetMapFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9UnmapResources(System.UInt32,System.IntPtr*)">
<summary>
 P/Invoke function for `cuD3D9UnmapResources@cuD3D9UnmapResources`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9UnmapResources'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9MapResources(System.UInt32,System.IntPtr*)">
<summary>
 P/Invoke function for `cuD3D9MapResources@cuD3D9MapResources`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9MapResources'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9UnregisterResource(System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D9UnregisterResource@cuD3D9UnregisterResource`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9UnregisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9RegisterResource(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D9RegisterResource@cuD3D9RegisterResource`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9RegisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGraphicsD3D9RegisterResource(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuGraphicsD3D9RegisterResource@cuGraphicsD3D9RegisterResource`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGraphicsD3D9RegisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9GetDirect3DDevice(System.IntPtr*)">
<summary>
 P/Invoke function for `cuD3D9GetDirect3DDevice@cuD3D9GetDirect3DDevice`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9GetDirect3DDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9CtxCreateOnDevice(System.IntPtr*,System.UInt32,System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `cuD3D9CtxCreateOnDevice@cuD3D9CtxCreateOnDevice`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9CtxCreateOnDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9CtxCreate(System.IntPtr*,System.Int32*,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D9CtxCreate@cuD3D9CtxCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9CtxCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9GetDevices(System.UInt32*,System.Int32*,System.UInt32,System.IntPtr,Alea.CUDA.CUDAInterop.CUd3d9DeviceList_enum)">
<summary>
 P/Invoke function for `cuD3D9GetDevices@cuD3D9GetDevices`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9GetDevices'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuD3D9GetDevice(System.Int32*,System.String)">
<summary>
 P/Invoke function for `cuD3D9GetDevice@cuD3D9GetDevice`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuD3D9GetDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGLUnmapBufferObjectAsync(System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `cuGLUnmapBufferObjectAsync@cuGLUnmapBufferObjectAsync`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGLUnmapBufferObjectAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGLMapBufferObjectAsync(System.IntPtr*,System.IntPtr*,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `cuGLMapBufferObjectAsync@cuGLMapBufferObjectAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGLMapBufferObjectAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGLSetBufferObjectMapFlags(System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuGLSetBufferObjectMapFlags@cuGLSetBufferObjectMapFlags`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGLSetBufferObjectMapFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGLUnregisterBufferObject(System.UInt32)">
<summary>
 P/Invoke function for `cuGLUnregisterBufferObject@cuGLUnregisterBufferObject`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGLUnregisterBufferObject'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGLUnmapBufferObject(System.UInt32)">
<summary>
 P/Invoke function for `cuGLUnmapBufferObject@cuGLUnmapBufferObject`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGLUnmapBufferObject'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGLMapBufferObject(System.IntPtr*,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `cuGLMapBufferObject@cuGLMapBufferObject_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGLMapBufferObject'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGLRegisterBufferObject(System.UInt32)">
<summary>
 P/Invoke function for `cuGLRegisterBufferObject@cuGLRegisterBufferObject`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGLRegisterBufferObject'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGLInit">
<summary>
 P/Invoke function for `cuGLInit@cuGLInit`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGLInit'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGLCtxCreate(System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `cuGLCtxCreate@cuGLCtxCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGLCtxCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGLGetDevices(System.UInt32*,System.Int32*,System.UInt32,Alea.CUDA.CUDAInterop.CUGLDeviceList_enum)">
<summary>
 P/Invoke function for `cuGLGetDevices@cuGLGetDevices_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGLGetDevices'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuWGLGetDevice(System.Int32*,System.IntPtr)">
<summary>
 P/Invoke function for `cuWGLGetDevice@cuWGLGetDevice`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuWGLGetDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGraphicsGLRegisterImage(System.IntPtr*,System.UInt32,System.Int32,System.UInt32)">
<summary>
 P/Invoke function for `cuGraphicsGLRegisterImage@cuGraphicsGLRegisterImage`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGraphicsGLRegisterImage'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGraphicsGLRegisterBuffer(System.IntPtr*,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuGraphicsGLRegisterBuffer@cuGraphicsGLRegisterBuffer`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGraphicsGLRegisterBuffer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuProfilerStop">
<summary>
 P/Invoke function for `cuProfilerStop@cuProfilerStop`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuProfilerStop'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuProfilerStart">
<summary>
 P/Invoke function for `cuProfilerStart@cuProfilerStart`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuProfilerStart'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuProfilerInitialize(System.String,System.String,Alea.CUDA.CUDAInterop.CUoutput_mode_enum)">
<summary>
 P/Invoke function for `cuProfilerInitialize@cuProfilerInitialize`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuProfilerInitialize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGetExportTable(System.IntPtr*,Alea.CUDA.CUDAInterop.CUuuid_st*)">
<summary>
 P/Invoke function for `cuGetExportTable@cuGetExportTable`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGetExportTable'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGraphicsUnmapResources(System.UInt32,System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuGraphicsUnmapResources@cuGraphicsUnmapResources`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGraphicsUnmapResources'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGraphicsMapResources(System.UInt32,System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuGraphicsMapResources@cuGraphicsMapResources`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGraphicsMapResources'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGraphicsResourceSetMapFlags(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuGraphicsResourceSetMapFlags@cuGraphicsResourceSetMapFlags_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGraphicsResourceSetMapFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGraphicsResourceGetMappedPointer(System.IntPtr*,System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuGraphicsResourceGetMappedPointer@cuGraphicsResourceGetMappedPointer_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGraphicsResourceGetMappedPointer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGraphicsResourceGetMappedMipmappedArray(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuGraphicsResourceGetMappedMipmappedArray@cuGraphicsResourceGetMappedMipmappedArray`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGraphicsResourceGetMappedMipmappedArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGraphicsSubResourceGetMappedArray(System.IntPtr*,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuGraphicsSubResourceGetMappedArray@cuGraphicsSubResourceGetMappedArray`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGraphicsSubResourceGetMappedArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGraphicsUnregisterResource(System.IntPtr)">
<summary>
 P/Invoke function for `cuGraphicsUnregisterResource@cuGraphicsUnregisterResource`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGraphicsUnregisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxDisablePeerAccess(System.IntPtr)">
<summary>
 P/Invoke function for `cuCtxDisablePeerAccess@cuCtxDisablePeerAccess`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxDisablePeerAccess'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxEnablePeerAccess(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuCtxEnablePeerAccess@cuCtxEnablePeerAccess`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxEnablePeerAccess'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuDeviceCanAccessPeer(System.Int32*,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceCanAccessPeer@cuDeviceCanAccessPeer`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuDeviceCanAccessPeer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuSurfObjectDestroy(System.UInt64)">
<summary>
 P/Invoke function for `cuSurfObjectDestroy@cuSurfObjectDestroy`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuSurfObjectDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexObjectGetResourceViewDesc(Alea.CUDA.CUDAInterop.CUDA_RESOURCE_VIEW_DESC_st*,System.UInt64)">
<summary>
 P/Invoke function for `cuTexObjectGetResourceViewDesc@cuTexObjectGetResourceViewDesc`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexObjectGetResourceViewDesc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexObjectGetTextureDesc(Alea.CUDA.CUDAInterop.CUDA_TEXTURE_DESC_st*,System.UInt64)">
<summary>
 P/Invoke function for `cuTexObjectGetTextureDesc@cuTexObjectGetTextureDesc`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexObjectGetTextureDesc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexObjectDestroy(System.UInt64)">
<summary>
 P/Invoke function for `cuTexObjectDestroy@cuTexObjectDestroy`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexObjectDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuSurfRefGetArray(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuSurfRefGetArray@cuSurfRefGetArray`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuSurfRefGetArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuSurfRefSetArray(System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuSurfRefSetArray@cuSurfRefSetArray`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuSurfRefSetArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefDestroy@cuTexRefDestroy`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefCreate(System.IntPtr*)">
<summary>
 P/Invoke function for `cuTexRefCreate@cuTexRefCreate`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefGetFlags(System.UInt32*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetFlags@cuTexRefGetFlags`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefGetFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefGetMaxAnisotropy(System.Int32*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetMaxAnisotropy@cuTexRefGetMaxAnisotropy`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefGetMaxAnisotropy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefGetMipmapLevelClamp(System.Single*,System.Single*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetMipmapLevelClamp@cuTexRefGetMipmapLevelClamp`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefGetMipmapLevelClamp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefGetMipmapLevelBias(System.Single*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetMipmapLevelBias@cuTexRefGetMipmapLevelBias`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefGetMipmapLevelBias'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefGetMipmapFilterMode(Alea.CUDA.CUDAInterop.CUfilter_mode_enum*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetMipmapFilterMode@cuTexRefGetMipmapFilterMode`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefGetMipmapFilterMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefGetFormat(Alea.CUDA.CUDAInterop.CUarray_format_enum*,System.Int32*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetFormat@cuTexRefGetFormat`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefGetFormat'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefGetFilterMode(Alea.CUDA.CUDAInterop.CUfilter_mode_enum*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetFilterMode@cuTexRefGetFilterMode`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefGetFilterMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefGetAddressMode(Alea.CUDA.CUDAInterop.CUaddress_mode_enum*,System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `cuTexRefGetAddressMode@cuTexRefGetAddressMode`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefGetAddressMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefGetMipmappedArray(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetMipmappedArray@cuTexRefGetMipmappedArray`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefGetMipmappedArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefGetArray(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetArray@cuTexRefGetArray`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefGetArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefGetAddress(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetAddress@cuTexRefGetAddress_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefGetAddress'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefSetFlags(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuTexRefSetFlags@cuTexRefSetFlags`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefSetFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefSetMaxAnisotropy(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuTexRefSetMaxAnisotropy@cuTexRefSetMaxAnisotropy`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefSetMaxAnisotropy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefSetMipmapLevelClamp(System.IntPtr,System.Single,System.Single)">
<summary>
 P/Invoke function for `cuTexRefSetMipmapLevelClamp@cuTexRefSetMipmapLevelClamp`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefSetMipmapLevelClamp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefSetMipmapLevelBias(System.IntPtr,System.Single)">
<summary>
 P/Invoke function for `cuTexRefSetMipmapLevelBias@cuTexRefSetMipmapLevelBias`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefSetMipmapLevelBias'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefSetMipmapFilterMode(System.IntPtr,Alea.CUDA.CUDAInterop.CUfilter_mode_enum)">
<summary>
 P/Invoke function for `cuTexRefSetMipmapFilterMode@cuTexRefSetMipmapFilterMode`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefSetMipmapFilterMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefSetFilterMode(System.IntPtr,Alea.CUDA.CUDAInterop.CUfilter_mode_enum)">
<summary>
 P/Invoke function for `cuTexRefSetFilterMode@cuTexRefSetFilterMode`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefSetFilterMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefSetAddressMode(System.IntPtr,System.Int32,Alea.CUDA.CUDAInterop.CUaddress_mode_enum)">
<summary>
 P/Invoke function for `cuTexRefSetAddressMode@cuTexRefSetAddressMode`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefSetAddressMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefSetFormat(System.IntPtr,Alea.CUDA.CUDAInterop.CUarray_format_enum,System.Int32)">
<summary>
 P/Invoke function for `cuTexRefSetFormat@cuTexRefSetFormat`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefSetFormat'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefSetAddress2D(System.IntPtr,Alea.CUDA.CUDAInterop.CUDA_ARRAY_DESCRIPTOR_st*,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefSetAddress2D@cuTexRefSetAddress2D_v3`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefSetAddress2D'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefSetAddress(System.IntPtr*,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefSetAddress@cuTexRefSetAddress_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefSetAddress'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefSetMipmappedArray(System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuTexRefSetMipmappedArray@cuTexRefSetMipmappedArray`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefSetMipmappedArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuTexRefSetArray(System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuTexRefSetArray@cuTexRefSetArray`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuTexRefSetArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32*,System.IntPtr,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `cuOccupancyMaxActiveBlocksPerMultiprocessor@cuOccupancyMaxActiveBlocksPerMultiprocessor`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuOccupancyMaxActiveBlocksPerMultiprocessor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuParamSetTexRef(System.IntPtr,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `cuParamSetTexRef@cuParamSetTexRef`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuParamSetTexRef'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuLaunchGridAsync(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `cuLaunchGridAsync@cuLaunchGridAsync`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuLaunchGridAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuLaunchGrid(System.IntPtr,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cuLaunchGrid@cuLaunchGrid`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuLaunchGrid'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuLaunch(System.IntPtr)">
<summary>
 P/Invoke function for `cuLaunch@cuLaunch`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuLaunch'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuParamSetv(System.IntPtr,System.Int32,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuParamSetv@cuParamSetv`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuParamSetv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuParamSetf(System.IntPtr,System.Int32,System.Single)">
<summary>
 P/Invoke function for `cuParamSetf@cuParamSetf`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuParamSetf'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuParamSeti(System.IntPtr,System.Int32,System.UInt32)">
<summary>
 P/Invoke function for `cuParamSeti@cuParamSeti`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuParamSeti'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuParamSetSize(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuParamSetSize@cuParamSetSize`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuParamSetSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuFuncSetSharedSize(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuFuncSetSharedSize@cuFuncSetSharedSize`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuFuncSetSharedSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuFuncSetBlockShape(System.IntPtr,System.Int32,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cuFuncSetBlockShape@cuFuncSetBlockShape`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuFuncSetBlockShape'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuLaunchKernel(System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr*,System.IntPtr*)">
<summary>
 P/Invoke function for `cuLaunchKernel@cuLaunchKernel`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuLaunchKernel'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuFuncSetSharedMemConfig(System.IntPtr,Alea.CUDA.CUDAInterop.CUsharedconfig_enum)">
<summary>
 P/Invoke function for `cuFuncSetSharedMemConfig@cuFuncSetSharedMemConfig`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuFuncSetSharedMemConfig'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuFuncSetCacheConfig(System.IntPtr,Alea.CUDA.CUDAInterop.CUfunc_cache_enum)">
<summary>
 P/Invoke function for `cuFuncSetCacheConfig@cuFuncSetCacheConfig`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuFuncSetCacheConfig'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuFuncGetAttribute(System.Int32*,Alea.CUDA.CUDAInterop.CUfunction_attribute_enum,System.IntPtr)">
<summary>
 P/Invoke function for `cuFuncGetAttribute@cuFuncGetAttribute`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuFuncGetAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuEventElapsedTime(System.Single*,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuEventElapsedTime@cuEventElapsedTime`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuEventElapsedTime'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuEventDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cuEventDestroy@cuEventDestroy_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuEventDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuEventSynchronize(System.IntPtr)">
<summary>
 P/Invoke function for `cuEventSynchronize@cuEventSynchronize`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuEventSynchronize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuEventQuery(System.IntPtr)">
<summary>
 P/Invoke function for `cuEventQuery@cuEventQuery`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuEventQuery'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuEventRecord(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuEventRecord@cuEventRecord`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuEventRecord'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuEventCreate(System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `cuEventCreate@cuEventCreate`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuEventCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuStreamDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cuStreamDestroy@cuStreamDestroy_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuStreamDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuStreamSynchronize(System.IntPtr)">
<summary>
 P/Invoke function for `cuStreamSynchronize@cuStreamSynchronize`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuStreamSynchronize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuStreamQuery(System.IntPtr)">
<summary>
 P/Invoke function for `cuStreamQuery@cuStreamQuery`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuStreamQuery'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuStreamAttachMemAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuStreamAttachMemAsync@cuStreamAttachMemAsync`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuStreamAttachMemAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuStreamWaitEvent(System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuStreamWaitEvent@cuStreamWaitEvent`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuStreamWaitEvent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuStreamGetFlags(System.IntPtr,System.UInt32*)">
<summary>
 P/Invoke function for `cuStreamGetFlags@cuStreamGetFlags`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuStreamGetFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuStreamGetPriority(System.IntPtr,System.Int32*)">
<summary>
 P/Invoke function for `cuStreamGetPriority@cuStreamGetPriority`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuStreamGetPriority'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuStreamCreateWithPriority(System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `cuStreamCreateWithPriority@cuStreamCreateWithPriority`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuStreamCreateWithPriority'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuStreamCreate(System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `cuStreamCreate@cuStreamCreate`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuStreamCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuPointerSetAttribute(System.IntPtr,Alea.CUDA.CUDAInterop.CUpointer_attribute_enum,System.IntPtr)">
<summary>
 P/Invoke function for `cuPointerSetAttribute@cuPointerSetAttribute`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuPointerSetAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuPointerGetAttribute(System.IntPtr,Alea.CUDA.CUDAInterop.CUpointer_attribute_enum,System.IntPtr)">
<summary>
 P/Invoke function for `cuPointerGetAttribute@cuPointerGetAttribute`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuPointerGetAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMipmappedArrayDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cuMipmappedArrayDestroy@cuMipmappedArrayDestroy`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMipmappedArrayDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMipmappedArrayGetLevel(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuMipmappedArrayGetLevel@cuMipmappedArrayGetLevel`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMipmappedArrayGetLevel'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMipmappedArrayCreate(System.IntPtr*,Alea.CUDA.CUDAInterop.CUDA_ARRAY3D_DESCRIPTOR_st*,System.UInt32)">
<summary>
 P/Invoke function for `cuMipmappedArrayCreate@cuMipmappedArrayCreate`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMipmappedArrayCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuArray3DGetDescriptor(Alea.CUDA.CUDAInterop.CUDA_ARRAY3D_DESCRIPTOR_st*,System.IntPtr)">
<summary>
 P/Invoke function for `cuArray3DGetDescriptor@cuArray3DGetDescriptor_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuArray3DGetDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuArray3DCreate(System.IntPtr*,Alea.CUDA.CUDAInterop.CUDA_ARRAY3D_DESCRIPTOR_st*)">
<summary>
 P/Invoke function for `cuArray3DCreate@cuArray3DCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuArray3DCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuArrayDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cuArrayDestroy@cuArrayDestroy`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuArrayDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuArrayGetDescriptor(Alea.CUDA.CUDAInterop.CUDA_ARRAY_DESCRIPTOR_st*,System.IntPtr)">
<summary>
 P/Invoke function for `cuArrayGetDescriptor@cuArrayGetDescriptor_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuArrayGetDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuArrayCreate(System.IntPtr*,Alea.CUDA.CUDAInterop.CUDA_ARRAY_DESCRIPTOR_st*)">
<summary>
 P/Invoke function for `cuArrayCreate@cuArrayCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuArrayCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemsetD2D32Async(System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD2D32Async@cuMemsetD2D32Async`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemsetD2D32Async'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemsetD2D16Async(System.IntPtr,System.IntPtr,System.UInt16,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD2D16Async@cuMemsetD2D16Async`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemsetD2D16Async'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemsetD2D8Async(System.IntPtr,System.IntPtr,System.Byte,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD2D8Async@cuMemsetD2D8Async`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemsetD2D8Async'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemsetD32Async(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD32Async@cuMemsetD32Async`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemsetD32Async'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemsetD16Async(System.IntPtr,System.UInt16,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD16Async@cuMemsetD16Async`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemsetD16Async'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemsetD8Async(System.IntPtr,System.Byte,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD8Async@cuMemsetD8Async`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemsetD8Async'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemsetD2D32(System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD2D32@cuMemsetD2D32_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemsetD2D32'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemsetD2D16(System.IntPtr,System.IntPtr,System.UInt16,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD2D16@cuMemsetD2D16_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemsetD2D16'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemsetD2D8(System.IntPtr,System.IntPtr,System.Byte,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD2D8@cuMemsetD2D8_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemsetD2D8'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemsetD32(System.IntPtr,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD32@cuMemsetD32_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemsetD32'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemsetD16(System.IntPtr,System.UInt16,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD16@cuMemsetD16_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemsetD16'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemsetD8(System.IntPtr,System.Byte,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD8@cuMemsetD8_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemsetD8'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpy3DPeerAsync(Alea.CUDA.CUDAInterop.CUDA_MEMCPY3D_PEER_st*,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpy3DPeerAsync@cuMemcpy3DPeerAsync`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpy3DPeerAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpy3DAsync(Alea.CUDA.CUDAInterop.CUDA_MEMCPY3D_st*,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpy3DAsync@cuMemcpy3DAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpy3DAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpy2DAsync(Alea.CUDA.CUDAInterop.CUDA_MEMCPY2D_st*,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpy2DAsync@cuMemcpy2DAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpy2DAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyAtoHAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyAtoHAsync@cuMemcpyAtoHAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyAtoHAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyHtoAAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyHtoAAsync@cuMemcpyHtoAAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyHtoAAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyDtoDAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyDtoDAsync@cuMemcpyDtoDAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyDtoDAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyDtoHAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyDtoHAsync@cuMemcpyDtoHAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyDtoHAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyHtoDAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyHtoDAsync@cuMemcpyHtoDAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyHtoDAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyPeerAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyPeerAsync@cuMemcpyPeerAsync`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyPeerAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyAsync@cuMemcpyAsync`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpy3DPeer(Alea.CUDA.CUDAInterop.CUDA_MEMCPY3D_PEER_st*)">
<summary>
 P/Invoke function for `cuMemcpy3DPeer@cuMemcpy3DPeer`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpy3DPeer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpy3D(Alea.CUDA.CUDAInterop.CUDA_MEMCPY3D_st*)">
<summary>
 P/Invoke function for `cuMemcpy3D@cuMemcpy3D_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpy3D'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpy2DUnaligned(Alea.CUDA.CUDAInterop.CUDA_MEMCPY2D_st*)">
<summary>
 P/Invoke function for `cuMemcpy2DUnaligned@cuMemcpy2DUnaligned_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpy2DUnaligned'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpy2D(Alea.CUDA.CUDAInterop.CUDA_MEMCPY2D_st*)">
<summary>
 P/Invoke function for `cuMemcpy2D@cuMemcpy2D_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpy2D'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyAtoA(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyAtoA@cuMemcpyAtoA_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyAtoA'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyAtoH(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyAtoH@cuMemcpyAtoH_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyAtoH'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyHtoA(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyHtoA@cuMemcpyHtoA_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyHtoA'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyAtoD(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyAtoD@cuMemcpyAtoD_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyAtoD'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyDtoA(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyDtoA@cuMemcpyDtoA_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyDtoA'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyDtoD(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyDtoD@cuMemcpyDtoD_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyDtoD'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyDtoH(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyDtoH@cuMemcpyDtoH_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyDtoH'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyHtoD(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyHtoD@cuMemcpyHtoD_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyHtoD'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpyPeer(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyPeer@cuMemcpyPeer`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpyPeer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemcpy(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpy@cuMemcpy`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemcpy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemHostUnregister(System.IntPtr)">
<summary>
 P/Invoke function for `cuMemHostUnregister@cuMemHostUnregister`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemHostUnregister'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemHostRegister(System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuMemHostRegister@cuMemHostRegister_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemHostRegister'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuIpcCloseMemHandle(System.IntPtr)">
<summary>
 P/Invoke function for `cuIpcCloseMemHandle@cuIpcCloseMemHandle`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuIpcCloseMemHandle'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuIpcOpenMemHandle(System.IntPtr*,Alea.CUDA.CUDAInterop.CUipcMemHandle_st,System.UInt32)">
<summary>
 P/Invoke function for `cuIpcOpenMemHandle@cuIpcOpenMemHandle`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuIpcOpenMemHandle'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuIpcGetMemHandle(Alea.CUDA.CUDAInterop.CUipcMemHandle_st*,System.IntPtr)">
<summary>
 P/Invoke function for `cuIpcGetMemHandle@cuIpcGetMemHandle`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuIpcGetMemHandle'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuIpcOpenEventHandle(System.IntPtr*,Alea.CUDA.CUDAInterop.CUipcEventHandle_st)">
<summary>
 P/Invoke function for `cuIpcOpenEventHandle@cuIpcOpenEventHandle`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuIpcOpenEventHandle'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuIpcGetEventHandle(Alea.CUDA.CUDAInterop.CUipcEventHandle_st*,System.IntPtr)">
<summary>
 P/Invoke function for `cuIpcGetEventHandle@cuIpcGetEventHandle`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuIpcGetEventHandle'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuDeviceGetPCIBusId(System.Text.StringBuilder,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceGetPCIBusId@cuDeviceGetPCIBusId`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuDeviceGetPCIBusId'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuDeviceGetByPCIBusId(System.Int32*,System.String)">
<summary>
 P/Invoke function for `cuDeviceGetByPCIBusId@cuDeviceGetByPCIBusId`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuDeviceGetByPCIBusId'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemAllocManaged(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuMemAllocManaged@cuMemAllocManaged`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemAllocManaged'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemHostGetFlags(System.UInt32*,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemHostGetFlags@cuMemHostGetFlags`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemHostGetFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemHostGetDevicePointer(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuMemHostGetDevicePointer@cuMemHostGetDevicePointer_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemHostGetDevicePointer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemHostAlloc(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuMemHostAlloc@cuMemHostAlloc`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemHostAlloc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemFreeHost(System.IntPtr)">
<summary>
 P/Invoke function for `cuMemFreeHost@cuMemFreeHost`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemFreeHost'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemAllocHost(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemAllocHost@cuMemAllocHost_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemAllocHost'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemGetAddressRange(System.IntPtr*,System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemGetAddressRange@cuMemGetAddressRange_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemGetAddressRange'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemFree(System.IntPtr)">
<summary>
 P/Invoke function for `cuMemFree@cuMemFree_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemFree'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemAllocPitch(System.IntPtr*,System.IntPtr*,System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuMemAllocPitch@cuMemAllocPitch_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemAllocPitch'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemAlloc(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemAlloc@cuMemAlloc_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemAlloc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuMemGetInfo(System.IntPtr*,System.IntPtr*)">
<summary>
 P/Invoke function for `cuMemGetInfo@cuMemGetInfo_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuMemGetInfo'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuLinkDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cuLinkDestroy@cuLinkDestroy`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuLinkDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuLinkComplete(System.IntPtr,System.IntPtr*,System.IntPtr*)">
<summary>
 P/Invoke function for `cuLinkComplete@cuLinkComplete`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuLinkComplete'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuLinkAddFile(System.IntPtr,Alea.CUDA.CUDAInterop.CUjitInputType_enum,System.String,System.UInt32,Alea.CUDA.CUDAInterop.CUjit_option_enum*,System.IntPtr*)">
<summary>
 P/Invoke function for `cuLinkAddFile@cuLinkAddFile_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuLinkAddFile'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuLinkAddData(System.IntPtr,Alea.CUDA.CUDAInterop.CUjitInputType_enum,System.IntPtr,System.IntPtr,System.String,System.UInt32,Alea.CUDA.CUDAInterop.CUjit_option_enum*,System.IntPtr*)">
<summary>
 P/Invoke function for `cuLinkAddData@cuLinkAddData_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuLinkAddData'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuLinkCreate(System.UInt32,Alea.CUDA.CUDAInterop.CUjit_option_enum*,System.IntPtr*,System.IntPtr*)">
<summary>
 P/Invoke function for `cuLinkCreate@cuLinkCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuLinkCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuModuleGetSurfRef(System.IntPtr*,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `cuModuleGetSurfRef@cuModuleGetSurfRef`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuModuleGetSurfRef'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuModuleGetTexRef(System.IntPtr*,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `cuModuleGetTexRef@cuModuleGetTexRef`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuModuleGetTexRef'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuModuleGetGlobal(System.IntPtr*,System.IntPtr*,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `cuModuleGetGlobal@cuModuleGetGlobal_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuModuleGetGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuModuleGetFunction(System.IntPtr*,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `cuModuleGetFunction@cuModuleGetFunction`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuModuleGetFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuModuleUnload(System.IntPtr)">
<summary>
 P/Invoke function for `cuModuleUnload@cuModuleUnload`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuModuleUnload'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuModuleLoadFatBinary(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuModuleLoadFatBinary@cuModuleLoadFatBinary`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuModuleLoadFatBinary'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuModuleLoadDataEx(System.IntPtr*,System.IntPtr,System.UInt32,Alea.CUDA.CUDAInterop.CUjit_option_enum*,System.IntPtr*)">
<summary>
 P/Invoke function for `cuModuleLoadDataEx@cuModuleLoadDataEx`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuModuleLoadDataEx'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuModuleLoadData(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuModuleLoadData@cuModuleLoadData`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuModuleLoadData'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuModuleLoad(System.IntPtr*,System.String)">
<summary>
 P/Invoke function for `cuModuleLoad@cuModuleLoad`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuModuleLoad'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxDetach(System.IntPtr)">
<summary>
 P/Invoke function for `cuCtxDetach@cuCtxDetach`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxDetach'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxAttach(System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `cuCtxAttach@cuCtxAttach`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxAttach'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxGetStreamPriorityRange(System.Int32*,System.Int32*)">
<summary>
 P/Invoke function for `cuCtxGetStreamPriorityRange@cuCtxGetStreamPriorityRange`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxGetStreamPriorityRange'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxGetApiVersion(System.IntPtr,System.UInt32*)">
<summary>
 P/Invoke function for `cuCtxGetApiVersion@cuCtxGetApiVersion`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxGetApiVersion'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxSetSharedMemConfig(Alea.CUDA.CUDAInterop.CUsharedconfig_enum)">
<summary>
 P/Invoke function for `cuCtxSetSharedMemConfig@cuCtxSetSharedMemConfig`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxSetSharedMemConfig'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxGetSharedMemConfig(Alea.CUDA.CUDAInterop.CUsharedconfig_enum*)">
<summary>
 P/Invoke function for `cuCtxGetSharedMemConfig@cuCtxGetSharedMemConfig`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxGetSharedMemConfig'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxSetCacheConfig(Alea.CUDA.CUDAInterop.CUfunc_cache_enum)">
<summary>
 P/Invoke function for `cuCtxSetCacheConfig@cuCtxSetCacheConfig`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxSetCacheConfig'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxGetCacheConfig(Alea.CUDA.CUDAInterop.CUfunc_cache_enum*)">
<summary>
 P/Invoke function for `cuCtxGetCacheConfig@cuCtxGetCacheConfig`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxGetCacheConfig'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxGetLimit(System.IntPtr*,Alea.CUDA.CUDAInterop.CUlimit_enum)">
<summary>
 P/Invoke function for `cuCtxGetLimit@cuCtxGetLimit`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxGetLimit'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxSetLimit(Alea.CUDA.CUDAInterop.CUlimit_enum,System.IntPtr)">
<summary>
 P/Invoke function for `cuCtxSetLimit@cuCtxSetLimit`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxSetLimit'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxSynchronize">
<summary>
 P/Invoke function for `cuCtxSynchronize@cuCtxSynchronize`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxSynchronize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxGetDevice(System.Int32*)">
<summary>
 P/Invoke function for `cuCtxGetDevice@cuCtxGetDevice`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxGetDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxGetCurrent(System.IntPtr*)">
<summary>
 P/Invoke function for `cuCtxGetCurrent@cuCtxGetCurrent`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxGetCurrent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxSetCurrent(System.IntPtr)">
<summary>
 P/Invoke function for `cuCtxSetCurrent@cuCtxSetCurrent`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxSetCurrent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxPopCurrent(System.IntPtr*)">
<summary>
 P/Invoke function for `cuCtxPopCurrent@cuCtxPopCurrent_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxPopCurrent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxPushCurrent(System.IntPtr)">
<summary>
 P/Invoke function for `cuCtxPushCurrent@cuCtxPushCurrent_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxPushCurrent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cuCtxDestroy@cuCtxDestroy_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuCtxCreate(System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `cuCtxCreate@cuCtxCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuCtxCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuDeviceComputeCapability(System.Int32*,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceComputeCapability@cuDeviceComputeCapability`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuDeviceComputeCapability'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuDeviceGetProperties(Alea.CUDA.CUDAInterop.CUdevprop_st*,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceGetProperties@cuDeviceGetProperties`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuDeviceGetProperties'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuDeviceGetAttribute(System.Int32*,Alea.CUDA.CUDAInterop.CUdevice_attribute_enum,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceGetAttribute@cuDeviceGetAttribute`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuDeviceGetAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuDeviceTotalMem(System.IntPtr*,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceTotalMem@cuDeviceTotalMem_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuDeviceTotalMem'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuDeviceGetName(System.Text.StringBuilder,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceGetName@cuDeviceGetName`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuDeviceGetName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuDeviceGetCount(System.Int32*)">
<summary>
 P/Invoke function for `cuDeviceGetCount@cuDeviceGetCount`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuDeviceGetCount'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuDeviceGet(System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceGet@cuDeviceGet`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuDeviceGet'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuDriverGetVersion(System.Int32*)">
<summary>
 P/Invoke function for `cuDriverGetVersion@cuDriverGetVersion`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuDriverGetVersion'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuInit(System.UInt32)">
<summary>
 P/Invoke function for `cuInit@cuInit`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuInit'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGetErrorName(Alea.CUDA.CUDAInterop.cudaError_enum,System.SByte**)">
<summary>
 P/Invoke function for `cuGetErrorName@cuGetErrorName`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGetErrorName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CUDAInterop.cuGetErrorString(Alea.CUDA.CUDAInterop.cudaError_enum,System.SByte**)">
<summary>
 P/Invoke function for `cuGetErrorString@cuGetErrorString`.
</summary>
</member>
<member name="P:Alea.CUDA.CUDAInterop.cuGetErrorString'">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop.CUDAException">
<summary>
 Exception of P/Invoke result enum.
</summary>
</member>
<member name="T:Alea.CUDA.CUDAInterop">
<summary>
 Raw P/Invoke types and functions for CUDA.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.CULib.CUBLAS.Worker">
<summary>
 Gets the worker of this instance.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLAS.Stream">
<summary>
 Returns option value of current CUDA stream, if it is default CUDA stream,
 then returns `None`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLAS.IsDefaultStream">
<summary>
 Is current instance using default CUDA stream?
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLAS.Default">
<summary>
 Gets the default instance which is created on default worker.
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ztrttp(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2})">
<summary>
cuBlas function `Ztrttp`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trttp`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trttp).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ztrsv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Ztrsv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ztrsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,System.Int32)">
<summary>
cuBlas function `ZtrsmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ztrsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.double2}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.double2}},System.Int32,System.Int32)">
<summary>
cuBlas function `ZtrsmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ztrsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Ztrsm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ztrmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Ztrmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ztrmm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Ztrmm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trmm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trmm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ztpttr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Ztpttr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tpttr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tpttr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ztpsv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Ztpsv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tpsv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tpsv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ztpmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Ztpmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tpmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tpmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ztbsv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Ztbsv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tbsv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tbsv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ztbmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Ztbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zsyrkx(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zsyrkx`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syrkx`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syrkx).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zsyrk(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zsyrk`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syrk`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syrk).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zsyr2k(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zsyr2k`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr2k`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2k).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zsyr2(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zsyr2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zsyr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zsyr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zsymv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zsymv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;symv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zsymm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zsymm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;symm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zswap(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zswap`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;swap`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-swap).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zscal(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zscal`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;scal`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-scal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zrotg(Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{Alea.CUDA.double2})">
<summary>
cuBlas function `Zrotg`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotg`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotg).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zrot(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{Alea.CUDA.double2})">
<summary>
cuBlas function `Zrot`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rot`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rot).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zmatinv(System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `ZmatinvBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;matinvBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-matinvbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zmatinv(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.double2}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.double2}},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `ZmatinvBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;matinvBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-matinvbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zhpr2(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2})">
<summary>
cuBlas function `Zhpr2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;hpr2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-hpr2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zhpr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2})">
<summary>
cuBlas function `Zhpr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;hpr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-hpr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zhpr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2})">
<summary>
cuBlas function `Zhpr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;hpr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-hpr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zhpmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zhpmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;hpmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-hpmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zherkx(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zherkx`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;herkx`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-herkx).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zherk(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,System.Double,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zherk`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;herk`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-herk).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zherk(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zherk`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;herk`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-herk).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zher2k(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zher2k`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;her2k`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-her2k).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zher2(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zher2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;her2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-her2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zher(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zher`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;her`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-her).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zher(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zher`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;her`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-her).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zhemv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zhemv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;hemv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-hemv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zhemm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zhemm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;hemm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-hemm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zhbmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zhbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;hbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-hbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgetri(System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `ZgetriBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getriBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getribatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgetri(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.double2}},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.double2}},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `ZgetriBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getriBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getribatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgetrf(System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `ZgetrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgetrf(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.double2}},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `ZgetrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgeru(System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zgeru`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geru`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geru).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgerc(System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zgerc`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gerc`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gerc).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgeqrf(System.Int32,System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `ZgeqrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geqrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geqrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgeqrf(System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.double2}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.double2}},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `ZgeqrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geqrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geqrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgemv(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zgemv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,System.Int32)">
<summary>
cuBlas function `ZgemmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.double2}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.double2}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.double2}},System.Int32,System.Int32)">
<summary>
cuBlas function `ZgemmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zgemm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgels(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `ZgelsBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gelsBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gelsbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgels(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.double2}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.double2}},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `ZgelsBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gelsBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gelsbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgeam(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zgeam`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geam`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geam).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zgbmv(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zgbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zdscal(System.Int32,System.Double,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zdscal`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;dscal`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-dscal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zdscal(System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zdscal`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;dscal`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-dscal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zdrot(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,System.Double,System.Double)">
<summary>
cuBlas function `Zdrot`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;drot`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-drot).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zdrot(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Zdrot`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;drot`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-drot).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zdotu(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2})">
<summary>
cuBlas function `Zdotu`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;dotu`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-dotu).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zdotc(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2})">
<summary>
cuBlas function `Zdotc`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;dotc`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-dotc).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zdgmm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zdgmm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;dgmm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-dgmm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zcopy(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zcopy`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;copy`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-copy).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Zaxpy(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Zaxpy`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;axpy`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-axpy).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Strttp(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Strttp`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trttp`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trttp).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Strsv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Strsv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Strsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,System.Int32)">
<summary>
cuBlas function `StrsmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Strsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,System.Int32)">
<summary>
cuBlas function `StrsmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Strsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,System.Int32)">
<summary>
cuBlas function `StrsmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Strsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,System.Int32)">
<summary>
cuBlas function `StrsmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Strsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Strsm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Strsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Strsm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Strmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Strmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Strmm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Strmm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trmm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trmm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Strmm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Strmm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trmm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trmm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Stpttr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Stpttr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tpttr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tpttr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Stpsv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Stpsv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tpsv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tpsv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Stpmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Stpmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tpmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tpmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Stbsv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Stbsv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tbsv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tbsv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Stbmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Stbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssyrkx(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssyrkx`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syrkx`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syrkx).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssyrkx(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssyrkx`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syrkx`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syrkx).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssyrk(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssyrk`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syrk`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syrk).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssyrk(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssyrk`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syrk`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syrk).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssyr2k(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssyr2k`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr2k`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2k).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssyr2k(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssyr2k`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr2k`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2k).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssyr2(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssyr2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssyr2(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssyr2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssyr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssyr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssyr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssyr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssymv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssymv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;symv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssymv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssymv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;symv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssymm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssymm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;symm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssymm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssymm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;symm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sswap(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sswap`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;swap`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-swap).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sspr2(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Sspr2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;spr2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spr2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sspr2(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Sspr2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;spr2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spr2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sspr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Sspr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;spr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sspr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Sspr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;spr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sspmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sspmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;spmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sspmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sspmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;spmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sscal(System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sscal`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;scal`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-scal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sscal(System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sscal`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;scal`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-scal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssbmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;sbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-sbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ssbmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Ssbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;sbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-sbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Srotmg(System.Single@,System.Single@,System.Single@,System.Single)">
<summary>
cuBlas function `Srotmg`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotmg`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotmg).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Srotmg(System.Single@,System.Single@,System.Single@,System.Single,System.Single@)">
<summary>
cuBlas function `Srotmg`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotmg`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotmg).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Srotmg(Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Srotmg`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotmg`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotmg).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Srotm(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single)">
<summary>
cuBlas function `Srotm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Srotm(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Srotm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Srotg(System.Single@,System.Single@,System.Single@,System.Single@)">
<summary>
cuBlas function `Srotg`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotg`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotg).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Srotg(Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Srotg`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotg`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotg).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Srot(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single,System.Single)">
<summary>
cuBlas function `Srot`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rot`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rot).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Srot(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Srot`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rot`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rot).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Snrm2(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Snrm2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;nrm2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-nrm2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Smatinv(System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `SmatinvBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;matinvBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-matinvbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Smatinv(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `SmatinvBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;matinvBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-matinvbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgetri(System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `SgetriBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getriBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getribatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgetri(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `SgetriBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getriBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getribatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgetrf(System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `SgetrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgetrf(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `SgetrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sger(System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sger`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;ger`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-ger).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sger(System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sger`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;ger`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-ger).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgeqrf(System.Int32,System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `SgeqrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geqrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geqrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgeqrf(System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `SgeqrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geqrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geqrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgemv(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sgemv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgemv(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sgemv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,System.Single,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,System.Int32)">
<summary>
cuBlas function `SgemmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,System.Single,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,System.Int32)">
<summary>
cuBlas function `SgemmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,System.Int32)">
<summary>
cuBlas function `SgemmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,System.Int32)">
<summary>
cuBlas function `SgemmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sgemm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sgemm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgels(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `SgelsBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gelsBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gelsbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgels(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Single}},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `SgelsBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gelsBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gelsbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgeam(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sgeam`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geam`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geam).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgeam(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sgeam`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geam`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geam).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgbmv(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sgbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sgbmv(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sgbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.SetWorker(Alea.CUDA.Worker)">
<summary>
Sets the worker.
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.SetStream(Alea.CUDA.Stream)">
<summary>
 Using specified CUDA stream.
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.SetDefaultStream">
<summary>
 Using default CUDA stream.
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sdot(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Sdot`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;dot`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-dot).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sdgmm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Sdgmm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;dgmm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-dgmm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Scopy(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Scopy`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;copy`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-copy).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Scnrm2(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Scnrm2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;cnrm2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-cnrm2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Scasum(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Scasum`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;casum`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-casum).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Saxpy(System.Int32,System.Single,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Saxpy`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;axpy`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-axpy).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Saxpy(System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Saxpy`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;axpy`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-axpy).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Sasum(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Sasum`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;asum`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-asum).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Izamin(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Izamin`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;zamin`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-zamin).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Izamin(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,System.Int32@)">
<summary>
cuBlas function `Izamin`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;zamin`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-zamin).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Izamin(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{System.Int32})">
<summary>
cuBlas function `Izamin`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;zamin`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-zamin).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Izamax(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32)">
<summary>
cuBlas function `Izamax`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;zamax`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-zamax).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Izamax(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,System.Int32@)">
<summary>
cuBlas function `Izamax`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;zamax`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-zamax).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Izamax(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{System.Int32})">
<summary>
cuBlas function `Izamax`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;zamax`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-zamax).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Isamin(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Isamin`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;samin`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-samin).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Isamin(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,System.Int32@)">
<summary>
cuBlas function `Isamin`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;samin`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-samin).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Isamin(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Int32})">
<summary>
cuBlas function `Isamin`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;samin`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-samin).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Isamax(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuBlas function `Isamax`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;samax`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-samax).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Isamax(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,System.Int32@)">
<summary>
cuBlas function `Isamax`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;samax`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-samax).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Isamax(System.Int32,Alea.CUDA.deviceptr{System.Single},System.Int32,Alea.CUDA.deviceptr{System.Int32})">
<summary>
cuBlas function `Isamax`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;samax`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-samax).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Idamin(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Idamin`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;damin`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-damin).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Idamin(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,System.Int32@)">
<summary>
cuBlas function `Idamin`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;damin`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-damin).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Idamin(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Int32})">
<summary>
cuBlas function `Idamin`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;damin`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-damin).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Idamax(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Idamax`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;damax`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-damax).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Idamax(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,System.Int32@)">
<summary>
cuBlas function `Idamax`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;damax`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-damax).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Idamax(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Int32})">
<summary>
cuBlas function `Idamax`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;damax`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-damax).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Icamin(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Icamin`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;camin`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-camin).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Icamin(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,System.Int32@)">
<summary>
cuBlas function `Icamin`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;camin`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-camin).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Icamin(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{System.Int32})">
<summary>
cuBlas function `Icamin`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;camin`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-camin).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Icamax(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Icamax`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;camax`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-camax).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Icamax(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,System.Int32@)">
<summary>
cuBlas function `Icamax`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;camax`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-camax).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Icamax(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{System.Int32})">
<summary>
cuBlas function `Icamax`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;camax`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-camax).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dznrm2(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Dznrm2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;znrm2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-znrm2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dzasum(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.double2},System.Int32,Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Dzasum`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;zasum`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-zasum).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtrttp(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Dtrttp`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trttp`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trttp).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtrsv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dtrsv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtrsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,System.Int32)">
<summary>
cuBlas function `DtrsmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtrsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,System.Int32)">
<summary>
cuBlas function `DtrsmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtrsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,System.Int32)">
<summary>
cuBlas function `DtrsmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtrsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,System.Int32)">
<summary>
cuBlas function `DtrsmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtrsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dtrsm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtrsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dtrsm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtrmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dtrmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtrmm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dtrmm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trmm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trmm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtrmm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dtrmm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trmm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trmm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtpttr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dtpttr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tpttr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tpttr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtpsv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dtpsv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tpsv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tpsv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtpmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dtpmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tpmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tpmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtbsv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dtbsv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tbsv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tbsv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dtbmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dtbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsyrkx(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsyrkx`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syrkx`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syrkx).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsyrkx(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsyrkx`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syrkx`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syrkx).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsyrk(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsyrk`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syrk`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syrk).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsyrk(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsyrk`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syrk`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syrk).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsyr2k(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsyr2k`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr2k`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2k).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsyr2k(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsyr2k`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr2k`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2k).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsyr2(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsyr2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsyr2(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsyr2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsyr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsyr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsyr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsyr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsymv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsymv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;symv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsymv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsymv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;symv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsymm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsymm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;symm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsymm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsymm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;symm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dswap(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dswap`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;swap`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-swap).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dspr2(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Dspr2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;spr2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spr2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dspr2(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Dspr2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;spr2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spr2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dspr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Dspr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;spr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dspr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Dspr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;spr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dspmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dspmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;spmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dspmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dspmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;spmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dscal(System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dscal`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;scal`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-scal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dscal(System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dscal`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;scal`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-scal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsbmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;sbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-sbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dsbmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dsbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;sbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-sbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Drotmg(System.Double@,System.Double@,System.Double@,System.Double)">
<summary>
cuBlas function `Drotmg`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotmg`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotmg).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Drotmg(System.Double@,System.Double@,System.Double@,System.Double,System.Double@)">
<summary>
cuBlas function `Drotmg`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotmg`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotmg).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Drotmg(Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Drotmg`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotmg`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotmg).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Drotm(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double)">
<summary>
cuBlas function `Drotm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Drotm(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Drotm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Drotg(System.Double@,System.Double@,System.Double@,System.Double@)">
<summary>
cuBlas function `Drotg`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotg`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotg).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Drotg(Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Drotg`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotg`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotg).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Drot(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double,System.Double)">
<summary>
cuBlas function `Drot`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rot`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rot).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Drot(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Drot`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rot`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rot).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dnrm2(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Dnrm2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;nrm2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-nrm2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dmatinv(System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `DmatinvBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;matinvBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-matinvbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dmatinv(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `DmatinvBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;matinvBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-matinvbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgetri(System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `DgetriBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getriBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getribatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgetri(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `DgetriBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getriBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getribatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgetrf(System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `DgetrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgetrf(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `DgetrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dger(System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dger`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;ger`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-ger).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dger(System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dger`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;ger`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-ger).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgeqrf(System.Int32,System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `DgeqrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geqrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geqrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgeqrf(System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `DgeqrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geqrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geqrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgemv(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dgemv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgemv(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dgemv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,System.Double,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,System.Int32)">
<summary>
cuBlas function `DgemmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,System.Double,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,System.Int32)">
<summary>
cuBlas function `DgemmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,System.Int32)">
<summary>
cuBlas function `DgemmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,System.Int32)">
<summary>
cuBlas function `DgemmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dgemm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dgemm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgels(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `DgelsBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gelsBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gelsbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgels(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{System.Double}},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `DgelsBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gelsBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gelsbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgeam(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dgeam`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geam`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geam).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgeam(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dgeam`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geam`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geam).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgbmv(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dgbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dgbmv(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dgbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ddot(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Ddot`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;dot`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-dot).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ddgmm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Ddgmm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;dgmm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-dgmm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dcopy(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Dcopy`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;copy`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-copy).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Daxpy(System.Int32,System.Double,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Daxpy`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;axpy`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-axpy).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Daxpy(System.Int32,Alea.CUDA.deviceptr{System.Double},Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuBlas function `Daxpy`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;axpy`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-axpy).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Dasum(System.Int32,Alea.CUDA.deviceptr{System.Double},System.Int32,Alea.CUDA.deviceptr{System.Double})">
<summary>
cuBlas function `Dasum`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;asum`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-asum).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ctrttp(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2})">
<summary>
cuBlas function `Ctrttp`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trttp`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trttp).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ctrsv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Ctrsv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ctrsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,System.Int32)">
<summary>
cuBlas function `CtrsmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ctrsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.float2}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.float2}},System.Int32,System.Int32)">
<summary>
cuBlas function `CtrsmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ctrsm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Ctrsm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trsm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trsm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ctrmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Ctrmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ctrmm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Ctrmm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;trmm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-trmm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ctpttr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Ctpttr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tpttr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tpttr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ctpsv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Ctpsv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tpsv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tpsv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ctpmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Ctpmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tpmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tpmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ctbsv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Ctbsv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tbsv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tbsv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ctbmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Ctbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;tbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-tbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Csyrkx(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Csyrkx`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syrkx`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syrkx).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Csyrk(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Csyrk`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syrk`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syrk).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Csyr2k(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Csyr2k`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr2k`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2k).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Csyr2(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Csyr2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Csyr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Csyr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;syr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Csymv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Csymv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;symv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Csymm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Csymm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;symm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cswap(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cswap`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;swap`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-swap).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Csscal(System.Int32,System.Single,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Csscal`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;sscal`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-sscal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Csscal(System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Csscal`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;sscal`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-sscal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Csrot(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,System.Single,System.Single)">
<summary>
cuBlas function `Csrot`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;srot`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-srot).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Csrot(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{System.Single})">
<summary>
cuBlas function `Csrot`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;srot`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-srot).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cscal(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cscal`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;scal`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-scal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Crotg(Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{Alea.CUDA.float2})">
<summary>
cuBlas function `Crotg`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rotg`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotg).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Crot(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{Alea.CUDA.float2})">
<summary>
cuBlas function `Crot`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;rot`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rot).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cmatinv(System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `CmatinvBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;matinvBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-matinvbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cmatinv(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.float2}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.float2}},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `CmatinvBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;matinvBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-matinvbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Chpr2(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2})">
<summary>
cuBlas function `Chpr2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;hpr2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-hpr2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Chpr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2})">
<summary>
cuBlas function `Chpr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;hpr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-hpr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Chpr(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2})">
<summary>
cuBlas function `Chpr`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;hpr`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-hpr).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Chpmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Chpmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;hpmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-hpmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cherkx(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cherkx`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;herkx`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-herkx).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cherk(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Single,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,System.Single,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cherk`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;herk`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-herk).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cherk(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cherk`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;herk`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-herk).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cher2k(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cher2k`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;her2k`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-her2k).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cher2(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cher2`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;her2`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-her2).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cher(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cher`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;her`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-her).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cher(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{System.Single},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cher`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;her`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-her).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Chemv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Chemv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;hemv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-hemv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Chemm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Chemm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;hemm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-hemm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Chbmv(Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Chbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;hbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-hbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgetri(System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `CgetriBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getriBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getribatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgetri(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.float2}},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.float2}},System.Int32,Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `CgetriBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getriBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getribatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgetrf(System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `CgetrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgetrf(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.float2}},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `CgetrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;getrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-getrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgeru(System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cgeru`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geru`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geru).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgerc(System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cgerc`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gerc`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gerc).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgeqrf(System.Int32,System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `CgeqrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geqrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geqrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgeqrf(System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.float2}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.float2}},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `CgeqrfBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geqrfBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geqrfbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgemv(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cgemv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{System.IntPtr},System.Int32,System.Int32)">
<summary>
cuBlas function `CgemmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.float2}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.float2}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.float2}},System.Int32,System.Int32)">
<summary>
cuBlas function `CgemmBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemmBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemmbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgemm(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cgemm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gemm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgels(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.IntPtr},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `CgelsBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gelsBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gelsbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgels(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.float2}},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.deviceptr{Alea.CUDA.float2}},System.Int32,Alea.CUDA.deviceptr{System.Int32},Alea.CUDA.deviceptr{System.Int32},System.Int32)">
<summary>
cuBlas function `CgelsBatched`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gelsBatched`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gelsbatched).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgeam(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cgeam`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;geam`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-geam).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cgbmv(Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cgbmv`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;gbmv`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gbmv).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cdotu(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2})">
<summary>
cuBlas function `Cdotu`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;dotu`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-dotu).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cdotc(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2})">
<summary>
cuBlas function `Cdotc`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;dotc`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-dotc).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Cdgmm(Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,System.Int32,System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Cdgmm`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;dgmm`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-dgmm).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Ccopy(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Ccopy`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;copy`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-copy).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLAS.Caxpy(System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32,Alea.CUDA.deviceptr{Alea.CUDA.float2},System.Int32)">
<summary>
cuBlas function `Caxpy`, for more details please reference [NVIDIA document on `cublas&lt;t&gt;axpy`](http://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-axpy).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUBLAS">
<summary>
A cuBlas library wrapper. To use this, you must first properly set the path for your native cuBlas 
library. Please reference the `Settings` type for information on how to set this path.

#### Examples

To use this wrapper, you need to first create an instance from a worker instance.  You could also 
get the default instance from `CUBLAS.Default`, which is created by the default worker. Here is a 
simple example ported from [NVIDIA sample](http://docs.nvidia.com/cuda/cublas/index.html#example-code):

    [lang=csharp]
    class DocExamples_CUBLAS
    {
        private const int M = 6;
        private const int N = 5;

        private int IDX2F(int i, int j, int ld)
        {
            return (j - 1) * ld + i - 1;
        }

        private int IDX2C(int i, int j, int ld)
        {
            return j * ld + i;
        }

        private void Modify_OneBased(CUBLAS cublas,
            deviceptr&lt;float&gt; m, int ldm, int n, int p, int q, float alpha, float beta)
        {
            cublas.Sscal(n - p + 1, alpha, m + IDX2F(p, q, ldm), ldm);
            cublas.Sscal(ldm - p + 1, beta, m + IDX2F(p, q, ldm), 1);
        }

        [Test]
        public void SampleWithOneBasedIndexing()
        {
            var cublas = CUBLAS.Default;
            var worker = cublas.Worker;
            var hA = new float[M * N];
            for (var j = 1; j &lt;= N; ++j)
                for (var i = 1; i &lt;= M; ++i)
                    hA[IDX2F(i, j, M)] = (i - 1) * M + j;
            using (var dA = worker.Malloc(hA))
            {
                Modify_OneBased(cublas, dA.Ptr, M, N, 2, 3, 16.0f, 12.0f);
                var hA2 = dA.Gather();
                Console.WriteLine(&quot;Cublas result...&quot;);
                for (var j = 1; j &lt;= N; ++j)
                {
                    for (var i = 1; i &lt;= M; ++i)
                    {
                        Console.Write(&quot;{0}\t&quot;, hA2[IDX2F(i, j, M)]);
                    }
                    Console.WriteLine(&quot;&quot;);
                }
            }
        }
    }

Which generates these outputs:

    Cublas result...
    1    7    13    19    25    31
    2    8    14    20    26    32
    3    1728 180   252   324   396
    4    160  16    22    28    34
    5    176  17    23    29    35

You can also specify CUDA streams, here is an example of using streams:

    [Test]
    public void SampleUsingStream()
    {
        const int ns = 5;
        const int n = 5000000;
        var cublas = CUBLAS.Default;
        var worker = cublas.Worker;

        var hDatas = Enumerable.Range(0, ns)
                               .Select(x =&gt; Enumerable.Range(0, n)
                                                      .Select(i =&gt; (float) i)
                                                      .ToArray())
                               .ToArray();
        var dDatas = (from hData in hDatas select worker.Malloc(hData)).ToArray();
        var streams = Enumerable.Range(0, ns).Select(i =&gt; worker.CreateStream()).ToArray();

        worker.EvalAction(() =&gt;
        {
            // Launch them in parallel by different streams
            for (var i = 0; i &lt; ns; ++i)
            {
                cublas.SetStream(streams[i]);
                cublas.Sscal(n, i, dDatas[i].Ptr, 1);
            }
            cublas.SetDefaultStream();
            for (var i = 0; i &lt; ns; ++i)
            {
                hDatas[i] = dDatas[i].Gather();
            }
        });

        foreach (var dData in dDatas) dData.Dispose();
        foreach (var stream in streams) stream.Dispose();

        var cpuDatas = Enumerable.Range(0, ns)
                                 .Select(x =&gt; Enumerable.Range(0, n)
                                                        .Select(i =&gt; (float)i)
                                                        .ToArray())
                                 .ToArray();
        for (var i = 0; i &lt; ns; ++i)
            for (var j = 0; j &lt; n; ++j)
                cpuDatas[i][j] = i*cpuDatas[i][j];

        for(var i = 0; i &lt; ns; ++i)
            for(var j = 0; j &lt; n; ++j)
                Assert.AreEqual(cpuDatas[i][j], hDatas[i][j]);
    }
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.CULib.CUDNN.Worker">
<summary>
 Gets the worker of this instance.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNN.Stream">
<summary>
 Returns option value of current CUDA stream, if it is default CUDA stream,
 then returns `None`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNN.IsDefaultStream">
<summary>
 Is current instance using default CUDA stream?
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.CULib.CUDNN.Default">
<summary>
 Gets the default instance which is created on default worker.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.CULib.CUDNN.SetWorker(Alea.CUDA.Worker)">
<summary>
Sets the worker.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.CULib.CUDNN.SetStream(Alea.CUDA.Stream)">
<summary>
 Using specified CUDA stream.
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNN.SetDefaultStream">
<summary>
 Using default CUDA stream.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.CULib.CUDNN.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.CULib.CUDNNConvolutionDescriptor.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.CULib.CUDNNFilterDescriptor.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.CULib.CUDNNPoolingDescriptor.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.CULib.CUDNNTensorDescriptor.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.CULib.CURAND.Worker">
<summary>
Gets the worker of this instance.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURAND.Stream">
<summary>
Returns option value of current CUDA stream, if it is default CUDA stream,
then returns `None`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.CULib.CURAND.IsDefaultStream">
<summary>
Is current instance using default CUDA stream?
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.SetWorker(Alea.CUDA.Worker)">
<summary>
Sets the worker.
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.SetStream(Alea.CUDA.Stream)">
<summary>
Using specified CUDA stream.
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.SetQuasiRandomGeneratorDimensions(System.UInt32)">
<summary>
cuRAND function `SetQuasiRandomGeneratorDimensions`, for more details please reference [NVIDIA document on `curand&lt;t&gt;etQuasiRandomGeneratorDimensions`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-etquasirandomgeneratordimensions).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.SetPseudoRandomGeneratorSeed(System.UInt64)">
<summary>
cuRAND function `SetPseudoRandomGeneratorSeed`, for more details please reference [NVIDIA document on `curand&lt;t&gt;etPseudoRandomGeneratorSeed`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-etpseudorandomgeneratorseed).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.SetGeneratorOrdering(Alea.CUDA.CULib.CURANDInterop.curandOrdering)">
<summary>
cuRAND function `SetGeneratorOrdering`, for more details please reference [NVIDIA document on `curand&lt;t&gt;etGeneratorOrdering`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-etgeneratorordering).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.SetGeneratorOffset(System.UInt64)">
<summary>
cuRAND function `SetGeneratorOffset`, for more details please reference [NVIDIA document on `curand&lt;t&gt;etGeneratorOffset`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-etgeneratoroffset).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.SetDefaultStream">
<summary>
Using default CUDA stream.
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateUniformDouble(Alea.CUDA.deviceptr{System.Double},System.UInt64)">
<summary>
cuRAND function `GenerateUniformDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateUniformDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerateuniformdouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateUniformDouble(Alea.CUDA.deviceptr{System.Double},System.Int32)">
<summary>
cuRAND function `GenerateUniformDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateUniformDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerateuniformdouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateUniformDouble(Alea.CUDA.deviceptr{System.Double},System.IntPtr)">
<summary>
cuRAND function `GenerateUniformDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateUniformDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerateuniformdouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateUniform(Alea.CUDA.deviceptr{System.Single},System.UInt64)">
<summary>
cuRAND function `GenerateUniform`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateUniform`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerateuniform).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateUniform(Alea.CUDA.deviceptr{System.Single},System.Int32)">
<summary>
cuRAND function `GenerateUniform`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateUniform`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerateuniform).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateUniform(Alea.CUDA.deviceptr{System.Single},System.IntPtr)">
<summary>
cuRAND function `GenerateUniform`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateUniform`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerateuniform).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateSeeds">
<summary>
cuRAND function `GenerateSeeds`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateSeeds`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerateseeds).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GeneratePoissonMethod(Alea.CUDA.deviceptr{System.UInt32},System.UInt64,System.Double,Alea.CUDA.CULib.CURANDInterop.curandMethod)">
<summary>
cuRAND function `GeneratePoissonMethod`, for more details please reference [NVIDIA document on `curand&lt;t&gt;eneratePoissonMethod`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratepoissonmethod).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GeneratePoissonMethod(Alea.CUDA.deviceptr{System.UInt32},System.Int32,System.Double,Alea.CUDA.CULib.CURANDInterop.curandMethod)">
<summary>
cuRAND function `GeneratePoissonMethod`, for more details please reference [NVIDIA document on `curand&lt;t&gt;eneratePoissonMethod`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratepoissonmethod).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GeneratePoissonMethod(Alea.CUDA.deviceptr{System.UInt32},System.IntPtr,System.Double,Alea.CUDA.CULib.CURANDInterop.curandMethod)">
<summary>
cuRAND function `GeneratePoissonMethod`, for more details please reference [NVIDIA document on `curand&lt;t&gt;eneratePoissonMethod`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratepoissonmethod).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GeneratePoisson(Alea.CUDA.deviceptr{System.UInt32},System.UInt64,System.Double)">
<summary>
cuRAND function `GeneratePoisson`, for more details please reference [NVIDIA document on `curand&lt;t&gt;eneratePoisson`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratepoisson).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GeneratePoisson(Alea.CUDA.deviceptr{System.UInt32},System.Int32,System.Double)">
<summary>
cuRAND function `GeneratePoisson`, for more details please reference [NVIDIA document on `curand&lt;t&gt;eneratePoisson`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratepoisson).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GeneratePoisson(Alea.CUDA.deviceptr{System.UInt32},System.IntPtr,System.Double)">
<summary>
cuRAND function `GeneratePoisson`, for more details please reference [NVIDIA document on `curand&lt;t&gt;eneratePoisson`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratepoisson).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateNormalDouble(Alea.CUDA.deviceptr{System.Double},System.UInt64,System.Double,System.Double)">
<summary>
cuRAND function `GenerateNormalDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateNormalDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratenormaldouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateNormalDouble(Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double,System.Double)">
<summary>
cuRAND function `GenerateNormalDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateNormalDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratenormaldouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateNormalDouble(Alea.CUDA.deviceptr{System.Double},System.IntPtr,System.Double,System.Double)">
<summary>
cuRAND function `GenerateNormalDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateNormalDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratenormaldouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateNormal(Alea.CUDA.deviceptr{System.Single},System.UInt64,System.Single,System.Single)">
<summary>
cuRAND function `GenerateNormal`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateNormal`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratenormal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateNormal(Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single,System.Single)">
<summary>
cuRAND function `GenerateNormal`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateNormal`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratenormal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateNormal(Alea.CUDA.deviceptr{System.Single},System.IntPtr,System.Single,System.Single)">
<summary>
cuRAND function `GenerateNormal`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateNormal`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratenormal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateLongLong(Alea.CUDA.deviceptr{System.UInt64},System.UInt64)">
<summary>
cuRAND function `GenerateLongLong`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLongLong`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelonglong).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateLongLong(Alea.CUDA.deviceptr{System.UInt64},System.Int32)">
<summary>
cuRAND function `GenerateLongLong`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLongLong`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelonglong).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateLongLong(Alea.CUDA.deviceptr{System.UInt64},System.IntPtr)">
<summary>
cuRAND function `GenerateLongLong`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLongLong`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelonglong).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateLogNormalDouble(Alea.CUDA.deviceptr{System.Double},System.UInt64,System.Double,System.Double)">
<summary>
cuRAND function `GenerateLogNormalDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLogNormalDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelognormaldouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateLogNormalDouble(Alea.CUDA.deviceptr{System.Double},System.Int32,System.Double,System.Double)">
<summary>
cuRAND function `GenerateLogNormalDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLogNormalDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelognormaldouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateLogNormalDouble(Alea.CUDA.deviceptr{System.Double},System.IntPtr,System.Double,System.Double)">
<summary>
cuRAND function `GenerateLogNormalDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLogNormalDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelognormaldouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateLogNormal(Alea.CUDA.deviceptr{System.Single},System.UInt64,System.Single,System.Single)">
<summary>
cuRAND function `GenerateLogNormal`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLogNormal`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelognormal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateLogNormal(Alea.CUDA.deviceptr{System.Single},System.Int32,System.Single,System.Single)">
<summary>
cuRAND function `GenerateLogNormal`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLogNormal`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelognormal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.GenerateLogNormal(Alea.CUDA.deviceptr{System.Single},System.IntPtr,System.Single,System.Single)">
<summary>
cuRAND function `GenerateLogNormal`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLogNormal`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelognormal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.Generate(Alea.CUDA.deviceptr{System.UInt32},System.UInt64)">
<summary>
cuRAND function `Generate`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerate`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerate).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.Generate(Alea.CUDA.deviceptr{System.UInt32},System.Int32)">
<summary>
cuRAND function `Generate`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerate`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerate).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURAND.Generate(Alea.CUDA.deviceptr{System.UInt32},System.IntPtr)">
<summary>
cuRAND function `Generate`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerate`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerate).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.SetQuasiRandomGeneratorDimensions(System.UInt32)">
<summary>
cuRAND function `SetQuasiRandomGeneratorDimensions`, for more details please reference [NVIDIA document on `curand&lt;t&gt;etQuasiRandomGeneratorDimensions`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-etquasirandomgeneratordimensions).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.SetPseudoRandomGeneratorSeed(System.UInt64)">
<summary>
cuRAND function `SetPseudoRandomGeneratorSeed`, for more details please reference [NVIDIA document on `curand&lt;t&gt;etPseudoRandomGeneratorSeed`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-etpseudorandomgeneratorseed).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.SetGeneratorOrdering(Alea.CUDA.CULib.CURANDInterop.curandOrdering)">
<summary>
cuRAND function `SetGeneratorOrdering`, for more details please reference [NVIDIA document on `curand&lt;t&gt;etGeneratorOrdering`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-etgeneratorordering).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.SetGeneratorOffset(System.UInt64)">
<summary>
cuRAND function `SetGeneratorOffset`, for more details please reference [NVIDIA document on `curand&lt;t&gt;etGeneratorOffset`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-etgeneratoroffset).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateUniformDouble(System.Double[],System.UInt64)">
<summary>
cuRAND function `GenerateUniformDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateUniformDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerateuniformdouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateUniformDouble(System.Double[],System.Int32)">
<summary>
cuRAND function `GenerateUniformDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateUniformDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerateuniformdouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateUniformDouble(System.Double[],System.IntPtr)">
<summary>
cuRAND function `GenerateUniformDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateUniformDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerateuniformdouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateUniform(System.Single[],System.UInt64)">
<summary>
cuRAND function `GenerateUniform`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateUniform`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerateuniform).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateUniform(System.Single[],System.Int32)">
<summary>
cuRAND function `GenerateUniform`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateUniform`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerateuniform).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateUniform(System.Single[],System.IntPtr)">
<summary>
cuRAND function `GenerateUniform`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateUniform`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerateuniform).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateSeeds">
<summary>
cuRAND function `GenerateSeeds`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateSeeds`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerateseeds).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GeneratePoissonMethod(System.UInt32[],System.UInt64,System.Double,Alea.CUDA.CULib.CURANDInterop.curandMethod)">
<summary>
cuRAND function `GeneratePoissonMethod`, for more details please reference [NVIDIA document on `curand&lt;t&gt;eneratePoissonMethod`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratepoissonmethod).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GeneratePoissonMethod(System.UInt32[],System.Int32,System.Double,Alea.CUDA.CULib.CURANDInterop.curandMethod)">
<summary>
cuRAND function `GeneratePoissonMethod`, for more details please reference [NVIDIA document on `curand&lt;t&gt;eneratePoissonMethod`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratepoissonmethod).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GeneratePoissonMethod(System.UInt32[],System.IntPtr,System.Double,Alea.CUDA.CULib.CURANDInterop.curandMethod)">
<summary>
cuRAND function `GeneratePoissonMethod`, for more details please reference [NVIDIA document on `curand&lt;t&gt;eneratePoissonMethod`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratepoissonmethod).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GeneratePoisson(System.UInt32[],System.UInt64,System.Double)">
<summary>
cuRAND function `GeneratePoisson`, for more details please reference [NVIDIA document on `curand&lt;t&gt;eneratePoisson`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratepoisson).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GeneratePoisson(System.UInt32[],System.Int32,System.Double)">
<summary>
cuRAND function `GeneratePoisson`, for more details please reference [NVIDIA document on `curand&lt;t&gt;eneratePoisson`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratepoisson).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GeneratePoisson(System.UInt32[],System.IntPtr,System.Double)">
<summary>
cuRAND function `GeneratePoisson`, for more details please reference [NVIDIA document on `curand&lt;t&gt;eneratePoisson`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratepoisson).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateNormalDouble(System.Double[],System.UInt64,System.Double,System.Double)">
<summary>
cuRAND function `GenerateNormalDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateNormalDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratenormaldouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateNormalDouble(System.Double[],System.Int32,System.Double,System.Double)">
<summary>
cuRAND function `GenerateNormalDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateNormalDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratenormaldouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateNormalDouble(System.Double[],System.IntPtr,System.Double,System.Double)">
<summary>
cuRAND function `GenerateNormalDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateNormalDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratenormaldouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateNormal(System.Single[],System.UInt64,System.Single,System.Single)">
<summary>
cuRAND function `GenerateNormal`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateNormal`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratenormal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateNormal(System.Single[],System.Int32,System.Single,System.Single)">
<summary>
cuRAND function `GenerateNormal`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateNormal`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratenormal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateNormal(System.Single[],System.IntPtr,System.Single,System.Single)">
<summary>
cuRAND function `GenerateNormal`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateNormal`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratenormal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateLongLong(System.UInt64[],System.UInt64)">
<summary>
cuRAND function `GenerateLongLong`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLongLong`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelonglong).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateLongLong(System.UInt64[],System.Int32)">
<summary>
cuRAND function `GenerateLongLong`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLongLong`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelonglong).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateLongLong(System.UInt64[],System.IntPtr)">
<summary>
cuRAND function `GenerateLongLong`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLongLong`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelonglong).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateLogNormalDouble(System.Double[],System.UInt64,System.Double,System.Double)">
<summary>
cuRAND function `GenerateLogNormalDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLogNormalDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelognormaldouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateLogNormalDouble(System.Double[],System.Int32,System.Double,System.Double)">
<summary>
cuRAND function `GenerateLogNormalDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLogNormalDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelognormaldouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateLogNormalDouble(System.Double[],System.IntPtr,System.Double,System.Double)">
<summary>
cuRAND function `GenerateLogNormalDouble`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLogNormalDouble`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelognormaldouble).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateLogNormal(System.Single[],System.UInt64,System.Single,System.Single)">
<summary>
cuRAND function `GenerateLogNormal`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLogNormal`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelognormal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateLogNormal(System.Single[],System.Int32,System.Single,System.Single)">
<summary>
cuRAND function `GenerateLogNormal`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLogNormal`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelognormal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.GenerateLogNormal(System.Single[],System.IntPtr,System.Single,System.Single)">
<summary>
cuRAND function `GenerateLogNormal`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerateLogNormal`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-eneratelognormal).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.Generate(System.UInt32[],System.UInt64)">
<summary>
cuRAND function `Generate`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerate`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerate).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.Generate(System.UInt32[],System.Int32)">
<summary>
cuRAND function `Generate`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerate`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerate).
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDHost.Generate(System.UInt32[],System.IntPtr)">
<summary>
cuRAND function `Generate`, for more details please reference [NVIDIA document on `curand&lt;t&gt;enerate`](http://docs.nvidia.com/cuda/curand/index.html#curand-lt-t-gt-enerate).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUBLASInterop.cublasHandle_t">
<summary>
 P/Invoke alias type `nativeint -&gt; cublasHandle_t`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUBLASInterop.cublasAtomicsMode_t">
<summary>
 P/Invoke enum type `cublasAtomicsMode_t` (2 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUBLASInterop.cublasPointerMode_t">
<summary>
 P/Invoke enum type `cublasPointerMode_t` (2 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t">
<summary>
 P/Invoke enum type `cublasOperation_t` (3 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t">
<summary>
 P/Invoke enum type `cublasSideMode_t` (2 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t">
<summary>
 P/Invoke enum type `cublasDiagType_t` (2 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t">
<summary>
 P/Invoke enum type `cublasFillMode_t` (2 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUBLASInterop.cublasStatus_t">
<summary>
 P/Invoke enum type `cublasStatus_t` (10 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CUBLASInterop.cuDoubleComplex">
<summary>
 P/Invoke alias type `double2 -&gt; cuDoubleComplex`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CUBLASInterop.cuComplex">
<summary>
 P/Invoke alias type `float2 -&gt; cuComplex`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CUBLASInterop.cudaStream_t">
<summary>
 P/Invoke alias type `nativeint -&gt; cudaStream_t`.
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSafeCall(Alea.CUDA.CULib.CUBLASInterop.cublasStatus_t)">
<summary>
 Throws exception when the result is not success.
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZtrttp(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*)">
<summary>
 P/Invoke function for `cublasZtrttp@cublasZtrttp`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZtrttp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCtrttp(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*)">
<summary>
 P/Invoke function for `cublasCtrttp@cublasCtrttp`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCtrttp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDtrttp(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double*,System.Int32,System.Double*)">
<summary>
 P/Invoke function for `cublasDtrttp@cublasDtrttp`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDtrttp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasStrttp(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single*,System.Int32,System.Single*)">
<summary>
 P/Invoke function for `cublasStrttp@cublasStrttp`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasStrttp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZtpttr(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZtpttr@cublasZtpttr`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZtpttr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCtpttr(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCtpttr@cublasCtpttr`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCtpttr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDtpttr(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double*,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDtpttr@cublasDtpttr`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDtpttr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasStpttr(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single*,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasStpttr@cublasStpttr`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasStpttr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZdgmm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,System.Int32,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZdgmm@cublasZdgmm`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZdgmm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCdgmm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,System.Int32,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCdgmm@cublasCdgmm`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCdgmm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDdgmm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,System.Int32,System.Int32,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDdgmm@cublasDdgmm`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDdgmm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSdgmm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,System.Int32,System.Int32,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSdgmm@cublasSdgmm`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSdgmm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZgelsBatched(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasZgelsBatched@cublasZgelsBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZgelsBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCgelsBatched(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasCgelsBatched@cublasCgelsBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCgelsBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDgelsBatched(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasDgelsBatched@cublasDgelsBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDgelsBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSgelsBatched(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasSgelsBatched@cublasSgelsBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSgelsBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZgeqrfBatched(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasZgeqrfBatched@cublasZgeqrfBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZgeqrfBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCgeqrfBatched(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasCgeqrfBatched@cublasCgeqrfBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCgeqrfBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDgeqrfBatched(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasDgeqrfBatched@cublasDgeqrfBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDgeqrfBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSgeqrfBatched(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasSgeqrfBatched@cublasSgeqrfBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSgeqrfBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZmatinvBatched(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasZmatinvBatched@cublasZmatinvBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZmatinvBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCmatinvBatched(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasCmatinvBatched@cublasCmatinvBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCmatinvBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDmatinvBatched(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasDmatinvBatched@cublasDmatinvBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDmatinvBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSmatinvBatched(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasSmatinvBatched@cublasSmatinvBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSmatinvBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZtrsmBatched(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.double2*,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cublasZtrsmBatched@cublasZtrsmBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZtrsmBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCtrsmBatched(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.float2*,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cublasCtrsmBatched@cublasCtrsmBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCtrsmBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDtrsmBatched(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Double*,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cublasDtrsmBatched@cublasDtrsmBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDtrsmBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasStrsmBatched(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Single*,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cublasStrsmBatched@cublasStrsmBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasStrsmBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZgetriBatched(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.IntPtr,System.Int32,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasZgetriBatched@cublasZgetriBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZgetriBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCgetriBatched(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.IntPtr,System.Int32,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasCgetriBatched@cublasCgetriBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCgetriBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDgetriBatched(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.IntPtr,System.Int32,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasDgetriBatched@cublasDgetriBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDgetriBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSgetriBatched(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.IntPtr,System.Int32,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasSgetriBatched@cublasSgetriBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSgetriBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZgetrfBatched(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasZgetrfBatched@cublasZgetrfBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZgetrfBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCgetrfBatched(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasCgetrfBatched@cublasCgetrfBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCgetrfBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDgetrfBatched(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasDgetrfBatched@cublasDgetrfBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDgetrfBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSgetrfBatched(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32*,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cublasSgetrfBatched@cublasSgetrfBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSgetrfBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZgeam(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZgeam@cublasZgeam`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZgeam'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCgeam(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCgeam@cublasCgeam`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCgeam'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDgeam(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDgeam@cublasDgeam`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDgeam'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSgeam(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSgeam@cublasSgeam`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSgeam'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZgemmBatched(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.double2*,System.IntPtr,System.Int32,System.IntPtr,System.Int32,Alea.CUDA.double2*,System.IntPtr,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cublasZgemmBatched@cublasZgemmBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZgemmBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCgemmBatched(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.float2*,System.IntPtr,System.Int32,System.IntPtr,System.Int32,Alea.CUDA.float2*,System.IntPtr,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cublasCgemmBatched@cublasCgemmBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCgemmBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDgemmBatched(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Double*,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Double*,System.IntPtr,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cublasDgemmBatched@cublasDgemmBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDgemmBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSgemmBatched(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Single*,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Single*,System.IntPtr,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cublasSgemmBatched@cublasSgemmBatched`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSgemmBatched'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZtrmm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZtrmm@cublasZtrmm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZtrmm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCtrmm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCtrmm@cublasCtrmm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCtrmm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDtrmm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDtrmm@cublasDtrmm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDtrmm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasStrmm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasStrmm@cublasStrmm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasStrmm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZtrsm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZtrsm@cublasZtrsm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZtrsm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCtrsm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCtrsm@cublasCtrsm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCtrsm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDtrsm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDtrsm@cublasDtrsm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDtrsm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasStrsm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasStrsm@cublasStrsm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasStrsm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZhemm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZhemm@cublasZhemm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZhemm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasChemm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasChemm@cublasChemm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasChemm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZsymm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZsymm@cublasZsymm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZsymm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCsymm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCsymm@cublasCsymm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCsymm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDsymm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDsymm@cublasDsymm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDsymm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSsymm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasSideMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSsymm@cublasSsymm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSsymm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZherkx(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,System.Double*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZherkx@cublasZherkx`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZherkx'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCherkx(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,System.Single*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCherkx@cublasCherkx`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCherkx'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZsyrkx(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZsyrkx@cublasZsyrkx`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZsyrkx'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCsyrkx(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCsyrkx@cublasCsyrkx`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCsyrkx'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDsyrkx(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDsyrkx@cublasDsyrkx`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDsyrkx'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSsyrkx(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSsyrkx@cublasSsyrkx`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSsyrkx'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZher2k(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,System.Double*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZher2k@cublasZher2k_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZher2k'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCher2k(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,System.Single*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCher2k@cublasCher2k_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCher2k'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZsyr2k(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZsyr2k@cublasZsyr2k_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZsyr2k'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCsyr2k(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCsyr2k@cublasCsyr2k_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCsyr2k'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDsyr2k(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDsyr2k@cublasDsyr2k_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDsyr2k'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSsyr2k(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSsyr2k@cublasSsyr2k_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSsyr2k'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZherk(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Double*,Alea.CUDA.double2*,System.Int32,System.Double*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZherk@cublasZherk_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZherk'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCherk(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Single*,Alea.CUDA.float2*,System.Int32,System.Single*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCherk@cublasCherk_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCherk'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZsyrk(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZsyrk@cublasZsyrk_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZsyrk'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCsyrk(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCsyrk@cublasCsyrk_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCsyrk'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDsyrk(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDsyrk@cublasDsyrk_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDsyrk'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSsyrk(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSsyrk@cublasSsyrk_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSsyrk'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZgemm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZgemm@cublasZgemm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZgemm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCgemm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCgemm@cublasCgemm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCgemm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDgemm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDgemm@cublasDgemm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDgemm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSgemm(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSgemm@cublasSgemm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSgemm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZhpr2(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*)">
<summary>
 P/Invoke function for `cublasZhpr2@cublasZhpr2_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZhpr2'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasChpr2(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*)">
<summary>
 P/Invoke function for `cublasChpr2@cublasChpr2_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasChpr2'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDspr2(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*)">
<summary>
 P/Invoke function for `cublasDspr2@cublasDspr2_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDspr2'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSspr2(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*)">
<summary>
 P/Invoke function for `cublasSspr2@cublasSspr2_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSspr2'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZher2(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZher2@cublasZher2_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZher2'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCher2(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCher2@cublasCher2_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCher2'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZsyr2(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZsyr2@cublasZsyr2_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZsyr2'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCsyr2(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCsyr2@cublasCsyr2_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCsyr2'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDsyr2(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDsyr2@cublasDsyr2_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDsyr2'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSsyr2(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSsyr2@cublasSsyr2_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSsyr2'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZhpr(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*)">
<summary>
 P/Invoke function for `cublasZhpr@cublasZhpr_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZhpr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasChpr(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*)">
<summary>
 P/Invoke function for `cublasChpr@cublasChpr_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasChpr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDspr(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*)">
<summary>
 P/Invoke function for `cublasDspr@cublasDspr_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDspr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSspr(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*)">
<summary>
 P/Invoke function for `cublasSspr@cublasSspr_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSspr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZher(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZher@cublasZher_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZher'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCher(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCher@cublasCher_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCher'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZsyr(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZsyr@cublasZsyr_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZsyr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCsyr(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCsyr@cublasCsyr_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCsyr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDsyr(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDsyr@cublasDsyr_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDsyr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSsyr(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSsyr@cublasSsyr_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSsyr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZgerc(System.IntPtr,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZgerc@cublasZgerc_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZgerc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZgeru(System.IntPtr,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZgeru@cublasZgeru_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZgeru'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCgerc(System.IntPtr,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCgerc@cublasCgerc_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCgerc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCgeru(System.IntPtr,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCgeru@cublasCgeru_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCgeru'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDger(System.IntPtr,System.Int32,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDger@cublasDger_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDger'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSger(System.IntPtr,System.Int32,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSger@cublasSger_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSger'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZhpmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZhpmv@cublasZhpmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZhpmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasChpmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasChpmv@cublasChpmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasChpmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDspmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double*,System.Double*,System.Double*,System.Int32,System.Double*,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDspmv@cublasDspmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDspmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSspmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single*,System.Single*,System.Single*,System.Int32,System.Single*,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSspmv@cublasSspmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSspmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZhbmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZhbmv@cublasZhbmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZhbmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasChbmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasChbmv@cublasChbmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasChbmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDsbmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDsbmv@cublasDsbmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDsbmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSsbmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSsbmv@cublasSsbmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSsbmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZhemv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZhemv@cublasZhemv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZhemv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasChemv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasChemv@cublasChemv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasChemv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZsymv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZsymv@cublasZsymv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZsymv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCsymv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCsymv@cublasCsymv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCsymv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDsymv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDsymv@cublasDsymv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDsymv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSsymv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSsymv@cublasSsymv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSsymv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZtbsv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZtbsv@cublasZtbsv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZtbsv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCtbsv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCtbsv@cublasCtbsv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCtbsv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDtbsv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Double*,System.Int32,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDtbsv@cublasDtbsv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDtbsv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasStbsv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Single*,System.Int32,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasStbsv@cublasStbsv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasStbsv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZtpsv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZtpsv@cublasZtpsv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZtpsv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCtpsv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCtpsv@cublasCtpsv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCtpsv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDtpsv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Double*,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDtpsv@cublasDtpsv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDtpsv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasStpsv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Single*,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasStpsv@cublasStpsv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasStpsv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZtrsv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZtrsv@cublasZtrsv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZtrsv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCtrsv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCtrsv@cublasCtrsv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCtrsv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDtrsv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Double*,System.Int32,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDtrsv@cublasDtrsv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDtrsv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasStrsv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Single*,System.Int32,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasStrsv@cublasStrsv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasStrsv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZtpmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZtpmv@cublasZtpmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZtpmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCtpmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCtpmv@cublasCtpmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCtpmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDtpmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Double*,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDtpmv@cublasDtpmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDtpmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasStpmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Single*,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasStpmv@cublasStpmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasStpmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZtbmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZtbmv@cublasZtbmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZtbmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCtbmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCtbmv@cublasCtbmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCtbmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDtbmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Double*,System.Int32,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDtbmv@cublasDtbmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDtbmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasStbmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Int32,System.Single*,System.Int32,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasStbmv@cublasStbmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasStbmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZtrmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZtrmv@cublasZtrmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZtrmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCtrmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCtrmv@cublasCtrmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCtrmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDtrmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Double*,System.Int32,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDtrmv@cublasDtrmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDtrmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasStrmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasFillMode_t,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,Alea.CUDA.CULib.CUBLASInterop.cublasDiagType_t,System.Int32,System.Single*,System.Int32,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasStrmv@cublasStrmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasStrmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZgbmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZgbmv@cublasZgbmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZgbmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCgbmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCgbmv@cublasCgbmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCgbmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDgbmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDgbmv@cublasDgbmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDgbmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSgbmv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSgbmv@cublasSgbmv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSgbmv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZgemv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZgemv@cublasZgemv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZgemv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCgemv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCgemv@cublasCgemv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCgemv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDgemv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDgemv@cublasDgemv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDgemv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSgemv(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasOperation_t,System.Int32,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSgemv@cublasSgemv_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSgemv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDrotmg(System.IntPtr,System.Double*,System.Double*,System.Double*,System.Double*,System.Double*)">
<summary>
 P/Invoke function for `cublasDrotmg@cublasDrotmg_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDrotmg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSrotmg(System.IntPtr,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*)">
<summary>
 P/Invoke function for `cublasSrotmg@cublasSrotmg_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSrotmg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDrotm(System.IntPtr,System.Int32,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*)">
<summary>
 P/Invoke function for `cublasDrotm@cublasDrotm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDrotm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSrotm(System.IntPtr,System.Int32,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*)">
<summary>
 P/Invoke function for `cublasSrotm@cublasSrotm_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSrotm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZrotg(System.IntPtr,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Double*,Alea.CUDA.double2*)">
<summary>
 P/Invoke function for `cublasZrotg@cublasZrotg_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZrotg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCrotg(System.IntPtr,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Single*,Alea.CUDA.float2*)">
<summary>
 P/Invoke function for `cublasCrotg@cublasCrotg_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCrotg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDrotg(System.IntPtr,System.Double*,System.Double*,System.Double*,System.Double*)">
<summary>
 P/Invoke function for `cublasDrotg@cublasDrotg_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDrotg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSrotg(System.IntPtr,System.Single*,System.Single*,System.Single*,System.Single*)">
<summary>
 P/Invoke function for `cublasSrotg@cublasSrotg_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSrotg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZdrot(System.IntPtr,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,System.Double*,System.Double*)">
<summary>
 P/Invoke function for `cublasZdrot@cublasZdrot_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZdrot'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZrot(System.IntPtr,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,System.Double*,Alea.CUDA.double2*)">
<summary>
 P/Invoke function for `cublasZrot@cublasZrot_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZrot'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCsrot(System.IntPtr,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,System.Single*,System.Single*)">
<summary>
 P/Invoke function for `cublasCsrot@cublasCsrot_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCsrot'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCrot(System.IntPtr,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,System.Single*,Alea.CUDA.float2*)">
<summary>
 P/Invoke function for `cublasCrot@cublasCrot_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCrot'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDrot(System.IntPtr,System.Int32,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*,System.Double*)">
<summary>
 P/Invoke function for `cublasDrot@cublasDrot_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDrot'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSrot(System.IntPtr,System.Int32,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*,System.Single*)">
<summary>
 P/Invoke function for `cublasSrot@cublasSrot_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSrot'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDzasum(System.IntPtr,System.Int32,Alea.CUDA.double2*,System.Int32,System.Double*)">
<summary>
 P/Invoke function for `cublasDzasum@cublasDzasum_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDzasum'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasScasum(System.IntPtr,System.Int32,Alea.CUDA.float2*,System.Int32,System.Single*)">
<summary>
 P/Invoke function for `cublasScasum@cublasScasum_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasScasum'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDasum(System.IntPtr,System.Int32,System.Double*,System.Int32,System.Double*)">
<summary>
 P/Invoke function for `cublasDasum@cublasDasum_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDasum'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSasum(System.IntPtr,System.Int32,System.Single*,System.Int32,System.Single*)">
<summary>
 P/Invoke function for `cublasSasum@cublasSasum_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSasum'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasIzamin(System.IntPtr,System.Int32,Alea.CUDA.double2*,System.Int32,System.Int32*)">
<summary>
 P/Invoke function for `cublasIzamin@cublasIzamin_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasIzamin'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasIcamin(System.IntPtr,System.Int32,Alea.CUDA.float2*,System.Int32,System.Int32*)">
<summary>
 P/Invoke function for `cublasIcamin@cublasIcamin_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasIcamin'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasIdamin(System.IntPtr,System.Int32,System.Double*,System.Int32,System.Int32*)">
<summary>
 P/Invoke function for `cublasIdamin@cublasIdamin_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasIdamin'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasIsamin(System.IntPtr,System.Int32,System.Single*,System.Int32,System.Int32*)">
<summary>
 P/Invoke function for `cublasIsamin@cublasIsamin_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasIsamin'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasIzamax(System.IntPtr,System.Int32,Alea.CUDA.double2*,System.Int32,System.Int32*)">
<summary>
 P/Invoke function for `cublasIzamax@cublasIzamax_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasIzamax'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasIcamax(System.IntPtr,System.Int32,Alea.CUDA.float2*,System.Int32,System.Int32*)">
<summary>
 P/Invoke function for `cublasIcamax@cublasIcamax_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasIcamax'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasIdamax(System.IntPtr,System.Int32,System.Double*,System.Int32,System.Int32*)">
<summary>
 P/Invoke function for `cublasIdamax@cublasIdamax_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasIdamax'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasIsamax(System.IntPtr,System.Int32,System.Single*,System.Int32,System.Int32*)">
<summary>
 P/Invoke function for `cublasIsamax@cublasIsamax_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasIsamax'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZswap(System.IntPtr,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZswap@cublasZswap_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZswap'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCswap(System.IntPtr,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCswap@cublasCswap_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCswap'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDswap(System.IntPtr,System.Int32,System.Double*,System.Int32,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDswap@cublasDswap_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDswap'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSswap(System.IntPtr,System.Int32,System.Single*,System.Int32,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSswap@cublasSswap_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSswap'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZcopy(System.IntPtr,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZcopy@cublasZcopy_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZcopy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCcopy(System.IntPtr,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCcopy@cublasCcopy_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCcopy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDcopy(System.IntPtr,System.Int32,System.Double*,System.Int32,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDcopy@cublasDcopy_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDcopy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasScopy(System.IntPtr,System.Int32,System.Single*,System.Int32,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasScopy@cublasScopy_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasScopy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZaxpy(System.IntPtr,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZaxpy@cublasZaxpy_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZaxpy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCaxpy(System.IntPtr,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCaxpy@cublasCaxpy_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCaxpy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDaxpy(System.IntPtr,System.Int32,System.Double*,System.Double*,System.Int32,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDaxpy@cublasDaxpy_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDaxpy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSaxpy(System.IntPtr,System.Int32,System.Single*,System.Single*,System.Int32,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSaxpy@cublasSaxpy_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSaxpy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZdscal(System.IntPtr,System.Int32,System.Double*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZdscal@cublasZdscal_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZdscal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZscal(System.IntPtr,System.Int32,Alea.CUDA.double2*,Alea.CUDA.double2*,System.Int32)">
<summary>
 P/Invoke function for `cublasZscal@cublasZscal_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZscal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCsscal(System.IntPtr,System.Int32,System.Single*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCsscal@cublasCsscal_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCsscal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCscal(System.IntPtr,System.Int32,Alea.CUDA.float2*,Alea.CUDA.float2*,System.Int32)">
<summary>
 P/Invoke function for `cublasCscal@cublasCscal_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCscal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDscal(System.IntPtr,System.Int32,System.Double*,System.Double*,System.Int32)">
<summary>
 P/Invoke function for `cublasDscal@cublasDscal_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDscal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSscal(System.IntPtr,System.Int32,System.Single*,System.Single*,System.Int32)">
<summary>
 P/Invoke function for `cublasSscal@cublasSscal_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSscal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZdotc(System.IntPtr,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*)">
<summary>
 P/Invoke function for `cublasZdotc@cublasZdotc_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZdotc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasZdotu(System.IntPtr,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*,System.Int32,Alea.CUDA.double2*)">
<summary>
 P/Invoke function for `cublasZdotu@cublasZdotu_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasZdotu'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCdotc(System.IntPtr,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*)">
<summary>
 P/Invoke function for `cublasCdotc@cublasCdotc_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCdotc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCdotu(System.IntPtr,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*,System.Int32,Alea.CUDA.float2*)">
<summary>
 P/Invoke function for `cublasCdotu@cublasCdotu_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCdotu'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDdot(System.IntPtr,System.Int32,System.Double*,System.Int32,System.Double*,System.Int32,System.Double*)">
<summary>
 P/Invoke function for `cublasDdot@cublasDdot_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDdot'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSdot(System.IntPtr,System.Int32,System.Single*,System.Int32,System.Single*,System.Int32,System.Single*)">
<summary>
 P/Invoke function for `cublasSdot@cublasSdot_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSdot'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDznrm2(System.IntPtr,System.Int32,Alea.CUDA.double2*,System.Int32,System.Double*)">
<summary>
 P/Invoke function for `cublasDznrm2@cublasDznrm2_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDznrm2'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasScnrm2(System.IntPtr,System.Int32,Alea.CUDA.float2*,System.Int32,System.Single*)">
<summary>
 P/Invoke function for `cublasScnrm2@cublasScnrm2_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasScnrm2'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDnrm2(System.IntPtr,System.Int32,System.Double*,System.Int32,System.Double*)">
<summary>
 P/Invoke function for `cublasDnrm2@cublasDnrm2_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDnrm2'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSnrm2(System.IntPtr,System.Int32,System.Single*,System.Int32,System.Single*)">
<summary>
 P/Invoke function for `cublasSnrm2@cublasSnrm2_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSnrm2'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasXerbla(System.String,System.Int32)">
<summary>
 P/Invoke function for `cublasXerbla@cublasXerbla`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasXerbla'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasGetMatrixAsync(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `cublasGetMatrixAsync@cublasGetMatrixAsync`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasGetMatrixAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSetMatrixAsync(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `cublasSetMatrixAsync@cublasSetMatrixAsync`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSetMatrixAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasGetVectorAsync(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `cublasGetVectorAsync@cublasGetVectorAsync`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasGetVectorAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSetVectorAsync(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `cublasSetVectorAsync@cublasSetVectorAsync`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSetVectorAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasGetMatrix(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `cublasGetMatrix@cublasGetMatrix`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasGetMatrix'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSetMatrix(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `cublasSetMatrix@cublasSetMatrix`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSetMatrix'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasGetVector(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `cublasGetVector@cublasGetVector`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasGetVector'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSetVector(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `cublasSetVector@cublasSetVector`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSetVector'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSetAtomicsMode(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasAtomicsMode_t)">
<summary>
 P/Invoke function for `cublasSetAtomicsMode@cublasSetAtomicsMode`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSetAtomicsMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasGetAtomicsMode(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasAtomicsMode_t*)">
<summary>
 P/Invoke function for `cublasGetAtomicsMode@cublasGetAtomicsMode`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasGetAtomicsMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSetPointerMode(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasPointerMode_t)">
<summary>
 P/Invoke function for `cublasSetPointerMode@cublasSetPointerMode_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSetPointerMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasGetPointerMode(System.IntPtr,Alea.CUDA.CULib.CUBLASInterop.cublasPointerMode_t*)">
<summary>
 P/Invoke function for `cublasGetPointerMode@cublasGetPointerMode_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasGetPointerMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasGetStream(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `cublasGetStream@cublasGetStream_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasGetStream'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasSetStream(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cublasSetStream@cublasSetStream_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasSetStream'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasGetVersion(System.IntPtr,System.Int32*)">
<summary>
 P/Invoke function for `cublasGetVersion@cublasGetVersion_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasGetVersion'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cublasDestroy@cublasDestroy_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUBLASInterop.cublasCreate(System.IntPtr*)">
<summary>
 P/Invoke function for `cublasCreate@cublasCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUBLASInterop.cublasCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUBLASInterop.CUBLASException">
<summary>
 Exception of P/Invoke result enum.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CUBLASInterop">
<summary>
 Raw P/Invoke types and functions for cuBlas.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnActivationMode_t">
<summary>
 P/Invoke enum type `cudnnActivationMode_t` (3 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnPoolingMode_t">
<summary>
 P/Invoke enum type `cudnnPoolingMode_t` (3 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnSoftmaxMode_t">
<summary>
 P/Invoke enum type `cudnnSoftmaxMode_t` (2 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnSoftmaxAlgorithm_t">
<summary>
 P/Invoke enum type `cudnnSoftmaxAlgorithm_t` (2 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionFwdAlgo_t">
<summary>
 P/Invoke enum type `cudnnConvolutionFwdAlgo_t` (4 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionFwdPreference_t">
<summary>
 P/Invoke enum type `cudnnConvolutionFwdPreference_t` (3 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionMode_t">
<summary>
 P/Invoke enum type `cudnnConvolutionMode_t` (2 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnAddMode_t">
<summary>
 P/Invoke enum type `cudnnAddMode_t` (6 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnTensorFormat_t">
<summary>
 P/Invoke enum type `cudnnTensorFormat_t` (2 enumerators).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnDataType_t">
<summary>
 P/Invoke enum type `cudnnDataType_t` (2 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnFilterDescriptor_t">
<summary>
 P/Invoke alias type `nativeint -&gt; cudnnFilterDescriptor_t`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnPoolingDescriptor_t">
<summary>
 P/Invoke alias type `nativeint -&gt; cudnnPoolingDescriptor_t`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionDescriptor_t">
<summary>
 P/Invoke alias type `nativeint -&gt; cudnnConvolutionDescriptor_t`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnTensorDescriptor_t">
<summary>
 P/Invoke alias type `nativeint -&gt; cudnnTensorDescriptor_t`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnStatus_t">
<summary>
 P/Invoke enum type `cudnnStatus_t` (11 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudnnHandle_t">
<summary>
 P/Invoke alias type `nativeint -&gt; cudnnHandle_t`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.cudaStream_t">
<summary>
 P/Invoke alias type `nativeint -&gt; cudaStream_t`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.size_t">
<summary>
 P/Invoke alias type `nativeint -&gt; size_t`.
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnSafeCall(Alea.CUDA.CULib.CUDNNInterop.cudnnStatus_t)">
<summary>
 Throws exception when the result is not success.
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnActivationBackward(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnActivationMode_t,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnActivationBackward@cudnnActivationBackward`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnActivationBackward'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnActivationForward(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnActivationMode_t,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnActivationForward@cudnnActivationForward`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnActivationForward'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnPoolingBackward(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnPoolingBackward@cudnnPoolingBackward`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnPoolingBackward'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnPoolingForward(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnPoolingForward@cudnnPoolingForward`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnPoolingForward'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnDestroyPoolingDescriptor(System.IntPtr)">
<summary>
 P/Invoke function for `cudnnDestroyPoolingDescriptor@cudnnDestroyPoolingDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnDestroyPoolingDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetPooling2dForwardOutputDim(System.IntPtr,System.IntPtr,System.Int32*,System.Int32*,System.Int32*,System.Int32*)">
<summary>
 P/Invoke function for `cudnnGetPooling2dForwardOutputDim@cudnnGetPooling2dForwardOutputDim`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetPooling2dForwardOutputDim'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetPoolingNdForwardOutputDim(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnGetPoolingNdForwardOutputDim@cudnnGetPoolingNdForwardOutputDim`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetPoolingNdForwardOutputDim'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetPoolingNdDescriptor(System.IntPtr,System.Int32,Alea.CUDA.CULib.CUDNNInterop.cudnnPoolingMode_t*,System.Int32*,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnGetPoolingNdDescriptor@cudnnGetPoolingNdDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetPoolingNdDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnSetPoolingNdDescriptor(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnPoolingMode_t,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnSetPoolingNdDescriptor@cudnnSetPoolingNdDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnSetPoolingNdDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetPooling2dDescriptor(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnPoolingMode_t*,System.Int32*,System.Int32*,System.Int32*,System.Int32*,System.Int32*,System.Int32*)">
<summary>
 P/Invoke function for `cudnnGetPooling2dDescriptor@cudnnGetPooling2dDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetPooling2dDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnSetPooling2dDescriptor(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnPoolingMode_t,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cudnnSetPooling2dDescriptor@cudnnSetPooling2dDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnSetPooling2dDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnCreatePoolingDescriptor(System.IntPtr*)">
<summary>
 P/Invoke function for `cudnnCreatePoolingDescriptor@cudnnCreatePoolingDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnCreatePoolingDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnSoftmaxBackward(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnSoftmaxAlgorithm_t,Alea.CUDA.CULib.CUDNNInterop.cudnnSoftmaxMode_t,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnSoftmaxBackward@cudnnSoftmaxBackward`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnSoftmaxBackward'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnSoftmaxForward(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnSoftmaxAlgorithm_t,Alea.CUDA.CULib.CUDNNInterop.cudnnSoftmaxMode_t,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnSoftmaxForward@cudnnSoftmaxForward`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnSoftmaxForward'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnIm2Col(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnIm2Col@cudnnIm2Col`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnIm2Col'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionBackwardData(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnConvolutionBackwardData@cudnnConvolutionBackwardData`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionBackwardData'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionBackwardFilter(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnConvolutionBackwardFilter@cudnnConvolutionBackwardFilter`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionBackwardFilter'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionBackwardBias(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnConvolutionBackwardBias@cudnnConvolutionBackwardBias`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionBackwardBias'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionForward(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionFwdAlgo_t,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnConvolutionForward@cudnnConvolutionForward`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionForward'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetConvolutionForwardWorkspaceSize(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionFwdAlgo_t,System.IntPtr*)">
<summary>
 P/Invoke function for `cudnnGetConvolutionForwardWorkspaceSize@cudnnGetConvolutionForwardWorkspaceSize`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetConvolutionForwardWorkspaceSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetConvolutionForwardAlgorithm(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionFwdPreference_t,System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionFwdAlgo_t*)">
<summary>
 P/Invoke function for `cudnnGetConvolutionForwardAlgorithm@cudnnGetConvolutionForwardAlgorithm`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetConvolutionForwardAlgorithm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnDestroyConvolutionDescriptor(System.IntPtr)">
<summary>
 P/Invoke function for `cudnnDestroyConvolutionDescriptor@cudnnDestroyConvolutionDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnDestroyConvolutionDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetConvolutionNdForwardOutputDim(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnGetConvolutionNdForwardOutputDim@cudnnGetConvolutionNdForwardOutputDim`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetConvolutionNdForwardOutputDim'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetConvolutionNdDescriptor(System.IntPtr,System.Int32,System.Int32*,System.IntPtr,System.IntPtr,System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionMode_t*)">
<summary>
 P/Invoke function for `cudnnGetConvolutionNdDescriptor@cudnnGetConvolutionNdDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetConvolutionNdDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnSetConvolutionNdDescriptor(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionMode_t)">
<summary>
 P/Invoke function for `cudnnSetConvolutionNdDescriptor@cudnnSetConvolutionNdDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnSetConvolutionNdDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetConvolution2dForwardOutputDim(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32*,System.Int32*,System.Int32*,System.Int32*)">
<summary>
 P/Invoke function for `cudnnGetConvolution2dForwardOutputDim@cudnnGetConvolution2dForwardOutputDim`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetConvolution2dForwardOutputDim'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetConvolution2dDescriptor(System.IntPtr,System.Int32*,System.Int32*,System.Int32*,System.Int32*,System.Int32*,System.Int32*,Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionMode_t*)">
<summary>
 P/Invoke function for `cudnnGetConvolution2dDescriptor@cudnnGetConvolution2dDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetConvolution2dDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnSetConvolution2dDescriptor(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Alea.CUDA.CULib.CUDNNInterop.cudnnConvolutionMode_t)">
<summary>
 P/Invoke function for `cudnnSetConvolution2dDescriptor@cudnnSetConvolution2dDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnSetConvolution2dDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnCreateConvolutionDescriptor(System.IntPtr*)">
<summary>
 P/Invoke function for `cudnnCreateConvolutionDescriptor@cudnnCreateConvolutionDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnCreateConvolutionDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnDestroyFilterDescriptor(System.IntPtr)">
<summary>
 P/Invoke function for `cudnnDestroyFilterDescriptor@cudnnDestroyFilterDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnDestroyFilterDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetFilterNdDescriptor(System.IntPtr,System.Int32,Alea.CUDA.CULib.CUDNNInterop.cudnnDataType_t*,System.Int32*,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnGetFilterNdDescriptor@cudnnGetFilterNdDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetFilterNdDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnSetFilterNdDescriptor(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnDataType_t,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnSetFilterNdDescriptor@cudnnSetFilterNdDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnSetFilterNdDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetFilter4dDescriptor(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnDataType_t*,System.Int32*,System.Int32*,System.Int32*,System.Int32*)">
<summary>
 P/Invoke function for `cudnnGetFilter4dDescriptor@cudnnGetFilter4dDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetFilter4dDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnSetFilter4dDescriptor(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnDataType_t,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cudnnSetFilter4dDescriptor@cudnnSetFilter4dDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnSetFilter4dDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnCreateFilterDescriptor(System.IntPtr*)">
<summary>
 P/Invoke function for `cudnnCreateFilterDescriptor@cudnnCreateFilterDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnCreateFilterDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnScaleTensor(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnScaleTensor@cudnnScaleTensor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnScaleTensor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnSetTensor(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnSetTensor@cudnnSetTensor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnSetTensor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnAddTensor(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnAddMode_t,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnAddTensor@cudnnAddTensor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnAddTensor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnTransformTensor(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnTransformTensor@cudnnTransformTensor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnTransformTensor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnDestroyTensorDescriptor(System.IntPtr)">
<summary>
 P/Invoke function for `cudnnDestroyTensorDescriptor@cudnnDestroyTensorDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnDestroyTensorDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetTensorNdDescriptor(System.IntPtr,System.Int32,Alea.CUDA.CULib.CUDNNInterop.cudnnDataType_t*,System.Int32*,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnGetTensorNdDescriptor@cudnnGetTensorNdDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetTensorNdDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnSetTensorNdDescriptor(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnDataType_t,System.Int32,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnSetTensorNdDescriptor@cudnnSetTensorNdDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnSetTensorNdDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetTensor4dDescriptor(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnDataType_t*,System.Int32*,System.Int32*,System.Int32*,System.Int32*,System.Int32*,System.Int32*,System.Int32*,System.Int32*)">
<summary>
 P/Invoke function for `cudnnGetTensor4dDescriptor@cudnnGetTensor4dDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetTensor4dDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnSetTensor4dDescriptorEx(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnDataType_t,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cudnnSetTensor4dDescriptorEx@cudnnSetTensor4dDescriptorEx`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnSetTensor4dDescriptorEx'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnSetTensor4dDescriptor(System.IntPtr,Alea.CUDA.CULib.CUDNNInterop.cudnnTensorFormat_t,Alea.CUDA.CULib.CUDNNInterop.cudnnDataType_t,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cudnnSetTensor4dDescriptor@cudnnSetTensor4dDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnSetTensor4dDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnCreateTensorDescriptor(System.IntPtr*)">
<summary>
 P/Invoke function for `cudnnCreateTensorDescriptor@cudnnCreateTensorDescriptor`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnCreateTensorDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetStream(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `cudnnGetStream@cudnnGetStream`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetStream'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnSetStream(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cudnnSetStream@cudnnSetStream`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnSetStream'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cudnnDestroy@cudnnDestroy`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnCreate(System.IntPtr*)">
<summary>
 P/Invoke function for `cudnnCreate@cudnnCreate`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetErrorString(Alea.CUDA.CULib.CUDNNInterop.cudnnStatus_t)">
<summary>
 P/Invoke function for `cudnnGetErrorString@cudnnGetErrorString`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetErrorString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CUDNNInterop.cudnnGetVersion">
<summary>
 P/Invoke function for `cudnnGetVersion@cudnnGetVersion`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CUDNNInterop.cudnnGetVersion'">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop.CUDNNException">
<summary>
 Exception of P/Invoke result enum.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CUDNNInterop">

</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandMethod_t">
<summary>
 P/Invoke alias type `curandMethod -&gt; curandMethod_t`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandMethod">
<summary>
 P/Invoke enum type `curandMethod` (14 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandDiscreteDistribution_t">
<summary>
 P/Invoke alias type `nativeint -&gt; curandDiscreteDistribution_t`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandHistogramM2V_t">
<summary>
 P/Invoke alias type `nativeptr&lt;curandHistogramM2V_st&gt; -&gt; curandHistogramM2V_t`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandHistogramM2V_st">
<summary>
 P/Invoke alias type `curandDistribution_st -&gt; curandHistogramM2V_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandHistogramM2K_t">
<summary>
 P/Invoke alias type `nativeptr&lt;curandHistogramM2K_st&gt; -&gt; curandHistogramM2K_t`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandHistogramM2K_st">
<summary>
 P/Invoke alias type `uint32 -&gt; curandHistogramM2K_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandHistogramM2_t">
<summary>
 P/Invoke alias type `nativeint -&gt; curandHistogramM2_t`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandDistributionM2Shift_t">
<summary>
 P/Invoke alias type `nativeint -&gt; curandDistributionM2Shift_t`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandDistributionShift_t">
<summary>
 P/Invoke alias type `nativeint -&gt; curandDistributionShift_t`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandDistribution_t">
<summary>
 P/Invoke alias type `nativeptr&lt;curandDistribution_st&gt; -&gt; curandDistribution_t`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandDistribution_st">
<summary>
 P/Invoke alias type `System.Double -&gt; curandDistribution_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandGenerator_t">
<summary>
 P/Invoke alias type `nativeint -&gt; curandGenerator_t`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandDirectionVectors64_t">
<summary>
 P/Invoke alias type `curandDirectionVectors64_st -&gt; curandDirectionVectors64_t`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandDirectionVectors64_st">
<summary>
 P/Invoke struct type `curandDirectionVectors64_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandDirectionVectors32_t">
<summary>
 P/Invoke alias type `curandDirectionVectors32_st -&gt; curandDirectionVectors32_t`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandDirectionVectors32_st">
<summary>
 P/Invoke struct type `curandDirectionVectors32_st`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandDirectionVectorSet_t">
<summary>
 P/Invoke alias type `curandDirectionVectorSet -&gt; curandDirectionVectorSet_t`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandDirectionVectorSet">
<summary>
 P/Invoke enum type `curandDirectionVectorSet` (4 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandOrdering_t">
<summary>
 P/Invoke alias type `curandOrdering -&gt; curandOrdering_t`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandOrdering">
<summary>
 P/Invoke enum type `curandOrdering` (4 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandRngType_t">
<summary>
 P/Invoke alias type `curandRngType -&gt; curandRngType_t`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandRngType">
<summary>
 P/Invoke enum type `curandRngType` (12 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandStatus_t">
<summary>
 P/Invoke alias type `curandStatus -&gt; curandStatus_t`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.curandStatus">
<summary>
 P/Invoke enum type `curandStatus` (13 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.cudaStream_t">
<summary>
 P/Invoke alias type `nativeint -&gt; cudaStream_t`.
</summary>
</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop.size_t">
<summary>
 P/Invoke alias type `nativeint -&gt; size_t`.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGetScrambleConstants64(System.UInt64**)">
<summary>
 P/Invoke function for `curandGetScrambleConstants64@curandGetScrambleConstants64`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGetScrambleConstants64'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGetDirectionVectors64(Alea.CUDA.CULib.CURANDInterop.curandDirectionVectors64_st*,Alea.CUDA.CULib.CURANDInterop.curandDirectionVectorSet)">
<summary>
 P/Invoke function for `curandGetDirectionVectors64@curandGetDirectionVectors64`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGetDirectionVectors64'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGetScrambleConstants32(System.UInt32**)">
<summary>
 P/Invoke function for `curandGetScrambleConstants32@curandGetScrambleConstants32`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGetScrambleConstants32'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGetDirectionVectors32(Alea.CUDA.CULib.CURANDInterop.curandDirectionVectors32_st*,Alea.CUDA.CULib.CURANDInterop.curandDirectionVectorSet)">
<summary>
 P/Invoke function for `curandGetDirectionVectors32@curandGetDirectionVectors32`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGetDirectionVectors32'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGenerateSeeds(System.IntPtr)">
<summary>
 P/Invoke function for `curandGenerateSeeds@curandGenerateSeeds`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGenerateSeeds'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGeneratePoissonMethod(System.IntPtr,System.UInt32*,System.IntPtr,System.Double,Alea.CUDA.CULib.CURANDInterop.curandMethod)">
<summary>
 P/Invoke function for `curandGeneratePoissonMethod@curandGeneratePoissonMethod`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGeneratePoissonMethod'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGeneratePoisson(System.IntPtr,System.UInt32*,System.IntPtr,System.Double)">
<summary>
 P/Invoke function for `curandGeneratePoisson@curandGeneratePoisson`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGeneratePoisson'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandDestroyDistribution(System.IntPtr)">
<summary>
 P/Invoke function for `curandDestroyDistribution@curandDestroyDistribution`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandDestroyDistribution'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandCreatePoissonDistribution(System.Double,System.IntPtr*)">
<summary>
 P/Invoke function for `curandCreatePoissonDistribution@curandCreatePoissonDistribution`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandCreatePoissonDistribution'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGenerateLogNormalDouble(System.IntPtr,System.Double*,System.IntPtr,System.Double,System.Double)">
<summary>
 P/Invoke function for `curandGenerateLogNormalDouble@curandGenerateLogNormalDouble`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGenerateLogNormalDouble'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGenerateLogNormal(System.IntPtr,System.Single*,System.IntPtr,System.Single,System.Single)">
<summary>
 P/Invoke function for `curandGenerateLogNormal@curandGenerateLogNormal`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGenerateLogNormal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGenerateNormalDouble(System.IntPtr,System.Double*,System.IntPtr,System.Double,System.Double)">
<summary>
 P/Invoke function for `curandGenerateNormalDouble@curandGenerateNormalDouble`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGenerateNormalDouble'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGenerateNormal(System.IntPtr,System.Single*,System.IntPtr,System.Single,System.Single)">
<summary>
 P/Invoke function for `curandGenerateNormal@curandGenerateNormal`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGenerateNormal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGenerateUniformDouble(System.IntPtr,System.Double*,System.IntPtr)">
<summary>
 P/Invoke function for `curandGenerateUniformDouble@curandGenerateUniformDouble`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGenerateUniformDouble'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGenerateUniform(System.IntPtr,System.Single*,System.IntPtr)">
<summary>
 P/Invoke function for `curandGenerateUniform@curandGenerateUniform`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGenerateUniform'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGenerateLongLong(System.IntPtr,System.UInt64*,System.IntPtr)">
<summary>
 P/Invoke function for `curandGenerateLongLong@curandGenerateLongLong`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGenerateLongLong'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGenerate(System.IntPtr,System.UInt32*,System.IntPtr)">
<summary>
 P/Invoke function for `curandGenerate@curandGenerate`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGenerate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandSetQuasiRandomGeneratorDimensions(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `curandSetQuasiRandomGeneratorDimensions@curandSetQuasiRandomGeneratorDimensions`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandSetQuasiRandomGeneratorDimensions'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandSetGeneratorOrdering(System.IntPtr,Alea.CUDA.CULib.CURANDInterop.curandOrdering)">
<summary>
 P/Invoke function for `curandSetGeneratorOrdering@curandSetGeneratorOrdering`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandSetGeneratorOrdering'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandSetGeneratorOffset(System.IntPtr,System.UInt64)">
<summary>
 P/Invoke function for `curandSetGeneratorOffset@curandSetGeneratorOffset`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandSetGeneratorOffset'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandSetPseudoRandomGeneratorSeed(System.IntPtr,System.UInt64)">
<summary>
 P/Invoke function for `curandSetPseudoRandomGeneratorSeed@curandSetPseudoRandomGeneratorSeed`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandSetPseudoRandomGeneratorSeed'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandSetStream(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `curandSetStream@curandSetStream`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandSetStream'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandGetVersion(System.Int32*)">
<summary>
 P/Invoke function for `curandGetVersion@curandGetVersion`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandGetVersion'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandDestroyGenerator(System.IntPtr)">
<summary>
 P/Invoke function for `curandDestroyGenerator@curandDestroyGenerator`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandDestroyGenerator'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandCreateGeneratorHost(System.IntPtr*,Alea.CUDA.CULib.CURANDInterop.curandRngType)">
<summary>
 P/Invoke function for `curandCreateGeneratorHost@curandCreateGeneratorHost`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandCreateGeneratorHost'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.CULib.CURANDInterop.curandCreateGenerator(System.IntPtr*,Alea.CUDA.CULib.CURANDInterop.curandRngType)">
<summary>
 P/Invoke function for `curandCreateGenerator@curandCreateGenerator`.
</summary>
</member>
<member name="P:Alea.CUDA.CULib.CURANDInterop.curandCreateGenerator'">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CULib.CURANDInterop">
<summary>
 Raw P/Invoke types and functions for cuRAND
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.cuda">
<summary>
 The template workflow; used to build resources.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation">
<summary>
 This module provides a workflow to create template.
</summary>
</member>
<member name="M:Alea.CUDA.CompileErrorUtil.compilefailwith``1(Alea.CUDA.CompileError)">
<summary>
 Report compiling error and stop the compiling.
</summary>
</member>
<member name="T:Alea.CUDA.CompileErrorUtil">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Constructs">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.DIViz">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Internal.FSharp.Core.FuncConvertExtensions">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.Internal.FSharp.Linq.QueryModule.groupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2},Microsoft.FSharp.Core.FSharpFunc{``1,``2},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{``1},``3}})">
<summary>
 This join operator implements the LINQ GroupJoin operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
</summary>
</member>
<member name="M:Alea.CUDA.Internal.FSharp.Linq.QueryModule.join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2},Microsoft.FSharp.Core.FSharpFunc{``1,``2},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``3}})">
<summary>
 This join operator corresponds to the LINQ Join operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
</summary>
</member>
<member name="M:Alea.CUDA.Internal.FSharp.Linq.QueryModule.groupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
<summary>
 When used in queries, this operator corresponds to the LINQ Join operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
</summary>
</member>
<member name="M:Alea.CUDA.Internal.FSharp.Linq.QueryModule.maxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
<summary>
 When used in queries, this operator corresponds to the LINQ Max operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
 It differs in return type from &lt;c&gt;Seq.maxBy&lt;/c&gt;
</summary>
</member>
<member name="M:Alea.CUDA.Internal.FSharp.Linq.QueryModule.minBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
<summary>
 When used in queries, this operator corresponds to the LINQ Min operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
 It differs in return type from &lt;c&gt;Seq.minBy&lt;/c&gt;
</summary>
</member>
<member name="M:Alea.CUDA.Internal.FSharp.Linq.QueryModule.contains``1(``0,System.Collections.Generic.IEnumerable{``0})">
<summary>
 When used in queries, this operator corresponds to the LINQ Contains operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
</summary>
</member>
<member name="M:Alea.CUDA.Internal.FSharp.Linq.QueryModule.query``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 Evaluate the quotation expression by first converting to a LINQ expression tree
 making use of IQueryable operators and then executing expression tree

 Exceptions: &lt;c&gt;InvalidArgumentException&lt;/c&gt; will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="T:Alea.CUDA.Internal.FSharp.Linq.QueryModule">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.Internal.FSharp.NativeInterop.PinnedArray2`1.of_array2D(`0[0:,0:])">
<summary>
 For native interop. Pin the given object
</summary>
</member>
<member name="M:Alea.CUDA.Internal.FSharp.NativeInterop.PinnedArray2`1.of_array2(`0[0:,0:])">
<summary>
 For native interop. Pin the given object
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Internal.FSharp.NativeInterop.PinnedArray2`1">
<summary>
 [omit]
 Represents a pinned handle to a structure with an underlying 2D array, i.e. an underlying NativeArray2.
 Used when interfacing with native code math libraries such as LAPACK.
</summary>
</member>
<member name="M:Alea.CUDA.Internal.FSharp.NativeInterop.PinnedArray`1.of_array(`0[])">
<summary>
 For native interop. Pin the given object
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Internal.FSharp.NativeInterop.PinnedArray`1">
<summary>
 [omit]
 Represents a pinned handle to a structure with an underlying 1D array, i.e. an underlying NativeArray.
 Used when interfacing with native code math libraries such as LAPACK.
</summary>
</member>
<member name="P:Alea.CUDA.Internal.FSharp.NativeInterop.FortranMatrix`1.Item(System.Int32,System.Int32,`0)">
<summary>
 Get or set an entry in the array
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Internal.FSharp.NativeInterop.FortranMatrix`1.NativeTranspose">
<summary>
 View a FortranMatrix as a CMatrix.  Doesn&apos;t actually allocate
 a new matirx - just gives a different label to the same bits, and swaps the
 row/column count information associated with the bits.
</summary>
</member>
<member name="P:Alea.CUDA.Internal.FSharp.NativeInterop.FortranMatrix`1.Item(System.Int32,System.Int32)">
<summary>
 Get or set an entry in the array
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Internal.FSharp.NativeInterop.FortranMatrix`1">
<summary>
 [omit]
 This type wraps a pointer to a blob of unmanaged memory assumed to contain
 a Fortran-style column major two-dimensional matrix of items compatible with the (presumably blittable) 
 type &apos;T. The blob of memory must be allocated and managed externally, 
 e.g. by a computation routine written in C.

 All operations on this type are marked inlined
 because the code used to implement the operations is not verifiable.  

 Any code that uses these operations will be unverifiable and may 
 cause memory corruption if not used with extreme care.
</summary>
</member>
<member name="T:Alea.CUDA.Internal.FSharp.NativeInterop.CMatrix`1">
<summary>
 [omit]
 See NativeArray2
</summary>
</member>
<member name="P:Alea.CUDA.Internal.FSharp.NativeInterop.NativeArray2`1.Item(System.Int32,System.Int32,`0)">
<summary>
 Get or set an entry in the array
</summary>
</member>
<member name="P:Alea.CUDA.Internal.FSharp.NativeInterop.NativeArray2`1.Ptr">
<summary>
 Pointer to the C-style row major two-dimensional array 
</summary>
</member>
<member name="P:Alea.CUDA.Internal.FSharp.NativeInterop.NativeArray2`1.NumRows">
<summary>
 Get the number of rows of the native array
</summary>
</member>
<member name="P:Alea.CUDA.Internal.FSharp.NativeInterop.NativeArray2`1.NumCols">
<summary>
 Get the number of columns of the native array
</summary>
</member>
<member name="P:Alea.CUDA.Internal.FSharp.NativeInterop.NativeArray2`1.NativeTranspose">
<summary>
 View a CMatrix as a FortranMatrix.  Doesn&apos;t actually allocate
 a new matirx - just gives a different label to the same bits, and swaps the
 row/column count information associated with the bits.
</summary>
</member>
<member name="P:Alea.CUDA.Internal.FSharp.NativeInterop.NativeArray2`1.Item(System.Int32,System.Int32)">
<summary>
 Get or set an entry in the array
</summary>
</member>
<member name="M:Alea.CUDA.Internal.FSharp.NativeInterop.NativeArray2`1.#ctor(`0*,System.Int32,System.Int32)">
<summary>
 Creates a C-style row major two-dimensional array from a native pointer, the number of rows and the number of columns.  
 Nothing is actually copied.
</summary>
</member>
<member name="T:Alea.CUDA.Internal.FSharp.NativeInterop.NativeArray2`1">
<summary>
 [omit]
 This type wraps a pointer to a blob of unmanaged memory assumed to contain
 a C-style row major two-dimensional matrix of items compatible with the (presumably blittable) 
 type &apos;T. The blob of memory must be allocated and managed externally, 
 e.g. by a computation routine written in C.

 All operations on this type are marked inlined
 because the code used to implement the operations is not verifiable.  

 Any code that uses these operations will be unverifiable and may 
 cause memory corruption if not used with extreme care.
</summary>
</member>
<member name="P:Alea.CUDA.Internal.FSharp.NativeInterop.NativeArray`1.Item(System.Int32,`0)">
<summary>
 Get or set an entry in the array
</summary>
</member>
<member name="P:Alea.CUDA.Internal.FSharp.NativeInterop.NativeArray`1.Ptr">
<summary>
 Pointer to the C-style one-dimensional array
</summary>
</member>
<member name="P:Alea.CUDA.Internal.FSharp.NativeInterop.NativeArray`1.Length">
<summary>
 Length of the C-style one-dimensional array
</summary>
</member>
<member name="P:Alea.CUDA.Internal.FSharp.NativeInterop.NativeArray`1.Item(System.Int32)">
<summary>
 Get or set an entry in the array
</summary>
</member>
<member name="M:Alea.CUDA.Internal.FSharp.NativeInterop.NativeArray`1.#ctor(`0*,System.Int32)">
<summary>
 Creates a C-style one dimensional array from a native pointer and the length of the array
 Nothing is actually copied.
</summary>
</member>
<member name="T:Alea.CUDA.Internal.FSharp.NativeInterop.NativeArray`1">
<summary>
 [omit]
 This type wraps a pointer to a blob of unmanaged memory assumed to contain
 a C-style one-dimensional array of items compatible with the (presumably blittable) 
 type &apos;T.  The blob of memory must be allocated and managed externally, 
 e.g. by a computation routine written in C.

 All operations on this type are marked inlined
 because the code used to implement the operations is not verifiable.  

 Any code that uses these operations will be unverifiable and may 
 cause memory corruption if not used with extreme care.
</summary>
</member>
<member name="M:Alea.CUDA.Internal.FSharp.NativeInterop.RefModule.pin``2(Microsoft.FSharp.Core.FSharpRef{``0},Microsoft.FSharp.Core.FSharpFunc{``0*,``1})">
<summary>
 Pin the given ref for the duration of a single call to the given function.  A native pointer to
 the contents of the ref is passed to the given function.  Cleanup the GCHandle associated with the 
 pin when the function completes, even if an exception is raised.
</summary>
</member>
<member name="T:Alea.CUDA.Internal.FSharp.NativeInterop.RefModule">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.InternalSettings">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.BallotAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.AnyAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.AllAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.FullWarpShuffle">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.WarpShuffle">
<summary>
A helper static class providing shuffle instructions.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.ShuffleAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.AtomicOperationAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.WarpSizeAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.IntrinsicFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.ObjReinterpretFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.ObjVolatileFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.ArrayReinterpretFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.ArrayVolatileFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.PtrToObjFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.ObjToPtrFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.RefToPtrFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.Array2DToPtrFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.ArrayToPtrFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.UnboxFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.BoxFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.NullFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.AlignOfFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.SizeOfFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.EvalAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.WarpIDAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.LaneMaskAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.LaneIDAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.UnrollAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.__DefaultValueAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.IsStaticConstantAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.StaticAssertAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.UndefAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.DebugAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.LibDeviceFunctionAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.DeviceOnlyAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.LabAttribute">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ballot(System.Int32)">
<summary>
Evaluates `predicate` for all active threads of the warp and return an integer
whose Nth bit is set if and only if `predicate` evaluates to non-zero for the
Nth thread of the warp and the Nth thread is active.
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#warp-vote-functions).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__any(System.Int32)">
<summary>
Evaluates `predicate` for all active threads of the warp and return non-zero
if and only if `predicate` evaluates to non-zero for any of them.
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#warp-vote-functions).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__all(System.Int32)">
<summary>
Evaluates `predicate` for all active threads of the warp and return non-zero
if and only if `predicate` evaluates to non-zero for all of them.
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#warp-vote-functions).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__shfl_xor``1(``0,System.Int32,System.Int32)">
<summary>
Exchanges a variable between threads within a warp.
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#warp-shuffle-functions).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__shfl_down``1(``0,System.Int32,System.Int32)">
<summary>
Exchanges a variable between threads within a warp.
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#warp-shuffle-functions).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__shfl_up``1(``0,System.Int32,System.Int32)">
<summary>
Exchanges a variable between threads within a warp.
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#warp-shuffle-functions).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__shfl``1(``0,System.Int32,System.Int32)">
<summary>
Exchanges a variable between threads within a warp.
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#warp-shuffle-functions).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__shfl_xor_raw``1(``0,System.Int32,System.Int32)">
<summary>
A raw version of ptx code `shfl.bfly`, where the `shflC` contains two packed values
specifying a mask for logically splitting warps into sub-segments and an upper bound
for clamping the source lane index.
Read more at [here](http://docs.nvidia.com/cuda/parallel-thread-execution/#data-movement-and-conversion-instructions-shfl).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__shfl_down_raw``1(``0,System.Int32,System.Int32)">
<summary>
A raw version of ptx code `shfl.down`, where the `shflC` contains two packed values
specifying a mask for logically splitting warps into sub-segments and an upper bound
for clamping the source lane index.
Read more at [here](http://docs.nvidia.com/cuda/parallel-thread-execution/#data-movement-and-conversion-instructions-shfl).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__shfl_up_raw``1(``0,System.Int32,System.Int32)">
<summary>
A raw version of ptx code `shfl.up`, where the `shflC` contains two packed values
specifying a mask for logically splitting warps into sub-segments and an upper bound
for clamping the source lane index.
Read more at [here](http://docs.nvidia.com/cuda/parallel-thread-execution/#data-movement-and-conversion-instructions-shfl).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__shfl_raw``1(``0,System.Int32,System.Int32)">
<summary>
A raw version of ptx code `shfl.idx`, where the `shflC` contains two packed values
specifying a mask for logically splitting warps into sub-segments and an upper bound
for clamping the source lane index.
Read more at [here](http://docs.nvidia.com/cuda/parallel-thread-execution/#data-movement-and-conversion-instructions-shfl).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__atomic_cas``1(Alea.CUDA.deviceptr{``0},``0,``0)">
<summary>
Reads the 32-bit or 64-bit word `old` located at the address `address` in global or shared memory,
computes `(old == compare ? val : old)`, and stores the result back to memory at the same address.
These three operations are performed in one atomic transaction. The function returns old (Compare
And Swap).
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomiccas).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__atomic_dec``1(Alea.CUDA.deviceptr{``0},``0)">
<summary>
Reads the 32-bit word `old` located at the address `address` in global or shared memory,
computes `(((old == 0) | (old &gt; val)) ? val : (old-1) )`, and stores the result back to memory
at the same address. These three operations are performed in one atomic transaction.
The function returns `old`.
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomicdec).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__atomic_inc``1(Alea.CUDA.deviceptr{``0},``0)">
<summary>
Reads the 32-bit word `old` located at the address `address` in global or shared memory,
computes `((old &gt;= val) ? 0 : (old+1))`, and stores the result back to memory at the same address.
These three operations are performed in one atomic transaction. The function returns `old`.
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomicinc).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__atomic_max``1(Alea.CUDA.deviceptr{``0},``0)">
<summary>
Reads the 32-bit or 64-bit word `old` located at the address `address` in global or shared memory,
computes the maximum of `old` and `val`, and stores the result back to memory at the same address.
These three operations are performed in one atomic transaction. The function returns `old`.
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomicmax).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__atomic_min``1(Alea.CUDA.deviceptr{``0},``0)">
<summary>
Reads the 32-bit or 64-bit word `old` located at the address `address` in global or shared memory,
computes the minimum of `old` and `val`, and stores the result back to memory at the same address.
These three operations are performed in one atomic transaction. The function returns `old`.
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomicmin).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__atomic_exch``1(Alea.CUDA.deviceptr{``0},``0)">
<summary>
Reads the 32-bit or 64-bit word `old` located at the address `address` in global or shared memory
and stores `val` back to memory at the same address. These two operations are performed in one
atomic transaction. The function returns `old`.
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomicexch).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__atomic_sub``1(Alea.CUDA.deviceptr{``0},``0)">
<summary>
Reads the 32-bit or 64-bit word `old` located at the address `address` in global or shared memory,
computes `(old - val)`, and stores the result back to memory at the same address.
These three operations are performed in one atomic transaction. The function returns `old`.
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomicsub).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__atomic_add``1(Alea.CUDA.deviceptr{``0},``0)">
<summary>
Reads the 32-bit or 64-bit word `old` located at the address `address` in global or shared memory,
computes `(old + val)`, and stores the result back to memory at the same address.
These three operations are performed in one atomic transaction. The function returns `old`.
Read more at [here](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomicadd).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__warp_size">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__threadfence_system">
<summary>
Memory fence function. For more detail please reference [CUDA C Programming Guide](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#memory-fence-functions).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__threadfence">
<summary>
Memory fence function. For more detail please reference [CUDA C Programming Guide](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#memory-fence-functions).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__threadfence_block">
<summary>
Memory fence function. For more detail please reference [CUDA C Programming Guide](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#memory-fence-functions).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__syncthreads_or(System.Int32)">
<summary>
Identical to `__syncthreads()` with the additional feature that it evaluates predicate for all
threads of the block and returns non-zero if and only if predicate evaluates to non-zero for any of them.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__syncthreads_and(System.Int32)">
<summary>
Identical to `__syncthreads()` with the additional feature that it evaluates predicate for all
threads of the block and returns non-zero if and only if predicate evaluates to non-zero for all of them.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__syncthreads_count(System.Int32)">
<summary>
Identical to `__syncthreads()` with the additional feature that it evaluates predicate for all
threads of the block and returns the number of threads for which predicate evaluates to non-zero.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__syncthreads">
<summary>
Wait until all threads in the thread block have reached this pointer.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ref_reinterpret``2(Microsoft.FSharp.Core.FSharpRef{``0})">
<summary>
Reinterpret an F# `Ref&lt;&apos;T&gt;` to `Ref&lt;&apos;U&gt;`.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ref_volatile``1(Microsoft.FSharp.Core.FSharpRef{``0})">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__obj_reinterpret``2(``0)">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__obj_volatile``1(``0)">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__array_reinterpret``2(``0[])">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__array_volatile``1(``0[])">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ptr_reinterpret``2(Alea.CUDA.deviceptr{``0})">
<summary>
Reinterpret a `deviceptr&lt;&apos;T&gt;` to `deviceptr&lt;&apos;U&gt;`.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ptr_volatile``1(Alea.CUDA.deviceptr{``0})">
<summary>
Make a pointer volatile.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__obj_to_ref``1(``0)">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ref_to_obj``1(Microsoft.FSharp.Core.FSharpRef{``0})">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ptr_to_obj``1(Alea.CUDA.deviceptr{``0})">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__obj_to_ptr``1(``0)">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ptr_to_ref``1(Alea.CUDA.deviceptr{``0})">
<summary>
Transform a `deviceptr&lt;&apos;T&gt;` pointer to an F# `Ref&lt;&apos;T&gt;` object. An F# `Ref&lt;&apos;T&gt;`
object represents a non-indexable pointer in kernel quotations.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ref_to_ptr``1(Microsoft.FSharp.Core.FSharpRef{``0})">
<summary>
Transform an F# `Ref&lt;&apos;T&gt;` object to a `deviceptr&lt;&apos;T&gt;` pointer. An F# `Ref&lt;&apos;T&gt;`
object represents a non-indexable pointer in kernel quotations.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__array2D_to_ptr``1(``0[0:,0:])">
<summary>
Returns a pointer pointing to the first element of the given array.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__array_to_ptr``1(``0[])">
<summary>
Returns a pointer pointing to the first element of the given array.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__unbox``1(``0)">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__box``1(``0)">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__null``1">
<summary>
Returns a deviceptr of type `&apos;T` pointing to 0n, e.g., a null pointer.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__alignof``1">
<summary>
Returns the alignment of type `&apos;T`.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__sizeof``1">
<summary>
Returns the size of type `&apos;T`.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__eval``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
Evaluates a quotation expression.

#### Example

    [lang=fsharp]
    type MyFoo() =
        member this.Impl = &lt;@ fun a b -&gt; a + b @&gt;

        [&lt;ReflectedDefinition&gt;]
        member this.Foo = __eval(this.Impl)

</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__warpid">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__lanemask_ge">
<summary>
Returns the warp lane mask of all lanes greater than or equal to the calling thread.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__lanemask_gt">
<summary>
Returns the warp lane mask of all lanes greater than the calling thread.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__lanemask_le">
<summary>
Returns the warp lane mask of all lanes less than or equal to the calling thread.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__lanemask_lt">
<summary>
Returns the warp lane mask of all lanes less than the calling thread.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__laneid">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__linearbid">
<summary>
Returns linear block index in 3 dimensions.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__linearbid3">
<summary>
Returns linear block index in 3 dimensions.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__linearbid2">
<summary>
Returns linear block index in 2 dimensions.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__linearbid1">
<summary>
Returns linear block index in 1 dimension.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__lineartid">
<summary>
Returns linear thread index in 3 dimensions.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__lineartid3">
<summary>
Returns linear thread index in 3 dimensions.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__lineartid2">
<summary>
Returns linear thread index in 2 dimensions.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__lineartid1">
<summary>
Returns linear thread index in 1 dimension.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__unroll">
<summary>
A compile time directive indicating to the compiler that the following integer range 
loop can be unrolled. This function works _only_ with F# for loops in quotations
and the range _must_ be specified by a static constant.

#### Examples

    [lang=fsharp]
    __static_assert(__is_static_constant(steps))
    __unroll()
    for step = 0 to steps - 1 do
        let offset = 1 &lt;&lt;&lt; step
        __static_assert(__is_static_constant(offset))
            
        // Share input into buffer
        let reduce = tempStorage&apos;.Reduce |&gt; __array_to_ptr
        reduce.VolatileSet(laneId, input)

        // Update input if peerAddend is in range
        if offset &lt; (nextFlag - laneId) then
            let peerAddend = reduce.VolatileGet(laneId + offset)
            input &lt;- reductionOp input peerAddend
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__default_value``1">
<summary>
Returns a default value of type `&apos;T`.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__is_static_constant``1(``0)">
<summary>
Returns a static bool constant to indicate if the value is a static constant.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__static_assert(System.Boolean)">
<summary>
Assertion in kernel compile time. Parameter `pred` _must_ be a compile time constant.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__undef``1">
<summary>
Returns an undefined value of type `&apos;T`.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__debug``1(``0)">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Intrinsic.__lab">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.CUDA.Intrinsic">
<summary>
This module contains intrinsic functions for kernel writing,
such as `__syncthreads`, `__sizeof` and various converters.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMDIBuilderRef">
<summary>
 P/Invoke alias type `nativeint -&gt; LLVMDIBuilderRef`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMAtomicRMWBinOp">
<summary>
 P/Invoke alias type `__LLVMAtomicRMWBinOp__ -&gt; LLVMAtomicRMWBinOp`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LLVMInterop.__LLVMAtomicRMWBinOp__">
<summary>
 P/Invoke enum type `__LLVMAtomicRMWBinOp__` (11 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMAtomicOrdering">
<summary>
 P/Invoke alias type `__LLVMAtomicOrdering__ -&gt; LLVMAtomicOrdering`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LLVMInterop.__LLVMAtomicOrdering__">
<summary>
 P/Invoke enum type `__LLVMAtomicOrdering__` (7 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMThreadLocalMode">
<summary>
 P/Invoke alias type `__LLVMThreadLocalMode__ -&gt; LLVMThreadLocalMode`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LLVMInterop.__LLVMThreadLocalMode__">
<summary>
 P/Invoke enum type `__LLVMThreadLocalMode__` (5 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMLandingPadClauseTy">
<summary>
 P/Invoke alias type `__LLVMLandingPadClauseTy__ -&gt; LLVMLandingPadClauseTy`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LLVMInterop.__LLVMLandingPadClauseTy__">
<summary>
 P/Invoke enum type `__LLVMLandingPadClauseTy__` (2 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMRealPredicate">
<summary>
 P/Invoke alias type `__LLVMRealPredicate__ -&gt; LLVMRealPredicate`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LLVMInterop.__LLVMRealPredicate__">
<summary>
 P/Invoke enum type `__LLVMRealPredicate__` (16 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMIntPredicate">
<summary>
 P/Invoke alias type `__LLVMIntPredicate__ -&gt; LLVMIntPredicate`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LLVMInterop.__LLVMIntPredicate__">
<summary>
 P/Invoke enum type `__LLVMIntPredicate__` (10 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMCallConv">
<summary>
 P/Invoke alias type `__LLVMCallConv__ -&gt; LLVMCallConv`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LLVMInterop.__LLVMCallConv__">
<summary>
 P/Invoke enum type `__LLVMCallConv__` (7 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMVisibility">
<summary>
 P/Invoke alias type `__LLVMVisibility__ -&gt; LLVMVisibility`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LLVMInterop.__LLVMVisibility__">
<summary>
 P/Invoke enum type `__LLVMVisibility__` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMLinkage">
<summary>
 P/Invoke alias type `__LLVMLinkage__ -&gt; LLVMLinkage`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LLVMInterop.__LLVMLinkage__">
<summary>
 P/Invoke enum type `__LLVMLinkage__` (17 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMTypeKind">
<summary>
 P/Invoke alias type `__LLVMTypeKind__ -&gt; LLVMTypeKind`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LLVMInterop.__LLVMTypeKind__">
<summary>
 P/Invoke enum type `__LLVMTypeKind__` (16 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMOpcode">
<summary>
 P/Invoke alias type `__LLVMOpcode__ -&gt; LLVMOpcode`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LLVMInterop.__LLVMOpcode__">
<summary>
 P/Invoke enum type `__LLVMOpcode__` (59 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMAttribute">
<summary>
 P/Invoke alias type `__LLVMAttribute__ -&gt; LLVMAttribute`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LLVMInterop.__LLVMAttribute__">
<summary>
 P/Invoke enum type `__LLVMAttribute__` (26 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMUseRef">
<summary>
 P/Invoke alias type `nativeint -&gt; LLVMUseRef`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMPassRegistryRef">
<summary>
 P/Invoke alias type `nativeint -&gt; LLVMPassRegistryRef`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMPassManagerRef">
<summary>
 P/Invoke alias type `nativeint -&gt; LLVMPassManagerRef`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMMemoryBufferRef">
<summary>
 P/Invoke alias type `nativeint -&gt; LLVMMemoryBufferRef`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMModuleProviderRef">
<summary>
 P/Invoke alias type `nativeint -&gt; LLVMModuleProviderRef`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMBuilderRef">
<summary>
 P/Invoke alias type `nativeint -&gt; LLVMBuilderRef`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMBasicBlockRef">
<summary>
 P/Invoke alias type `nativeint -&gt; LLVMBasicBlockRef`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMValueRef">
<summary>
 P/Invoke alias type `nativeint -&gt; LLVMValueRef`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMTypeRef">
<summary>
 P/Invoke alias type `nativeint -&gt; LLVMTypeRef`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMModuleRef">
<summary>
 P/Invoke alias type `nativeint -&gt; LLVMModuleRef`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMContextRef">
<summary>
 P/Invoke alias type `nativeint -&gt; LLVMContextRef`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.LLVMBool">
<summary>
 P/Invoke alias type `int -&gt; LLVMBool`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.size_t">
<summary>
 P/Invoke alias type `nativeint -&gt; size_t`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.uint8_t">
<summary>
 P/Invoke alias type `uint8 -&gt; uint8_t`.
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop.uint64_t">
<summary>
 P/Invoke alias type `uint64 -&gt; uint64_t`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderNVVMCreateGlobalVariable(System.IntPtr,System.IntPtr,System.String,System.IntPtr,System.UInt32,System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMDIBuilderNVVMCreateGlobalVariable@LLVMDIBuilderNVVMCreateGlobalVariable`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderNVVMCreateGlobalVariable'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateMemberType(System.IntPtr,System.IntPtr,System.String,System.IntPtr,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateMemberType@LLVMDIBuilderCreateMemberType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateMemberType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateStructType(System.IntPtr,System.IntPtr,System.String,System.IntPtr,System.UInt32,System.UInt64,System.UInt64,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateStructType@LLVMDIBuilderCreateStructType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateStructType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateQualifiedType(System.IntPtr,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateQualifiedType@LLVMDIBuilderCreateQualifiedType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateQualifiedType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateReferenceType(System.IntPtr,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateReferenceType@LLVMDIBuilderCreateReferenceType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateReferenceType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderGetOrCreateSubrange(System.IntPtr,System.UInt64,System.UInt64)">
<summary>
 P/Invoke function for `LLVMDIBuilderGetOrCreateSubrange@LLVMDIBuilderGetOrCreateSubrange`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderGetOrCreateSubrange'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateArrayType(System.IntPtr,System.UInt64,System.UInt64,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateArrayType@LLVMDIBuilderCreateArrayType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateArrayType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateLexicalBlock(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateLexicalBlock@LLVMDIBuilderCreateLexicalBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateLexicalBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderInsertDeclareBeforeInstruction(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderInsertDeclareBeforeInstruction@LLVMDIBuilderInsertDeclareBeforeInstruction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderInsertDeclareBeforeInstruction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderInsertDeclareAtEndOfBasickBlock(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderInsertDeclareAtEndOfBasickBlock@LLVMDIBuilderInsertDeclareAtEndOfBasickBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderInsertDeclareAtEndOfBasickBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateStaticVariable(System.IntPtr,System.IntPtr,System.String,System.String,System.IntPtr,System.UInt32,System.IntPtr,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateStaticVariable@LLVMDIBuilderCreateStaticVariable`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateStaticVariable'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateGlobalVariable(System.IntPtr,System.String,System.IntPtr,System.UInt32,System.IntPtr,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateGlobalVariable@LLVMDIBuilderCreateGlobalVariable`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateGlobalVariable'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateLocalVariable(System.IntPtr,System.UInt32,System.IntPtr,System.String,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateLocalVariable@LLVMDIBuilderCreateLocalVariable`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateLocalVariable'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateFunction(System.IntPtr,System.IntPtr,System.String,System.String,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateFunction@LLVMDIBuilderCreateFunction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateSubroutineType(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateSubroutineType@LLVMDIBuilderCreateSubroutineType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateSubroutineType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderGetOrCreateArray(System.IntPtr,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMDIBuilderGetOrCreateArray@LLVMDIBuilderGetOrCreateArray`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderGetOrCreateArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreatePointerType(System.IntPtr,System.IntPtr,System.UInt64,System.UInt64)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreatePointerType@LLVMDIBuilderCreatePointerType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreatePointerType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateBasicType(System.IntPtr,System.String,System.UInt64,System.UInt64,System.UInt32)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateBasicType@LLVMDIBuilderCreateBasicType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateBasicType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateFile(System.IntPtr,System.String,System.String)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateFile@LLVMDIBuilderCreateFile`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateFile'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateCompileUnit(System.IntPtr,System.String,System.String)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateCompileUnit@LLVMDIBuilderCreateCompileUnit`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreateCompileUnit'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderDispose(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderDispose@LLVMDIBuilderDispose`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderDispose'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreate(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreate@LLVMDIBuilderCreate`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDIBuilderCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAddReturnAttr(System.IntPtr,Alea.CUDA.LLVMInterop.__LLVMAttribute__)">
<summary>
 P/Invoke function for `LLVMAddReturnAttr@LLVMAddReturnAttr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAddReturnAttr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAllocaInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAllocaInst@LLVMIsAllocaInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAllocaInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetAllocaAlign(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetAllocaAlign@LLVMGetAllocaAlign`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetAllocaAlign'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetAllocaAlign(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetAllocaAlign@LLVMSetAllocaAlign`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetAllocaAlign'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetStoreAlign(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetStoreAlign@LLVMGetStoreAlign`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetStoreAlign'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetStoreAlign(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetStoreAlign@LLVMSetStoreAlign`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetStoreAlign'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetLoadAlign(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetLoadAlign@LLVMGetLoadAlign`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetLoadAlign'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetLoadAlign(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetLoadAlign@LLVMSetLoadAlign`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetLoadAlign'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMWriteBitcodeToFileHandle(System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMWriteBitcodeToFileHandle@LLVMWriteBitcodeToFileHandle`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMWriteBitcodeToFileHandle'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMWriteBitcodeToFD(System.IntPtr,System.Int32,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `LLVMWriteBitcodeToFD@LLVMWriteBitcodeToFD`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMWriteBitcodeToFD'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMWriteBitcodeToFile(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMWriteBitcodeToFile@LLVMWriteBitcodeToFile`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMWriteBitcodeToFile'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsMultithreaded">
<summary>
 P/Invoke function for `LLVMIsMultithreaded@LLVMIsMultithreaded`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsMultithreaded'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMStopMultithreaded">
<summary>
 P/Invoke function for `LLVMStopMultithreaded@LLVMStopMultithreaded`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMStopMultithreaded'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMStartMultithreaded">
<summary>
 P/Invoke function for `LLVMStartMultithreaded@LLVMStartMultithreaded`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMStartMultithreaded'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDisposePassManager(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDisposePassManager@LLVMDisposePassManager`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDisposePassManager'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMFinalizeFunctionPassManager(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMFinalizeFunctionPassManager@LLVMFinalizeFunctionPassManager`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMFinalizeFunctionPassManager'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMRunFunctionPassManager(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMRunFunctionPassManager@LLVMRunFunctionPassManager`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMRunFunctionPassManager'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInitializeFunctionPassManager(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInitializeFunctionPassManager@LLVMInitializeFunctionPassManager`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInitializeFunctionPassManager'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMRunPassManager(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMRunPassManager@LLVMRunPassManager`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMRunPassManager'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCreateFunctionPassManager(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCreateFunctionPassManager@LLVMCreateFunctionPassManager`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCreateFunctionPassManager'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCreateFunctionPassManagerForModule(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCreateFunctionPassManagerForModule@LLVMCreateFunctionPassManagerForModule`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCreateFunctionPassManagerForModule'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCreatePassManager">
<summary>
 P/Invoke function for `LLVMCreatePassManager@LLVMCreatePassManager`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCreatePassManager'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetGlobalPassRegistry">
<summary>
 P/Invoke function for `LLVMGetGlobalPassRegistry@LLVMGetGlobalPassRegistry`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetGlobalPassRegistry'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDisposeMemoryBuffer(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDisposeMemoryBuffer@LLVMDisposeMemoryBuffer`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDisposeMemoryBuffer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetBufferSize(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetBufferSize@LLVMGetBufferSize`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetBufferSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetBufferStart(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetBufferStart@LLVMGetBufferStart`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetBufferStart'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCreateMemoryBufferWithMemoryRangeCopy(System.String,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMCreateMemoryBufferWithMemoryRangeCopy@LLVMCreateMemoryBufferWithMemoryRangeCopy`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCreateMemoryBufferWithMemoryRangeCopy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCreateMemoryBufferWithMemoryRange(System.String,System.IntPtr,System.String,System.Int32)">
<summary>
 P/Invoke function for `LLVMCreateMemoryBufferWithMemoryRange@LLVMCreateMemoryBufferWithMemoryRange`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCreateMemoryBufferWithMemoryRange'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCreateMemoryBufferWithSTDIN(System.IntPtr*,System.SByte**)">
<summary>
 P/Invoke function for `LLVMCreateMemoryBufferWithSTDIN@LLVMCreateMemoryBufferWithSTDIN`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCreateMemoryBufferWithSTDIN'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCreateMemoryBufferWithContentsOfFile(System.String,System.IntPtr*,System.SByte**)">
<summary>
 P/Invoke function for `LLVMCreateMemoryBufferWithContentsOfFile@LLVMCreateMemoryBufferWithContentsOfFile`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCreateMemoryBufferWithContentsOfFile'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDisposeModuleProvider(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDisposeModuleProvider@LLVMDisposeModuleProvider`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDisposeModuleProvider'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCreateModuleProviderForExistingModule(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCreateModuleProviderForExistingModule@LLVMCreateModuleProviderForExistingModule`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCreateModuleProviderForExistingModule'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildAtomicRMW(System.IntPtr,Alea.CUDA.LLVMInterop.__LLVMAtomicRMWBinOp__,System.IntPtr,System.IntPtr,Alea.CUDA.LLVMInterop.__LLVMAtomicOrdering__,System.Int32)">
<summary>
 P/Invoke function for `LLVMBuildAtomicRMW@LLVMBuildAtomicRMW`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildAtomicRMW'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildPtrDiff(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildPtrDiff@LLVMBuildPtrDiff`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildPtrDiff'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildIsNotNull(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildIsNotNull@LLVMBuildIsNotNull`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildIsNotNull'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildIsNull(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildIsNull@LLVMBuildIsNull`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildIsNull'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildInsertValue(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32,System.String)">
<summary>
 P/Invoke function for `LLVMBuildInsertValue@LLVMBuildInsertValue`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildInsertValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildExtractValue(System.IntPtr,System.IntPtr,System.UInt32,System.String)">
<summary>
 P/Invoke function for `LLVMBuildExtractValue@LLVMBuildExtractValue`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildExtractValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildShuffleVector(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildShuffleVector@LLVMBuildShuffleVector`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildShuffleVector'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildInsertElement(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildInsertElement@LLVMBuildInsertElement`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildInsertElement'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildExtractElement(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildExtractElement@LLVMBuildExtractElement`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildExtractElement'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildVAArg(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildVAArg@LLVMBuildVAArg`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildVAArg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildSelect(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildSelect@LLVMBuildSelect`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildSelect'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildCall(System.IntPtr,System.IntPtr,System.IntPtr*,System.UInt32,System.String)">
<summary>
 P/Invoke function for `LLVMBuildCall@LLVMBuildCall`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildCall'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildPhi(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildPhi@LLVMBuildPhi`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildPhi'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildFCmp(System.IntPtr,Alea.CUDA.LLVMInterop.__LLVMRealPredicate__,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFCmp@LLVMBuildFCmp`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildFCmp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildICmp(System.IntPtr,Alea.CUDA.LLVMInterop.__LLVMIntPredicate__,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildICmp@LLVMBuildICmp`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildICmp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildFPCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFPCast@LLVMBuildFPCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildFPCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildIntCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildIntCast@LLVMBuildIntCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildIntCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildPointerCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildPointerCast@LLVMBuildPointerCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildPointerCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildCast(System.IntPtr,Alea.CUDA.LLVMInterop.__LLVMOpcode__,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildCast@LLVMBuildCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildTruncOrBitCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildTruncOrBitCast@LLVMBuildTruncOrBitCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildTruncOrBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildSExtOrBitCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildSExtOrBitCast@LLVMBuildSExtOrBitCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildSExtOrBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildZExtOrBitCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildZExtOrBitCast@LLVMBuildZExtOrBitCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildZExtOrBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildAddrSpaceCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildAddrSpaceCast@LLVMBuildAddrSpaceCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildAddrSpaceCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildBitCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildBitCast@LLVMBuildBitCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildIntToPtr(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildIntToPtr@LLVMBuildIntToPtr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildIntToPtr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildPtrToInt(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildPtrToInt@LLVMBuildPtrToInt`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildPtrToInt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildFPExt(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFPExt@LLVMBuildFPExt`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildFPExt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildFPTrunc(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFPTrunc@LLVMBuildFPTrunc`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildFPTrunc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildSIToFP(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildSIToFP@LLVMBuildSIToFP`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildSIToFP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildUIToFP(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildUIToFP@LLVMBuildUIToFP`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildUIToFP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildFPToSI(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFPToSI@LLVMBuildFPToSI`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildFPToSI'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildFPToUI(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFPToUI@LLVMBuildFPToUI`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildFPToUI'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildSExt(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildSExt@LLVMBuildSExt`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildSExt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildZExt(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildZExt@LLVMBuildZExt`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildZExt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildTrunc(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildTrunc@LLVMBuildTrunc`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildTrunc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetVolatile(System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMSetVolatile@LLVMSetVolatile`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetVolatile'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetVolatile(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetVolatile@LLVMGetVolatile`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetVolatile'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildGlobalStringPtr(System.IntPtr,System.String,System.String)">
<summary>
 P/Invoke function for `LLVMBuildGlobalStringPtr@LLVMBuildGlobalStringPtr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildGlobalStringPtr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildGlobalString(System.IntPtr,System.String,System.String)">
<summary>
 P/Invoke function for `LLVMBuildGlobalString@LLVMBuildGlobalString`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildGlobalString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildStructGEP(System.IntPtr,System.IntPtr,System.UInt32,System.String)">
<summary>
 P/Invoke function for `LLVMBuildStructGEP@LLVMBuildStructGEP`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildStructGEP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildInBoundsGEP(System.IntPtr,System.IntPtr,System.IntPtr*,System.UInt32,System.String)">
<summary>
 P/Invoke function for `LLVMBuildInBoundsGEP@LLVMBuildInBoundsGEP`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildInBoundsGEP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildGEP(System.IntPtr,System.IntPtr,System.IntPtr*,System.UInt32,System.String)">
<summary>
 P/Invoke function for `LLVMBuildGEP@LLVMBuildGEP`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildGEP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildStore(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildStore@LLVMBuildStore`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildStore'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildLoad(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildLoad@LLVMBuildLoad`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildLoad'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildFree(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildFree@LLVMBuildFree`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildFree'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildArrayAlloca(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildArrayAlloca@LLVMBuildArrayAlloca`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildArrayAlloca'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildAlloca(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildAlloca@LLVMBuildAlloca`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildAlloca'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildArrayMalloc(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildArrayMalloc@LLVMBuildArrayMalloc`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildArrayMalloc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildMalloc(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildMalloc@LLVMBuildMalloc`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildMalloc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildNot(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNot@LLVMBuildNot`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildNot'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildFNeg(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFNeg@LLVMBuildFNeg`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildFNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildNUWNeg(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNUWNeg@LLVMBuildNUWNeg`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildNUWNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildNSWNeg(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNSWNeg@LLVMBuildNSWNeg`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildNSWNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildNeg(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNeg@LLVMBuildNeg`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildBinOp(System.IntPtr,Alea.CUDA.LLVMInterop.__LLVMOpcode__,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildBinOp@LLVMBuildBinOp`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildBinOp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildXor(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildXor@LLVMBuildXor`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildXor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildOr(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildOr@LLVMBuildOr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildOr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildAnd(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildAnd@LLVMBuildAnd`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildAnd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildAShr(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildAShr@LLVMBuildAShr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildAShr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildLShr(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildLShr@LLVMBuildLShr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildLShr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildShl(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildShl@LLVMBuildShl`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildShl'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildFRem(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFRem@LLVMBuildFRem`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildFRem'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildSRem(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildSRem@LLVMBuildSRem`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildSRem'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildURem(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildURem@LLVMBuildURem`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildURem'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildFDiv(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFDiv@LLVMBuildFDiv`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildFDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildExactSDiv(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildExactSDiv@LLVMBuildExactSDiv`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildExactSDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildSDiv(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildSDiv@LLVMBuildSDiv`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildSDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildUDiv(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildUDiv@LLVMBuildUDiv`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildUDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildFMul(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFMul@LLVMBuildFMul`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildFMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildNUWMul(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNUWMul@LLVMBuildNUWMul`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildNUWMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildNSWMul(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNSWMul@LLVMBuildNSWMul`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildNSWMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildMul(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildMul@LLVMBuildMul`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildFSub(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFSub@LLVMBuildFSub`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildFSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildNUWSub(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNUWSub@LLVMBuildNUWSub`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildNUWSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildNSWSub(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNSWSub@LLVMBuildNSWSub`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildNSWSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildSub(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildSub@LLVMBuildSub`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildFAdd(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFAdd@LLVMBuildFAdd`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildFAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildNUWAdd(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNUWAdd@LLVMBuildNUWAdd`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildNUWAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildNSWAdd(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNSWAdd@LLVMBuildNSWAdd`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildNSWAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildAdd(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildAdd@LLVMBuildAdd`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetCleanup(System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMSetCleanup@LLVMSetCleanup`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetCleanup'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAddClause(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMAddClause@LLVMAddClause`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAddClause'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAddDestination(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMAddDestination@LLVMAddDestination`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAddDestination'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAddCase(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMAddCase@LLVMAddCase`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAddCase'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildUnreachable(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildUnreachable@LLVMBuildUnreachable`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildUnreachable'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildResume(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildResume@LLVMBuildResume`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildResume'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildLandingPad(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32,System.String)">
<summary>
 P/Invoke function for `LLVMBuildLandingPad@LLVMBuildLandingPad`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildLandingPad'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildInvoke(System.IntPtr,System.IntPtr,System.IntPtr*,System.UInt32,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildInvoke@LLVMBuildInvoke`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildInvoke'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildIndirectBr(System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMBuildIndirectBr@LLVMBuildIndirectBr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildIndirectBr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildSwitch(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMBuildSwitch@LLVMBuildSwitch`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildSwitch'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildCondBr(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildCondBr@LLVMBuildCondBr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildCondBr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildBr(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildBr@LLVMBuildBr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildBr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildAggregateRet(System.IntPtr,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMBuildAggregateRet@LLVMBuildAggregateRet`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildAggregateRet'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildRet(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildRet@LLVMBuildRet`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildRet'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBuildRetVoid(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildRetVoid@LLVMBuildRetVoid`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBuildRetVoid'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetInstDebugLocation(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMSetInstDebugLocation@LLVMSetInstDebugLocation`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetInstDebugLocation'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetCurrentDebugLocation(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetCurrentDebugLocation@LLVMGetCurrentDebugLocation`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetCurrentDebugLocation'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetCurrentDebugLocation(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMSetCurrentDebugLocation@LLVMSetCurrentDebugLocation`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetCurrentDebugLocation'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDisposeBuilder(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDisposeBuilder@LLVMDisposeBuilder`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDisposeBuilder'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInsertIntoBuilderWithName(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMInsertIntoBuilderWithName@LLVMInsertIntoBuilderWithName`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInsertIntoBuilderWithName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInsertIntoBuilder(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInsertIntoBuilder@LLVMInsertIntoBuilder`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInsertIntoBuilder'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMClearInsertionPosition(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMClearInsertionPosition@LLVMClearInsertionPosition`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMClearInsertionPosition'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetInsertBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetInsertBlock@LLVMGetInsertBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetInsertBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMPositionBuilderAtEnd(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMPositionBuilderAtEnd@LLVMPositionBuilderAtEnd`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMPositionBuilderAtEnd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMPositionBuilderBefore(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMPositionBuilderBefore@LLVMPositionBuilderBefore`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMPositionBuilderBefore'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMPositionBuilder(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMPositionBuilder@LLVMPositionBuilder`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMPositionBuilder'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCreateBuilder">
<summary>
 P/Invoke function for `LLVMCreateBuilder@LLVMCreateBuilder`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCreateBuilder'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCreateBuilderInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCreateBuilderInContext@LLVMCreateBuilderInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCreateBuilderInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetIncomingBlock(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMGetIncomingBlock@LLVMGetIncomingBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetIncomingBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetIncomingValue(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMGetIncomingValue@LLVMGetIncomingValue`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetIncomingValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCountIncoming(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCountIncoming@LLVMCountIncoming`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCountIncoming'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAddIncoming(System.IntPtr,System.IntPtr*,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMAddIncoming@LLVMAddIncoming`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAddIncoming'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetSwitchDefaultDest(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetSwitchDefaultDest@LLVMGetSwitchDefaultDest`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetSwitchDefaultDest'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetTailCall(System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMSetTailCall@LLVMSetTailCall`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetTailCall'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsTailCall(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsTailCall@LLVMIsTailCall`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsTailCall'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetInstrParamAlignment(System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetInstrParamAlignment@LLVMSetInstrParamAlignment`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetInstrParamAlignment'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMRemoveInstrAttribute(System.IntPtr,System.UInt32,Alea.CUDA.LLVMInterop.__LLVMAttribute__)">
<summary>
 P/Invoke function for `LLVMRemoveInstrAttribute@LLVMRemoveInstrAttribute`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMRemoveInstrAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAddInstrAttribute(System.IntPtr,System.UInt32,Alea.CUDA.LLVMInterop.__LLVMAttribute__)">
<summary>
 P/Invoke function for `LLVMAddInstrAttribute@LLVMAddInstrAttribute`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAddInstrAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetInstructionCallConv(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetInstructionCallConv@LLVMGetInstructionCallConv`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetInstructionCallConv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetInstructionCallConv(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetInstructionCallConv@LLVMSetInstructionCallConv`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetInstructionCallConv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetICmpPredicate(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetICmpPredicate@LLVMGetICmpPredicate`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetICmpPredicate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetInstructionOpcode(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetInstructionOpcode@LLVMGetInstructionOpcode`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetInstructionOpcode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInstructionEraseFromParent(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInstructionEraseFromParent@LLVMInstructionEraseFromParent`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInstructionEraseFromParent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetPreviousInstruction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetPreviousInstruction@LLVMGetPreviousInstruction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetPreviousInstruction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetNextInstruction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetNextInstruction@LLVMGetNextInstruction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetNextInstruction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetInstructionParent(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetInstructionParent@LLVMGetInstructionParent`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetInstructionParent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetMetadata(System.IntPtr,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMSetMetadata@LLVMSetMetadata`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetMetadata'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetMetadata(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMGetMetadata@LLVMGetMetadata`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetMetadata'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMHasMetadata(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMHasMetadata@LLVMHasMetadata`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMHasMetadata'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetLastInstruction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetLastInstruction@LLVMGetLastInstruction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetLastInstruction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetFirstInstruction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFirstInstruction@LLVMGetFirstInstruction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetFirstInstruction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMMoveBasicBlockAfter(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMMoveBasicBlockAfter@LLVMMoveBasicBlockAfter`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMMoveBasicBlockAfter'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMMoveBasicBlockBefore(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMMoveBasicBlockBefore@LLVMMoveBasicBlockBefore`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMMoveBasicBlockBefore'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMRemoveBasicBlockFromParent(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMRemoveBasicBlockFromParent@LLVMRemoveBasicBlockFromParent`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMRemoveBasicBlockFromParent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDeleteBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDeleteBasicBlock@LLVMDeleteBasicBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDeleteBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInsertBasicBlock(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMInsertBasicBlock@LLVMInsertBasicBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInsertBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInsertBasicBlockInContext(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMInsertBasicBlockInContext@LLVMInsertBasicBlockInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInsertBasicBlockInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAppendBasicBlock(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMAppendBasicBlock@LLVMAppendBasicBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAppendBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAppendBasicBlockInContext(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMAppendBasicBlockInContext@LLVMAppendBasicBlockInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAppendBasicBlockInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetEntryBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetEntryBasicBlock@LLVMGetEntryBasicBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetEntryBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetPreviousBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetPreviousBasicBlock@LLVMGetPreviousBasicBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetPreviousBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetNextBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetNextBasicBlock@LLVMGetNextBasicBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetNextBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetLastBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetLastBasicBlock@LLVMGetLastBasicBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetLastBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetFirstBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFirstBasicBlock@LLVMGetFirstBasicBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetFirstBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetBasicBlocks(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `LLVMGetBasicBlocks@LLVMGetBasicBlocks`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetBasicBlocks'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCountBasicBlocks(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCountBasicBlocks@LLVMCountBasicBlocks`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCountBasicBlocks'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetBasicBlockTerminator(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetBasicBlockTerminator@LLVMGetBasicBlockTerminator`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetBasicBlockTerminator'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetBasicBlockParent(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetBasicBlockParent@LLVMGetBasicBlockParent`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetBasicBlockParent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMValueAsBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMValueAsBasicBlock@LLVMValueAsBasicBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMValueAsBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMValueIsBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMValueIsBasicBlock@LLVMValueIsBasicBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMValueIsBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBasicBlockAsValue(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBasicBlockAsValue@LLVMBasicBlockAsValue`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBasicBlockAsValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetMDNodeOperands(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `LLVMGetMDNodeOperands@LLVMGetMDNodeOperands`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetMDNodeOperands'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetMDNodeNumOperands(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetMDNodeNumOperands@LLVMGetMDNodeNumOperands`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetMDNodeNumOperands'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetMDString(System.IntPtr,System.UInt32*)">
<summary>
 P/Invoke function for `LLVMGetMDString@LLVMGetMDString`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetMDString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMMDNode(System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMMDNode@LLVMMDNode`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMMDNode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMMDNodeInContext(System.IntPtr,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMMDNodeInContext@LLVMMDNodeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMMDNodeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMMDString(System.String,System.UInt32)">
<summary>
 P/Invoke function for `LLVMMDString@LLVMMDString`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMMDString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMMDStringInContext(System.IntPtr,System.String,System.UInt32)">
<summary>
 P/Invoke function for `LLVMMDStringInContext@LLVMMDStringInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMMDStringInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetParamAlignment(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetParamAlignment@LLVMSetParamAlignment`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetParamAlignment'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetAttribute(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetAttribute@LLVMGetAttribute`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMRemoveAttribute(System.IntPtr,Alea.CUDA.LLVMInterop.__LLVMAttribute__)">
<summary>
 P/Invoke function for `LLVMRemoveAttribute@LLVMRemoveAttribute`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMRemoveAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAddAttribute(System.IntPtr,Alea.CUDA.LLVMInterop.__LLVMAttribute__)">
<summary>
 P/Invoke function for `LLVMAddAttribute@LLVMAddAttribute`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAddAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetPreviousParam(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetPreviousParam@LLVMGetPreviousParam`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetPreviousParam'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetNextParam(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetNextParam@LLVMGetNextParam`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetNextParam'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetLastParam(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetLastParam@LLVMGetLastParam`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetLastParam'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetFirstParam(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFirstParam@LLVMGetFirstParam`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetFirstParam'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetParamParent(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetParamParent@LLVMGetParamParent`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetParamParent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetParam(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMGetParam@LLVMGetParam`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetParam'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetParams(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `LLVMGetParams@LLVMGetParams`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetParams'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCountParams(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCountParams@LLVMCountParams`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCountParams'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMRemoveFunctionAttr(System.IntPtr,Alea.CUDA.LLVMInterop.__LLVMAttribute__)">
<summary>
 P/Invoke function for `LLVMRemoveFunctionAttr@LLVMRemoveFunctionAttr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMRemoveFunctionAttr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetFunctionAttr(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFunctionAttr@LLVMGetFunctionAttr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetFunctionAttr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAddTargetDependentFunctionAttr(System.IntPtr,System.String,System.String)">
<summary>
 P/Invoke function for `LLVMAddTargetDependentFunctionAttr@LLVMAddTargetDependentFunctionAttr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAddTargetDependentFunctionAttr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAddFunctionAttr(System.IntPtr,Alea.CUDA.LLVMInterop.__LLVMAttribute__)">
<summary>
 P/Invoke function for `LLVMAddFunctionAttr@LLVMAddFunctionAttr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAddFunctionAttr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetGC(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMSetGC@LLVMSetGC`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetGC'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetGC(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetGC@LLVMGetGC`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetGC'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetFunctionCallConv(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetFunctionCallConv@LLVMSetFunctionCallConv`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetFunctionCallConv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetFunctionCallConv(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFunctionCallConv@LLVMGetFunctionCallConv`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetFunctionCallConv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetIntrinsicID(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetIntrinsicID@LLVMGetIntrinsicID`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetIntrinsicID'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDeleteFunction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDeleteFunction@LLVMDeleteFunction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDeleteFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAddAlias(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMAddAlias@LLVMAddAlias`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAddAlias'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetExternallyInitialized(System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMSetExternallyInitialized@LLVMSetExternallyInitialized`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetExternallyInitialized'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsExternallyInitialized(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsExternallyInitialized@LLVMIsExternallyInitialized`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsExternallyInitialized'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetThreadLocalMode(System.IntPtr,Alea.CUDA.LLVMInterop.__LLVMThreadLocalMode__)">
<summary>
 P/Invoke function for `LLVMSetThreadLocalMode@LLVMSetThreadLocalMode`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetThreadLocalMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetThreadLocalMode(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetThreadLocalMode@LLVMGetThreadLocalMode`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetThreadLocalMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetGlobalConstant(System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMSetGlobalConstant@LLVMSetGlobalConstant`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetGlobalConstant'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsGlobalConstant(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsGlobalConstant@LLVMIsGlobalConstant`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsGlobalConstant'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetThreadLocal(System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMSetThreadLocal@LLVMSetThreadLocal`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetThreadLocal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsThreadLocal(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsThreadLocal@LLVMIsThreadLocal`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsThreadLocal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetInitializer(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMSetInitializer@LLVMSetInitializer`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetInitializer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetInitializer(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetInitializer@LLVMGetInitializer`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetInitializer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDeleteGlobal(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDeleteGlobal@LLVMDeleteGlobal`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDeleteGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetPreviousGlobal(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetPreviousGlobal@LLVMGetPreviousGlobal`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetPreviousGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetNextGlobal(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetNextGlobal@LLVMGetNextGlobal`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetNextGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetLastGlobal(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetLastGlobal@LLVMGetLastGlobal`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetLastGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetFirstGlobal(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFirstGlobal@LLVMGetFirstGlobal`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetFirstGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetNamedGlobal(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMGetNamedGlobal@LLVMGetNamedGlobal`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetNamedGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAddGlobalInAddressSpace(System.IntPtr,System.IntPtr,System.String,System.UInt32)">
<summary>
 P/Invoke function for `LLVMAddGlobalInAddressSpace@LLVMAddGlobalInAddressSpace`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAddGlobalInAddressSpace'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAddGlobal(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMAddGlobal@LLVMAddGlobal`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAddGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetAlignment(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetAlignment@LLVMSetAlignment`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetAlignment'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetAlignment(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetAlignment@LLVMGetAlignment`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetAlignment'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetVisibility(System.IntPtr,Alea.CUDA.LLVMInterop.__LLVMVisibility__)">
<summary>
 P/Invoke function for `LLVMSetVisibility@LLVMSetVisibility`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetVisibility'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetVisibility(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetVisibility@LLVMGetVisibility`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetVisibility'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetSection(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMSetSection@LLVMSetSection`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetSection'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetSection(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetSection@LLVMGetSection`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetSection'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetLinkage(System.IntPtr,Alea.CUDA.LLVMInterop.__LLVMLinkage__)">
<summary>
 P/Invoke function for `LLVMSetLinkage@LLVMSetLinkage`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetLinkage'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetLinkage(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetLinkage@LLVMGetLinkage`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetLinkage'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsDeclaration(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsDeclaration@LLVMIsDeclaration`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsDeclaration'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetGlobalParent(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetGlobalParent@LLVMGetGlobalParent`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetGlobalParent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMBlockAddress(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBlockAddress@LLVMBlockAddress`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMBlockAddress'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstInlineAsm(System.IntPtr,System.String,System.String,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `LLVMConstInlineAsm@LLVMConstInlineAsm`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstInlineAsm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstInsertValue(System.IntPtr,System.IntPtr,System.UInt32*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstInsertValue@LLVMConstInsertValue`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstInsertValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstExtractValue(System.IntPtr,System.UInt32*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstExtractValue@LLVMConstExtractValue`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstExtractValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstShuffleVector(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstShuffleVector@LLVMConstShuffleVector`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstShuffleVector'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstInsertElement(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstInsertElement@LLVMConstInsertElement`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstInsertElement'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstExtractElement(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstExtractElement@LLVMConstExtractElement`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstExtractElement'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstSelect(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstSelect@LLVMConstSelect`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstSelect'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstFPCast(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFPCast@LLVMConstFPCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstFPCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstIntCast(System.IntPtr,System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMConstIntCast@LLVMConstIntCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstIntCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstPointerCast(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstPointerCast@LLVMConstPointerCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstPointerCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstTruncOrBitCast(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstTruncOrBitCast@LLVMConstTruncOrBitCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstTruncOrBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstSExtOrBitCast(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstSExtOrBitCast@LLVMConstSExtOrBitCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstSExtOrBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstZExtOrBitCast(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstZExtOrBitCast@LLVMConstZExtOrBitCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstZExtOrBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstAddrSpaceCast(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstAddrSpaceCast@LLVMConstAddrSpaceCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstAddrSpaceCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstBitCast(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstBitCast@LLVMConstBitCast`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstIntToPtr(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstIntToPtr@LLVMConstIntToPtr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstIntToPtr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstPtrToInt(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstPtrToInt@LLVMConstPtrToInt`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstPtrToInt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstFPToSI(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFPToSI@LLVMConstFPToSI`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstFPToSI'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstFPToUI(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFPToUI@LLVMConstFPToUI`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstFPToUI'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstSIToFP(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstSIToFP@LLVMConstSIToFP`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstSIToFP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstUIToFP(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstUIToFP@LLVMConstUIToFP`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstUIToFP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstFPExt(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFPExt@LLVMConstFPExt`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstFPExt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstFPTrunc(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFPTrunc@LLVMConstFPTrunc`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstFPTrunc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstZExt(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstZExt@LLVMConstZExt`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstZExt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstSExt(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstSExt@LLVMConstSExt`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstSExt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstTrunc(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstTrunc@LLVMConstTrunc`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstTrunc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstInBoundsGEP(System.IntPtr,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstInBoundsGEP@LLVMConstInBoundsGEP`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstInBoundsGEP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstGEP(System.IntPtr,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstGEP@LLVMConstGEP`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstGEP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstAShr(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstAShr@LLVMConstAShr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstAShr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstLShr(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstLShr@LLVMConstLShr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstLShr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstShl(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstShl@LLVMConstShl`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstShl'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstFCmp(Alea.CUDA.LLVMInterop.__LLVMRealPredicate__,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFCmp@LLVMConstFCmp`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstFCmp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstICmp(Alea.CUDA.LLVMInterop.__LLVMIntPredicate__,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstICmp@LLVMConstICmp`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstICmp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstXor(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstXor@LLVMConstXor`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstXor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstOr(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstOr@LLVMConstOr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstOr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstAnd(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstAnd@LLVMConstAnd`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstAnd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstFRem(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFRem@LLVMConstFRem`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstFRem'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstSRem(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstSRem@LLVMConstSRem`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstSRem'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstURem(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstURem@LLVMConstURem`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstURem'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstFDiv(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFDiv@LLVMConstFDiv`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstFDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstExactSDiv(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstExactSDiv@LLVMConstExactSDiv`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstExactSDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstSDiv(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstSDiv@LLVMConstSDiv`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstSDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstUDiv(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstUDiv@LLVMConstUDiv`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstUDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstFMul(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFMul@LLVMConstFMul`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstFMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstNUWMul(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNUWMul@LLVMConstNUWMul`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstNUWMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstNSWMul(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNSWMul@LLVMConstNSWMul`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstNSWMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstMul(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstMul@LLVMConstMul`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstFSub(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFSub@LLVMConstFSub`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstFSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstNUWSub(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNUWSub@LLVMConstNUWSub`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstNUWSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstNSWSub(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNSWSub@LLVMConstNSWSub`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstNSWSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstSub(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstSub@LLVMConstSub`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstFAdd(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFAdd@LLVMConstFAdd`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstFAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstNUWAdd(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNUWAdd@LLVMConstNUWAdd`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstNUWAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstNSWAdd(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNSWAdd@LLVMConstNSWAdd`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstNSWAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstAdd(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstAdd@LLVMConstAdd`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstNot(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNot@LLVMConstNot`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstNot'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstFNeg(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFNeg@LLVMConstFNeg`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstFNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstNUWNeg(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNUWNeg@LLVMConstNUWNeg`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstNUWNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstNSWNeg(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNSWNeg@LLVMConstNSWNeg`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstNSWNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstNeg(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNeg@LLVMConstNeg`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSizeOf(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMSizeOf@LLVMSizeOf`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSizeOf'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAlignOf(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMAlignOf@LLVMAlignOf`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAlignOf'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetConstOpcode(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetConstOpcode@LLVMGetConstOpcode`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetConstOpcode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstVector(System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstVector@LLVMConstVector`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstVector'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstNamedStruct(System.IntPtr,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstNamedStruct@LLVMConstNamedStruct`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstNamedStruct'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstArray(System.IntPtr,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstArray@LLVMConstArray`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstStruct(System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMConstStruct@LLVMConstStruct`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstStruct'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstStructInContext(System.IntPtr,System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMConstStructInContext@LLVMConstStructInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstStructInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstString(System.String,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMConstString@LLVMConstString`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstStringInContext(System.IntPtr,System.String,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMConstStringInContext@LLVMConstStringInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstStringInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstIntGetSExtValue(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstIntGetSExtValue@LLVMConstIntGetSExtValue`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstIntGetSExtValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstIntGetZExtValue(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstIntGetZExtValue@LLVMConstIntGetZExtValue`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstIntGetZExtValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstRealOfStringAndSize(System.IntPtr,System.String,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstRealOfStringAndSize@LLVMConstRealOfStringAndSize`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstRealOfStringAndSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstRealOfString(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMConstRealOfString@LLVMConstRealOfString`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstRealOfString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstReal(System.IntPtr,System.Double)">
<summary>
 P/Invoke function for `LLVMConstReal@LLVMConstReal`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstReal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstIntOfStringAndSize(System.IntPtr,System.String,System.UInt32,System.Byte)">
<summary>
 P/Invoke function for `LLVMConstIntOfStringAndSize@LLVMConstIntOfStringAndSize`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstIntOfStringAndSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstIntOfString(System.IntPtr,System.String,System.Byte)">
<summary>
 P/Invoke function for `LLVMConstIntOfString@LLVMConstIntOfString`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstIntOfString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstIntOfArbitraryPrecision(System.IntPtr,System.UInt32,System.UInt64[])">
<summary>
 P/Invoke function for `LLVMConstIntOfArbitraryPrecision@LLVMConstIntOfArbitraryPrecision`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstIntOfArbitraryPrecision'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstInt(System.IntPtr,System.UInt64,System.Int32)">
<summary>
 P/Invoke function for `LLVMConstInt@LLVMConstInt`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstInt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstPointerNull(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstPointerNull@LLVMConstPointerNull`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstPointerNull'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsNull(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsNull@LLVMIsNull`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsNull'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetUndef(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetUndef@LLVMGetUndef`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetUndef'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstAllOnes(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstAllOnes@LLVMConstAllOnes`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstAllOnes'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMConstNull(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNull@LLVMConstNull`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMConstNull'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetNumOperands(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetNumOperands@LLVMGetNumOperands`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetNumOperands'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetOperand(System.IntPtr,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMSetOperand@LLVMSetOperand`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetOperand'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetOperand(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMGetOperand@LLVMGetOperand`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetOperand'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetUsedValue(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetUsedValue@LLVMGetUsedValue`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetUsedValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetUser(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetUser@LLVMGetUser`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetUser'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetNextUse(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetNextUse@LLVMGetNextUse`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetNextUse'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetFirstUse(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFirstUse@LLVMGetFirstUse`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetFirstUse'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAVAArgInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAVAArgInst@LLVMIsAVAArgInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAVAArgInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsALoadInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsALoadInst@LLVMIsALoadInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsALoadInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAExtractValueInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAExtractValueInst@LLVMIsAExtractValueInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAExtractValueInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAZExtInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAZExtInst@LLVMIsAZExtInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAZExtInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAUIToFPInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAUIToFPInst@LLVMIsAUIToFPInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAUIToFPInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsATruncInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsATruncInst@LLVMIsATruncInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsATruncInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsASIToFPInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsASIToFPInst@LLVMIsASIToFPInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsASIToFPInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsASExtInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsASExtInst@LLVMIsASExtInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsASExtInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAPtrToIntInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAPtrToIntInst@LLVMIsAPtrToIntInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAPtrToIntInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAIntToPtrInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAIntToPtrInst@LLVMIsAIntToPtrInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAIntToPtrInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAFPTruncInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAFPTruncInst@LLVMIsAFPTruncInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAFPTruncInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAFPToUIInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAFPToUIInst@LLVMIsAFPToUIInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAFPToUIInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAFPToSIInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAFPToSIInst@LLVMIsAFPToSIInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAFPToSIInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAFPExtInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAFPExtInst@LLVMIsAFPExtInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAFPExtInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsABitCastInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsABitCastInst@LLVMIsABitCastInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsABitCastInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAAddrSpaceCastInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAAddrSpaceCastInst@LLVMIsAAddrSpaceCastInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAAddrSpaceCastInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsACastInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsACastInst@LLVMIsACastInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsACastInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAAllocaInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAAllocaInst@LLVMIsAAllocaInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAAllocaInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAUnaryInstruction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAUnaryInstruction@LLVMIsAUnaryInstruction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAUnaryInstruction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAResumeInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAResumeInst@LLVMIsAResumeInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAResumeInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAUnreachableInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAUnreachableInst@LLVMIsAUnreachableInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAUnreachableInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsASwitchInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsASwitchInst@LLVMIsASwitchInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsASwitchInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAReturnInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAReturnInst@LLVMIsAReturnInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAReturnInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAInvokeInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAInvokeInst@LLVMIsAInvokeInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAInvokeInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAIndirectBrInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAIndirectBrInst@LLVMIsAIndirectBrInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAIndirectBrInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsABranchInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsABranchInst@LLVMIsABranchInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsABranchInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsATerminatorInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsATerminatorInst@LLVMIsATerminatorInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsATerminatorInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAStoreInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAStoreInst@LLVMIsAStoreInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAStoreInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAShuffleVectorInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAShuffleVectorInst@LLVMIsAShuffleVectorInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAShuffleVectorInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsASelectInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsASelectInst@LLVMIsASelectInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsASelectInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAPHINode(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAPHINode@LLVMIsAPHINode`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAPHINode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsALandingPadInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsALandingPadInst@LLVMIsALandingPadInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsALandingPadInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAInsertValueInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAInsertValueInst@LLVMIsAInsertValueInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAInsertValueInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAInsertElementInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAInsertElementInst@LLVMIsAInsertElementInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAInsertElementInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAGetElementPtrInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAGetElementPtrInst@LLVMIsAGetElementPtrInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAGetElementPtrInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAExtractElementInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAExtractElementInst@LLVMIsAExtractElementInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAExtractElementInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAICmpInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAICmpInst@LLVMIsAICmpInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAICmpInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAFCmpInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAFCmpInst@LLVMIsAFCmpInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAFCmpInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsACmpInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsACmpInst@LLVMIsACmpInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsACmpInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAMemSetInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAMemSetInst@LLVMIsAMemSetInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAMemSetInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAMemMoveInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAMemMoveInst@LLVMIsAMemMoveInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAMemMoveInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAMemCpyInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAMemCpyInst@LLVMIsAMemCpyInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAMemCpyInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAMemIntrinsic(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAMemIntrinsic@LLVMIsAMemIntrinsic`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAMemIntrinsic'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsADbgDeclareInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsADbgDeclareInst@LLVMIsADbgDeclareInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsADbgDeclareInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsADbgInfoIntrinsic(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsADbgInfoIntrinsic@LLVMIsADbgInfoIntrinsic`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsADbgInfoIntrinsic'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAIntrinsicInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAIntrinsicInst@LLVMIsAIntrinsicInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAIntrinsicInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsACallInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsACallInst@LLVMIsACallInst`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsACallInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsABinaryOperator(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsABinaryOperator@LLVMIsABinaryOperator`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsABinaryOperator'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAInstruction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAInstruction@LLVMIsAInstruction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAInstruction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAUndefValue(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAUndefValue@LLVMIsAUndefValue`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAUndefValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAGlobalVariable(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAGlobalVariable@LLVMIsAGlobalVariable`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAGlobalVariable'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAGlobalAlias(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAGlobalAlias@LLVMIsAGlobalAlias`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAGlobalAlias'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAFunction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAFunction@LLVMIsAFunction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAGlobalValue(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAGlobalValue@LLVMIsAGlobalValue`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAGlobalValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAConstantVector(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantVector@LLVMIsAConstantVector`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAConstantVector'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAConstantStruct(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantStruct@LLVMIsAConstantStruct`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAConstantStruct'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAConstantPointerNull(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantPointerNull@LLVMIsAConstantPointerNull`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAConstantPointerNull'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAConstantInt(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantInt@LLVMIsAConstantInt`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAConstantInt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAConstantFP(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantFP@LLVMIsAConstantFP`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAConstantFP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAConstantExpr(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantExpr@LLVMIsAConstantExpr`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAConstantExpr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAConstantDataVector(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantDataVector@LLVMIsAConstantDataVector`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAConstantDataVector'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAConstantDataArray(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantDataArray@LLVMIsAConstantDataArray`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAConstantDataArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAConstantDataSequential(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantDataSequential@LLVMIsAConstantDataSequential`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAConstantDataSequential'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAConstantArray(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantArray@LLVMIsAConstantArray`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAConstantArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAConstantAggregateZero(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantAggregateZero@LLVMIsAConstantAggregateZero`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAConstantAggregateZero'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsABlockAddress(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsABlockAddress@LLVMIsABlockAddress`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsABlockAddress'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAConstant(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstant@LLVMIsAConstant`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAConstant'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAUser(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAUser@LLVMIsAUser`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAUser'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAMDString(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAMDString@LLVMIsAMDString`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAMDString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAMDNode(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAMDNode@LLVMIsAMDNode`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAMDNode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAInlineAsm(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAInlineAsm@LLVMIsAInlineAsm`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAInlineAsm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsABasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsABasicBlock@LLVMIsABasicBlock`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsABasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsAArgument(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAArgument@LLVMIsAArgument`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsAArgument'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsUndef(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsUndef@LLVMIsUndef`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsUndef'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsConstant(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsConstant@LLVMIsConstant`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsConstant'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMReplaceAllUsesWith(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMReplaceAllUsesWith@LLVMReplaceAllUsesWith`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMReplaceAllUsesWith'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMPrintValueToString(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMPrintValueToString@LLVMPrintValueToString`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMPrintValueToString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDumpValue(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDumpValue@LLVMDumpValue`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDumpValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetValueName(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMSetValueName@LLVMSetValueName`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetValueName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetValueName(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetValueName@LLVMGetValueName`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetValueName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMTypeOf(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMTypeOf@LLVMTypeOf`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMTypeOf'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMX86MMXType">
<summary>
 P/Invoke function for `LLVMX86MMXType@LLVMX86MMXType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMX86MMXType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMLabelType">
<summary>
 P/Invoke function for `LLVMLabelType@LLVMLabelType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMLabelType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMVoidType">
<summary>
 P/Invoke function for `LLVMVoidType@LLVMVoidType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMVoidType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMX86MMXTypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMX86MMXTypeInContext@LLVMX86MMXTypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMX86MMXTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMLabelTypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMLabelTypeInContext@LLVMLabelTypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMLabelTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMVoidTypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMVoidTypeInContext@LLVMVoidTypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMVoidTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetVectorSize(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetVectorSize@LLVMGetVectorSize`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetVectorSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMVectorType(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMVectorType@LLVMVectorType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMVectorType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetPointerAddressSpace(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetPointerAddressSpace@LLVMGetPointerAddressSpace`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetPointerAddressSpace'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMPointerType(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMPointerType@LLVMPointerType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMPointerType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetArrayLength(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetArrayLength@LLVMGetArrayLength`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetArrayLength'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMArrayType(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMArrayType@LLVMArrayType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMArrayType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetElementType(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetElementType@LLVMGetElementType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetElementType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsOpaqueStruct(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsOpaqueStruct@LLVMIsOpaqueStruct`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsOpaqueStruct'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsPackedStruct(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsPackedStruct@LLVMIsPackedStruct`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsPackedStruct'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetStructElementTypes(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `LLVMGetStructElementTypes@LLVMGetStructElementTypes`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetStructElementTypes'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCountStructElementTypes(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCountStructElementTypes@LLVMCountStructElementTypes`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCountStructElementTypes'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMStructSetBody(System.IntPtr,System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMStructSetBody@LLVMStructSetBody`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMStructSetBody'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetStructName(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetStructName@LLVMGetStructName`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetStructName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMStructCreateNamed(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMStructCreateNamed@LLVMStructCreateNamed`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMStructCreateNamed'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMStructType(System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMStructType@LLVMStructType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMStructType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMStructTypeInContext(System.IntPtr,System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMStructTypeInContext@LLVMStructTypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMStructTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetParamTypes(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `LLVMGetParamTypes@LLVMGetParamTypes`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetParamTypes'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCountParamTypes(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCountParamTypes@LLVMCountParamTypes`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCountParamTypes'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetReturnType(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetReturnType@LLVMGetReturnType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetReturnType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIsFunctionVarArg(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsFunctionVarArg@LLVMIsFunctionVarArg`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIsFunctionVarArg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMFunctionType(System.IntPtr,System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMFunctionType@LLVMFunctionType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMFunctionType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMPPCFP128Type">
<summary>
 P/Invoke function for `LLVMPPCFP128Type@LLVMPPCFP128Type`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMPPCFP128Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMFP128Type">
<summary>
 P/Invoke function for `LLVMFP128Type@LLVMFP128Type`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMFP128Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMX86FP80Type">
<summary>
 P/Invoke function for `LLVMX86FP80Type@LLVMX86FP80Type`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMX86FP80Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDoubleType">
<summary>
 P/Invoke function for `LLVMDoubleType@LLVMDoubleType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDoubleType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMFloatType">
<summary>
 P/Invoke function for `LLVMFloatType@LLVMFloatType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMFloatType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMHalfType">
<summary>
 P/Invoke function for `LLVMHalfType@LLVMHalfType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMHalfType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMPPCFP128TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMPPCFP128TypeInContext@LLVMPPCFP128TypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMPPCFP128TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMFP128TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMFP128TypeInContext@LLVMFP128TypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMFP128TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMX86FP80TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMX86FP80TypeInContext@LLVMX86FP80TypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMX86FP80TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDoubleTypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDoubleTypeInContext@LLVMDoubleTypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDoubleTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMFloatTypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMFloatTypeInContext@LLVMFloatTypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMFloatTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMHalfTypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMHalfTypeInContext@LLVMHalfTypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMHalfTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetIntTypeWidth(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetIntTypeWidth@LLVMGetIntTypeWidth`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetIntTypeWidth'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIntType(System.UInt32)">
<summary>
 P/Invoke function for `LLVMIntType@LLVMIntType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIntType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInt64Type">
<summary>
 P/Invoke function for `LLVMInt64Type@LLVMInt64Type`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInt64Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInt32Type">
<summary>
 P/Invoke function for `LLVMInt32Type@LLVMInt32Type`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInt32Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInt16Type">
<summary>
 P/Invoke function for `LLVMInt16Type@LLVMInt16Type`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInt16Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInt8Type">
<summary>
 P/Invoke function for `LLVMInt8Type@LLVMInt8Type`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInt8Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInt1Type">
<summary>
 P/Invoke function for `LLVMInt1Type@LLVMInt1Type`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInt1Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMIntTypeInContext(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMIntTypeInContext@LLVMIntTypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMIntTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInt64TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInt64TypeInContext@LLVMInt64TypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInt64TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInt32TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInt32TypeInContext@LLVMInt32TypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInt32TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInt16TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInt16TypeInContext@LLVMInt16TypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInt16TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInt8TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInt8TypeInContext@LLVMInt8TypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInt8TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInt1TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInt1TypeInContext@LLVMInt1TypeInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInt1TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMPrintTypeToString(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMPrintTypeToString@LLVMPrintTypeToString`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMPrintTypeToString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDumpType(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDumpType@LLVMDumpType`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDumpType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetTypeContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetTypeContext@LLVMGetTypeContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetTypeContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMTypeIsSized(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMTypeIsSized@LLVMTypeIsSized`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMTypeIsSized'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetTypeKind(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetTypeKind@LLVMGetTypeKind`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetTypeKind'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetPreviousFunction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetPreviousFunction@LLVMGetPreviousFunction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetPreviousFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetNextFunction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetNextFunction@LLVMGetNextFunction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetNextFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetLastFunction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetLastFunction@LLVMGetLastFunction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetLastFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetFirstFunction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFirstFunction@LLVMGetFirstFunction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetFirstFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetNamedFunction(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMGetNamedFunction@LLVMGetNamedFunction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetNamedFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAddFunction(System.IntPtr,System.String,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMAddFunction@LLVMAddFunction`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAddFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMAddNamedMetadataOperand(System.IntPtr,System.String,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMAddNamedMetadataOperand@LLVMAddNamedMetadataOperand`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMAddNamedMetadataOperand'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetNamedMetadataOperands(System.IntPtr,System.String,System.IntPtr*)">
<summary>
 P/Invoke function for `LLVMGetNamedMetadataOperands@LLVMGetNamedMetadataOperands`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetNamedMetadataOperands'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetNamedMetadataNumOperands(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMGetNamedMetadataNumOperands@LLVMGetNamedMetadataNumOperands`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetNamedMetadataNumOperands'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetTypeByName(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMGetTypeByName@LLVMGetTypeByName`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetTypeByName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetModuleContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetModuleContext@LLVMGetModuleContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetModuleContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetModuleInlineAsm(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMSetModuleInlineAsm@LLVMSetModuleInlineAsm`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetModuleInlineAsm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMPrintModuleToString(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMPrintModuleToString@LLVMPrintModuleToString`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMPrintModuleToString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMPrintModuleToFile(System.IntPtr,System.String,System.SByte**)">
<summary>
 P/Invoke function for `LLVMPrintModuleToFile@LLVMPrintModuleToFile`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMPrintModuleToFile'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDumpModule(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDumpModule@LLVMDumpModule`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDumpModule'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetTarget(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMSetTarget@LLVMSetTarget`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetTarget'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetTarget(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetTarget@LLVMGetTarget`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetTarget'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMSetDataLayout(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMSetDataLayout@LLVMSetDataLayout`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMSetDataLayout'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetDataLayout(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetDataLayout@LLVMGetDataLayout`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetDataLayout'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDisposeModule(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDisposeModule@LLVMDisposeModule`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDisposeModule'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMModuleCreateWithNameInContext(System.String,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMModuleCreateWithNameInContext@LLVMModuleCreateWithNameInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMModuleCreateWithNameInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMModuleCreateWithName(System.String)">
<summary>
 P/Invoke function for `LLVMModuleCreateWithName@LLVMModuleCreateWithName`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMModuleCreateWithName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetMDKindID(System.String,System.UInt32)">
<summary>
 P/Invoke function for `LLVMGetMDKindID@LLVMGetMDKindID`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetMDKindID'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetMDKindIDInContext(System.IntPtr,System.String,System.UInt32)">
<summary>
 P/Invoke function for `LLVMGetMDKindIDInContext@LLVMGetMDKindIDInContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetMDKindIDInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMContextDispose(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMContextDispose@LLVMContextDispose`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMContextDispose'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMGetGlobalContext">
<summary>
 P/Invoke function for `LLVMGetGlobalContext@LLVMGetGlobalContext`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMGetGlobalContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMContextCreate">
<summary>
 P/Invoke function for `LLVMContextCreate@LLVMContextCreate`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMContextCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMEnablePrettyStackTrace">
<summary>
 P/Invoke function for `LLVMEnablePrettyStackTrace@LLVMEnablePrettyStackTrace`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMEnablePrettyStackTrace'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMResetFatalErrorHandler">
<summary>
 P/Invoke function for `LLVMResetFatalErrorHandler@LLVMResetFatalErrorHandler`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMResetFatalErrorHandler'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMDisposeMessage(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDisposeMessage@LLVMDisposeMessage`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMDisposeMessage'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMCreateMessage(System.String)">
<summary>
 P/Invoke function for `LLVMCreateMessage@LLVMCreateMessage`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMCreateMessage'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMShutdown">
<summary>
 P/Invoke function for `LLVMShutdown@LLVMShutdown`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMShutdown'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.LLVMInterop.LLVMInitializeCore(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInitializeCore@LLVMInitializeCore`.
</summary>
</member>
<member name="P:Alea.CUDA.LLVMInterop.LLVMInitializeCore'">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.LLVMInterop">
<summary>
 Raw P/Invoke types and functions for LLVM.
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ynf(System.Int32,System.Single)">
<summary>
Calculate the value of the Bessel function of the second kind of order n for the input argument $x$. 

See [3.319.\_\_nv\_ynf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ynf.html#__nv_ynf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_yn(System.Int32,System.Double)">
<summary>
Calculate the value of the Bessel function of the second kind of order n for the input argument $x$. 

See [3.318.\_\_nv\_yn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_yn.html#__nv_yn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_y1f(System.Single)">
<summary>
Calculate the value of the Bessel function of the second kind of order 1 for the input argument $x$. 

See [3.317.\_\_nv\_y1f](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_y1f.html#__nv_y1f)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_y1(System.Double)">
<summary>
Calculate the value of the Bessel function of the second kind of order 1 for the input argument $x$. 

See [3.316.\_\_nv\_y1](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_y1.html#__nv_y1)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_y0f(System.Single)">
<summary>
Calculate the value of the Bessel function of the second kind of order 0 for the input argument $x$.

See [3.315.\_\_nv\_y0f](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_y0f.html#__nv_y0f)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_y0(System.Double)">
<summary>
Calculate the value of the Bessel function of the second kind of order 0 for the input argument $x$. 

See [3.314.\_\_nv\_y0](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_y0.html#__nv_y0)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_usad(System.UInt32,System.UInt32,System.UInt32)">
<summary>
Calculate , the 32-bit sum of the third argument z plus and the absolute value of the difference between the first argument, x, and second argument, y. Inputs x, y, and z are unsigned 32-bit integers. 

See [3.313.\_\_nv\_usad](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_usad.html#__nv_usad)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_urhadd(System.UInt32,System.UInt32)">
<summary>
Compute average of unsigned input arguments $x$ and $y$ as ( x + y + 1 ) &gt;&gt; 1, avoiding overflow in the intermediate sum. 

See [3.312.\_\_nv\_urhadd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_urhadd.html#__nv_urhadd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_umulhi(System.UInt32,System.UInt32)">
<summary>
Calculate the most significant 32 bits of the 64-bit product x * y, where $x$ and $y$ are 32-bit unsigned integers. 

See [3.311.\_\_nv\_umulhi](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_umulhi.html#__nv_umulhi)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_umul64hi(System.UInt64,System.UInt64)">
<summary>
Calculate the most significant 64 bits of the 128-bit product x * y, where $x$ and $y$ are 64- bit unsigned integers. 

See [3.310.\_\_nv\_umul64hi](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_umul64hi.html#__nv_umul64hi)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_umul24(System.UInt32,System.UInt32)">
<summary>
Calculate the least significant 32 bits of the product of the least significant 24 bits of $x$ and $y$. The high order 8 bits of $x$ and $y$ are ignored. 

See [3.309.\_\_nv\_umul24](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_umul24.html#__nv_umul24)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_umin(System.UInt32,System.UInt32)">
<summary>
Determine the minimum value of the two 32-bit unsigned integers $x$ and $y$. 

See [3.308.\_\_nv\_umin](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_umin.html#__nv_umin)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_umax(System.UInt32,System.UInt32)">
<summary>
Determine the maximum value of the two 32-bit unsigned integers $x$ and $y$. 

See [3.307.\_\_nv\_umax](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_umax.html#__nv_umax)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ullmin(System.UInt64,System.UInt64)">
<summary>
Determine the minimum value of the two 64-bit unsigned integers $x$ and $y$. 

See [3.306.\_\_nv\_ullmin](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ullmin.html#__nv_ullmin)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ullmax(System.UInt64,System.UInt64)">
<summary>
Determine the maximum value of the two 64-bit unsigned integers $x$ and $y$. 

See [3.305.\_\_nv\_ullmax](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ullmax.html#__nv_ullmax)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ull2float_rz(System.UInt64)">
<summary>
Convert the unsigned integer value $x$ to a single-precision floating point value in round-towards-zero mode. 

See [3.304.\_\_nv\_ull2floa\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2float_rz.html#__nv_ull2float_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ull2float_ru(System.UInt64)">
<summary>
Convert the unsigned integer value $x$ to a single-precision floating point value in roundup (to positive infinity) mode. 

See [3.303.\_\_nv\_ull2float\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2float_ru.html#__nv_ull2float_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ull2float_rn(System.UInt64)">
<summary>
Convert the unsigned integer value $x$ to a single-precision floating point value in round-to-nearest-even mode. 

See [3.302.\_\_nv\_ull2float\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2float_rn.html#__nv_ull2float_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ull2float_rd(System.UInt64)">
<summary>
Convert the unsigned integer value $x$ to a single-precision floating point value in round-down (to negative infinity) mode. 

See [3.301.\_\_nv\_ull2float\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2float_rd.html#__nv_ull2float_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ull2double_rz(System.UInt64)">
<summary>
Convert the unsigned 64-bit integer value $x$ to a double-precision floating point value in round-towards-zero mode. 

See [3.300.\_\_nv\_ull2doubl\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2double_rz.html#__nv_ull2double_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ull2double_ru(System.UInt64)">
<summary>
Convert the unsigned 64-bit integer value $x$ to a double-precision floating point value in round-up (to positive infinity) mode. 

See [3.299.\_\_nv\_ull2double\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2double_ru.html#__nv_ull2double_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ull2double_rn(System.UInt64)">
<summary>
Convert the unsigned 64-bit integer value $x$ to a double-precision floating point value in round-to-nearest-even mode. 

See [3.298.\_\_nv\_ull2double\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2double_rn.html#__nv_ull2double_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ull2double_rd(System.UInt64)">
<summary>
Convert the unsigned 64-bit integer value $x$ to a double-precision floating point value in round-down (to negative infinity) mode. 

See [3.297.\_\_nv\_ull2double\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2double_rd.html#__nv_ull2double_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_uint2float_rz(System.UInt32)">
<summary>
Convert the unsigned integer value $x$ to a single-precision floating point value in round-towards-zero mode. 

See [3.296.\_\_nv\_uint2floa\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_uint2float_rz.html#__nv_uint2float_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_uint2float_ru(System.UInt32)">
<summary>
Convert the unsigned integer value $x$ to a single-precision floating point value in roundup (to positive infinity) mode. 

See [3.295.\_\_nv\_uint2float\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_uint2float_ru.html#__nv_uint2float_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_uint2float_rn(System.UInt32)">
<summary>
Convert the unsigned integer value $x$ to a single-precision floating point value in round-to-nearest-even mode. 

See [3.294.\_\_nv\_uint2float\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_uint2float_rn.html#__nv_uint2float_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_uint2float_rd(System.UInt32)">
<summary>
Convert the unsigned integer value $x$ to a single-precision floating point value in round-down (to negative infinity) mode. 

See [3.293.\_\_nv\_uint2float\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_uint2float_rd.html#__nv_uint2float_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_uint2double_rn(System.UInt32)">
<summary>
Convert the unsigned integer value $x$ to a double-precision floating point value. 

See [3.292.\_\_nv\_uint2double\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_uint2double_rn.html#__nv_uint2double_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_uhadd(System.UInt32,System.UInt32)">
<summary>
Compute average of unsigned input arguments $x$ and $y$ as ( x + y ) &gt;&gt; 1, avoiding overflow in the intermediate sum. 

See [3.291.\_\_nv\_uhadd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_uhadd.html#__nv_uhadd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_truncf(System.Single)">
<summary>
Round x to the nearest integer value that does not exceed x in magnitude. 

See [3.290.\_\_nv\_truncf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_truncf.html#__nv_truncf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_trunc(System.Double)">
<summary>
Round x to the nearest integer value that does not exceed x in magnitude. 

See [3.289.\_\_nv\_trunc](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_trunc.html#__nv_trunc)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_tgammaf(System.Single)">
<summary>
Calculate the gamma function of the input argument $x$, namely the value of . 

See [3.288.\_\_nv\_tgammaf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_tgammaf.html#__nv_tgammaf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_tgamma(System.Double)">
<summary>
Calculate the gamma function of the input argument $x$, namely the value of . 

See [3.287.\_\_nv\_tgamma](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_tgamma.html#__nv_tgamma)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_tanhf(System.Single)">
<summary>
Calculate the hyperbolic tangent of the input argument $x$. 

See [3.286.\_\_nv\_tanhf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_tanhf.html#__nv_tanhf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_tanh(System.Double)">
<summary>
Calculate the hyperbolic tangent of the input argument $x$. 

See [3.285.\_\_nv\_tanh](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_tanh.html#__nv_tanh)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_tanf(System.Single)">
<summary>
Calculate the tangent of the input argument $x$ (measured in radians). 

See [3.284.\_\_nv\_tanf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_tanf.html#__nv_tanf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_tan(System.Double)">
<summary>
Calculate the tangent of the input argument $x$ (measured in radians). 

See [3.283.\_\_nv\_tan](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_tan.html#__nv_tan)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_sqrtf(System.Single)">
<summary>
Calculate the nonnegative square root of $x$.

See [3.282.\_\_nv\_sqrtf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sqrtf.html#__nv_sqrtf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_sqrt(System.Double)">
<summary>
Calculate the nonnegative square root of $x$.

See [3.281.\_\_nv\_sqrt](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sqrt.html#__nv_sqrt)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_sinpif(System.Single)">
<summary>
Calculate the sine of $x$ (measured in radians), where x is the input argument. 

See [3.280.\_\_nv\_sinpif](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sinpif.html#__nv_sinpif)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_sinpi(System.Double)">
<summary>
Calculate the sine of $x$ (measured in radians), where x is the input argument. 

See [3.279.\_\_nv\_sinpi](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sinpi.html#__nv_sinpi)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_sinhf(System.Single)">
<summary>
Calculate the hyperbolic sine of the input argument $x$. 

See [3.278.\_\_nv\_sinhf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sinhf.html#__nv_sinhf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_sinh(System.Double)">
<summary>
Calculate the hyperbolic sine of the input argument $x$. 

See [3.277.\_\_nv\_sinh](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sinh.html#__nv_sinh)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_sinf(System.Single)">
<summary>
Calculate the sine of the input argument $x$ (measured in radians). 

See [3.276.\_\_nv\_sinf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sinf.html#__nv_sinf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_sincospif(System.Single,Microsoft.FSharp.Core.FSharpRef{System.Single},Microsoft.FSharp.Core.FSharpRef{System.Single})">
<summary>
Calculate the sine and cosine of the first input argument, x (measured in radians). The results for sine and cosine are written into the second argument, sptr, and, respectively, third argument, zptr. 

See [3.275.\_\_nv\_sincospif](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sincospif.html#__nv_sincospif)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_sincospi(System.Double,Microsoft.FSharp.Core.FSharpRef{System.Double},Microsoft.FSharp.Core.FSharpRef{System.Double})">
<summary>
Calculate the sine and cosine of the first input argument, x (measured in radians). The results for sine and cosine are written into the second argument, sptr, and, respectively, third argument, zptr. 

See [3.274.\_\_nv\_sincospi](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sincospi.html#__nv_sincospi)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_sincosf(System.Single,Microsoft.FSharp.Core.FSharpRef{System.Single},Microsoft.FSharp.Core.FSharpRef{System.Single})">
<summary>
Calculate the sine and cosine of the first input argument $x$ (measured in radians). The results for sine and cosine are written into the second argument, sptr, and, respectively, third argument, zptr. 

See [3.273.\_\_nv\_sincosf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sincosf.html#__nv_sincosf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_sincos(System.Double,Microsoft.FSharp.Core.FSharpRef{System.Double},Microsoft.FSharp.Core.FSharpRef{System.Double})">
<summary>
Calculate the sine and cosine of the first input argument $x$ (measured in radians). The results for sine and cosine are written into the second argument, sptr, and, respectively, third argument, zptr. 

See [3.272.\_\_nv\_sincos](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sincos.html#__nv_sincos)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_sin(System.Double)">
<summary>
Calculate the sine of the input argument $x$ (measured in radians). 

See [3.271.\_\_nv\_sin](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sin.html#__nv_sin)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_signbitf(System.Single)">
<summary>
Determine whether the floating-point value $x$ is negative. 

See [3.270.\_\_nv\_signbitf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_signbitf.html#__nv_signbitf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_signbitd(System.Double)">
<summary>
Determine whether the floating-point value $x$ is negative. 

See [3.269.\_\_nv\_signbitd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_signbitd.html#__nv_signbitd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_scalbnf(System.Single,System.Int32)">
<summary>
Scale x by efficient manipulation of the floating-point exponent. 

See [3.268.\_\_nv\_scalbnf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_scalbnf.html#__nv_scalbnf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_scalbn(System.Double,System.Int32)">
<summary>
Scale x by efficient manipulation of the floating-point exponent. 

See [3.267.\_\_nv\_scalbn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_scalbn.html#__nv_scalbn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_saturatef(System.Single)">
<summary>
Clamp the input argument $x$ to be within the interval [+0.0, 1.0]. 

See [3.266.\_\_nv\_saturatef](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_saturatef.html#__nv_saturatef)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_sad(System.Int32,System.Int32,System.Int32)">
<summary>
Calculate , the 32-bit sum of the third argument z plus and the absolute value of the difference between the first argument, x, and second argument, y. Inputs $x$ and $y$ are signed 32-bit integers, input z is a 32-bit unsigned integer. 

See [3.265.\_\_nv\_sad](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sad.html#__nv_sad)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_rsqrtf(System.Single)">
<summary>
Calculate the reciprocal of the nonnegative square root of $x$.

See [3.264.\_\_nv\_rsqrtf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rsqrtf.html#__nv_rsqrtf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_rsqrt(System.Double)">
<summary>
Calculate the reciprocal of the nonnegative square root of $x$.

See [3.263.\_\_nv\_rsqrt](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rsqrt.html#__nv_rsqrt)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_roundf(System.Single)">
<summary>
Round x to the nearest integer value in floating-point format, with halfway cases rounded away from zero. 

See [3.262.\_\_nv\_roundf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_roundf.html#__nv_roundf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_round(System.Double)">
<summary>
Round x to the nearest integer value in floating-point format, with halfway cases rounded away from zero. 

See [3.261.\_\_nv\_round](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_round.html#__nv_round)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_rintf(System.Single)">
<summary>
Round x to the nearest integer value in floating-point format, with halfway cases rounded to the nearest even integer value. 

See [3.260.\_\_nv\_rintf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rintf.html#__nv_rintf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_rint(System.Double)">
<summary>
Round x to the nearest integer value in floating-point format, with halfway cases rounded to the nearest even integer value. 

See [3.259.\_\_nv\_rint](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rint.html#__nv_rint)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_rhadd(System.Int32,System.Int32)">
<summary>
Compute average of signed input arguments $x$ and $y$ as ( x + y + 1 ) &gt;&gt; 1, avoiding overflow in the intermediate sum. 

See [3.258.\_\_nv\_rhadd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rhadd.html#__nv_rhadd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_remquof(System.Single,System.Single,Microsoft.FSharp.Core.FSharpRef{System.Int32})">
<summary>
Compute a double-precision floating-point remainder in the same way as the remainder() function. Argument quo returns part of quotient upon division of $x$ by y. Value quo has the same sign as and may not be the exact quotient but agrees with the exact quotient in the low order 3 bits. 

See [3.257.\_\_nv\_remquof](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_remquof.html#__nv_remquof)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_remquo(System.Double,System.Double,Microsoft.FSharp.Core.FSharpRef{System.Int32})">
<summary>
Compute a double-precision floating-point remainder in the same way as the remainder() function. Argument quo returns part of quotient upon division of $x$ by y. Value quo has the same sign as and may not be the exact quotient but agrees with the exact quotient in the low order 3 bits. 

See [3.256.\_\_nv\_remquo](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_remquo.html#__nv_remquo)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_remainderf(System.Single,System.Single)">
<summary>
Compute double-precision floating-point remainder r of dividing $x$ by $y$ for nonzero y. Thus . The value n is the integer value nearest . In the case when , the even n value is chosen. 

See [3.255.\_\_nv\_remainderf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_remainderf.html#__nv_remainderf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_remainder(System.Double,System.Double)">
<summary>
Compute double-precision floating-point remainder r of dividing $x$ by $y$ for nonzero y. Thus . The value n is the integer value nearest . In the case when , the even n value is chosen. 

See [3.254.\_\_nv\_remainder](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_remainder.html#__nv_remainder)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_rcbrtf(System.Single)">
<summary>
Calculate reciprocal cube root function of $x$ 

See [3.253.\_\_nv\_rcbrtf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rcbrtf.html#__nv_rcbrtf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_rcbrt(System.Double)">
<summary>
Calculate reciprocal cube root function of $x$ 

See [3.252.\_\_nv\_rcbrt](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rcbrt.html#__nv_rcbrt)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_powif(System.Single,System.Int32)">
<summary>
Calculate the value of $x$ to the power of $y$. 

See [3.251.\_\_nv\_powif](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_powif.html#__nv_powif)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_powi(System.Double,System.Int32)">
<summary>
Calculate the value of $x$ to the power of $y$.

See [3.250.\_\_nv\_powi](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_powi.html#__nv_powi)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_powf(System.Single,System.Single)">
<summary>
Calculate the value of $x$ to the power of $y$.

See [3.249.\_\_nv\_powf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_powf.html#__nv_powf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_pow(System.Double,System.Double)">
<summary>
Calculate the value of $x$ to the power of $y$.

See [3.248.\_\_nv\_pow](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_pow.html#__nv_pow)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_popcll(System.Int64)">
<summary>
Count the number of bits that are set to 1 in x.

See [3.247.\_\_nv\_popcll](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_popcll.html#__nv_popcll)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_popc(System.Int32)">
<summary>
Count the number of bits that are set to 1 in $x$.

See [3.246.\_\_nv\_popc](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_popc.html#__nv_popc)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_normcdfinvf(System.Single)">
<summary>
Calculate the inverse of the standard normal cumulative distribution function for input argument $y$. The function is defined for input values in the interval . 

See [3.245.\_\_nv\_normcdfinvf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_normcdfinvf.html#__nv_normcdfinvf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_normcdfinv(System.Double)">
<summary>
Calculate the inverse of the standard normal cumulative distribution function for input argument $y$. The function is defined for input values in the interval . 

See [3.244.\_\_nv\_normcdfinv](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_normcdfinv.html#__nv_normcdfinv)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_normcdff(System.Single)">
<summary>
Calculate the cumulative distribution function of the standard normal distribution for input argument $y$. 

See [3.243.\_\_nv\_normcdff](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_normcdff.html#__nv_normcdff)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_normcdf(System.Double)">
<summary>
Calculate the cumulative distribution function of the standard normal distribution for input argument $x$. 

See [3.242.\_\_nv\_normcdf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_normcdf.html#__nv_normcdf)

  $$ \Phi(x) = \int_{-\infty}^x \phi(x) = \int_{-\infty}^x \frac{1}{\sqrt{2\pi}} \exp\left(\frac{-u^2}{2}\right) du $$

based on the erf implementation of the Sun FDMLib version 5.3 and http://www.netlib.org/specfun/erf.
It is more accurate than the versions of Abramowitz-Stegun.
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_nextafterf(System.Single,System.Single)">
<summary>
Calculate the next representable double-precision floating-point value following x in the direction of $y$. For example, if y is greater than x, nextafter() returns the smallest representable number greater than x 

See [3.241.\_\_nv\_nextafterf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_nextafterf.html#__nv_nextafterf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_nextafter(System.Double,System.Double)">
<summary>
Calculate the next representable double-precision floating-point value following x in the direction of $y$. For example, if y is greater than x, nextafter() returns the smallest representable number greater than x 

See [3.240.\_\_nv\_nextafter](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_nextafter.html#__nv_nextafter)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_nearbyintf(System.Single)">
<summary>
Round argument $x$ to an integer value in double precision floating-point format. 

See [3.239.\_\_nv\_nearbyintf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_nearbyintf.html#__nv_nearbyintf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_nearbyint(System.Double)">
<summary>
Round argument $x$ to an integer value in double precision floating-point format. 

See [3.238.\_\_nv\_nearbyint](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_nearbyint.html#__nv_nearbyint)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_nanf(System.String)">
<summary>
Return a representation of a quiet NaN. Argument tagp selects one of the possible representations. 

See [3.237.\_\_nv\_nanf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_nanf.html#__nv_nanf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_nan(System.String)">
<summary>
Return a representation of a quiet NaN. Argument tagp selects one of the possible representations. 

See [3.236.\_\_nv\_nan](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_nan.html#__nv_nan)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_mulhi(System.Int32,System.Int32)">
<summary>
Calculate the most significant 32 bits of the 64-bit product x * y, where $x$ and $y$ are 32-bit integers. 

See [3.235.\_\_nv\_mulhi](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_mulhi.html#__nv_mulhi)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_mul64hi(System.Int64,System.Int64)">
<summary>
Calculate the most significant 64 bits of the 128-bit product x * y, where $x$ and $y$ are 64- bit integers. 

See [3.234.\_\_nv\_mul64hi](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_mul64hi.html#__nv_mul64hi)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_mul24(System.Int32,System.Int32)">
<summary>
Calculate the least significant 32 bits of the product of the least significant 24 bits of $x$ and $y$. The high order 8 bits of $x$ and $y$ are ignored. 

See [3.233.\_\_nv\_mul24](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_mul24.html#__nv_mul24)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_modff(System.Single,Microsoft.FSharp.Core.FSharpRef{System.Single})">
<summary>
Break down the argument $x$ into fractional and integral parts. The integral part is stored in the argument iptr. Fractional and integral parts are given the same sign as the argument $x$. 

See [3.232.\_\_nv\_modff](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_modff.html#__nv_modff)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_modf(System.Double,Microsoft.FSharp.Core.FSharpRef{System.Double})">
<summary>
Break down the argument $x$ into fractional and integral parts. The integral part is stored in the argument iptr. Fractional and integral parts are given the same sign as the argument $x$. 

See [3.231.\_\_nv\_modf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_modf.html#__nv_modf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_min(System.Int32,System.Int32)">
<summary>
Determine the minimum value of the two 32-bit signed integers $x$ and $y$. 

See [3.230.\_\_nv\_min](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_min.html#__nv_min)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_max(System.Int32,System.Int32)">
<summary>
Determine the maximum value of the two 32-bit signed integers $x$ and $y$. 

See [3.229.\_\_nv\_max](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_max.html#__nv_max)
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.LibDevice.__nv_longlong_as_double(System.Int64)">
<summary>
Reinterpret the bits in the 64-bit signed integer value $x$ as a double-precision floating point value. 

See [3.228.\_\_nv\_longlong\_as\_double](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_longlong_as_double.html#__nv_longlong_as_double)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_logf(System.Single)">
<summary>
Calculate the base logarithm of the input argument $x$. 

See [3.227.\_\_nv\_logf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_logf.html#__nv_logf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_logbf(System.Single)">
<summary>
Calculate the floating point representation of the exponent of the input argument $x$. 

See [3.226.\_\_nv\_logbf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_logbf.html#__nv_logbf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_logb(System.Double)">
<summary>
Calculate the floating point representation of the exponent of the input argument $x$. 

See [3.225.\_\_nv\_logb](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_logb.html#__nv_logb)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_log2f(System.Single)">
<summary>
Calculate the base 2 logarithm of the input argument $x$. 

See [3.224.\_\_nv\_log2f](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_log2f.html#__nv_log2f)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_log2(System.Double)">
<summary>
Calculate the base 2 logarithm of the input argument $x$. 

See [3.223.\_\_nv\_log2](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_log2.html#__nv_log2)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_log1pf(System.Single)">
<summary>
Calculate the value of the input argument $x$. 

See [3.222.\_\_nv\_log1pf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_log1pf.html#__nv_log1pf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_log1p(System.Double)">
<summary>
Calculate the value of the input argument $x$. 

See [3.221.\_\_nv\_log1p](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_log1p.html#__nv_log1p)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_log10f(System.Single)">
<summary>
Calculate the base 10 logarithm of the input argument $x$. 

See [3.220.\_\_nv\_log10f](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_log10f.html#__nv_log10f)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_log10(System.Double)">
<summary>
Calculate the base 10 logarithm of the input argument $x$. 

See [3.219.\_\_nv\_log10](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_log10.html#__nv_log10)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_log(System.Double)">
<summary>
Calculate the base logarithm of the input argument $x$. 

See [3.218.\_\_nv\_log](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_log.html#__nv_log)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_llroundf(System.Single)">
<summary>
Round x to the nearest integer value, with halfway cases rounded away from zero. If the result is outside the range of the return type, the result is undefined. 

See [3.217.\_\_nv\_llroundf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_llroundf.html#__nv_llroundf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_llround(System.Double)">
<summary>
Round x to the nearest integer value, with halfway cases rounded away from zero. If the result is outside the range of the return type, the result is undefined. 

See [3.216.\_\_nv\_llround](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_llround.html#__nv_llround)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_llrintf(System.Single)">
<summary>
Round x to the nearest integer value, with halfway cases rounded towards zero. If the result is outside the range of the return type, the result is undefined. 

See [3.215.\_\_nv\_llrintf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_llrintf.html#__nv_llrintf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_llrint(System.Double)">
<summary>
Round x to the nearest integer value, with halfway cases rounded towards zero. If the result is outside the range of the return type, the result is undefined. 

See [3.214.\_\_nv\_llrint](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_llrint.html#__nv_llrint)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_llmin(System.Int64,System.Int64)">
<summary>
Determine the minimum value of the two 64-bit signed integers $x$ and $y$. 

See [3.213.\_\_nv\_llmin](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_llmin.html#__nv_llmin)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_llmax(System.Int64,System.Int64)">
<summary>
Determine the maximum value of the two 64-bit signed integers $x$ and $y$. 

See [3.212.\_\_nv\_llmax](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_llmax.html#__nv_llmax)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_llabs(System.Int64)">
<summary>
Determine the absolute value of the 64-bit signed integer $x$.

See [3.211.\_\_nv\_llabs](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_llabs.html#__nv_llabs)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ll2float_rz(System.Int64)">
<summary>
Convert the signed integer value $x$ to a single-precision floating point value in round-towards-zero mode. 

See [3.210.\_\_nv\_ll2floa\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2float_rz.html#__nv_ll2float_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ll2float_ru(System.Int64)">
<summary>
Convert the signed integer value $x$ to a single-precision floating point value in round-up (to positive infinity) mode. 

See [3.209.\_\_nv\_ll2float\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2float_ru.html#__nv_ll2float_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ll2float_rn(System.Int64)">
<summary>
Convert the signed 64-bit integer value $x$ to a single-precision floating point value in round-to-nearest-even mode. 

See [3.208.\_\_nv\_ll2float\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2float_rn.html#__nv_ll2float_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ll2float_rd(System.Int64)">
<summary>
Convert the signed integer value $x$ to a single-precision floating point value in round-down (to negative infinity) mode. 

See [3.207.\_\_nv\_ll2float\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2float_rd.html#__nv_ll2float_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ll2double_rz(System.Int64)">
<summary>
Convert the signed 64-bit integer value $x$ to a double-precision floating point value in round-towards-zero mode. 

See [3.206.\_\_nv\_ll2doubl\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2double_rz.html#__nv_ll2double_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ll2double_ru(System.Int64)">
<summary>
Convert the signed 64-bit integer value $x$ to a double-precision floating point value in round-up (to positive infinity) mode. 

See [3.205.\_\_nv\_ll2double\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2double_ru.html#__nv_ll2double_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ll2double_rn(System.Int64)">
<summary>
Convert the signed 64-bit integer value $x$ to a double-precision floating point value in round-to-nearest-even mode. 

See [3.204.\_\_nv\_ll2double\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2double_rn.html#__nv_ll2double_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ll2double_rd(System.Int64)">
<summary>
Convert the signed 64-bit integer value $x$ to a double-precision floating point value in round-down (to negative infinity) mode. 

See [3.203.\_\_nv\_ll2double\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2double_rd.html#__nv_ll2double_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_lgammaf(System.Single)">
<summary>
Calculate the natural logarithm of the absolute value of the gamma function of the input argument $x$, namely the value of 

See [3.202.\_\_nv\_lgammaf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_lgammaf.html#__nv_lgammaf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_lgamma(System.Double)">
<summary>
Calculate the natural logarithm of the absolute value of the gamma function of the input argument $x$, namely the value of 

See [3.201.\_\_nv\_lgamma](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_lgamma.html#__nv_lgamma)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ldexpf(System.Single,System.Int32)">
<summary>
Calculate the value of of the input arguments x and exp. 

See [3.200.\_\_nv\_ldexpf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ldexpf.html#__nv_ldexpf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ldexp(System.Double,System.Int32)">
<summary>
Calculate the value of of the input arguments x and exp. 

See [3.199.\_\_nv\_ldexp](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ldexp.html#__nv_ldexp)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_jnf(System.Int32,System.Single)">
<summary>
Calculate the value of the Bessel function of the first kind of order n for the input argument $x$. 

See [3.198.\_\_nv\_jnf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_jnf.html#__nv_jnf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_jn(System.Int32,System.Double)">
<summary>
Calculate the value of the Bessel function of the first kind of order n for the input argument $x$. 

See [3.197.\_\_nv\_jn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_jn.html#__nv_jn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_j1f(System.Single)">
<summary>
Calculate the value of the Bessel function of the first kind of order 1 for the input argument $x$. 

See [3.196.\_\_nv\_j1f](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_j1f.html#__nv_j1f)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_j1(System.Double)">
<summary>
Calculate the value of the Bessel function of the first kind of order 1 for the input argument $x$. 

See [3.195.\_\_nv\_j1](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_j1.html#__nv_j1)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_j0f(System.Single)">
<summary>
Calculate the value of the Bessel function of the first kind of order 0 for the input argument $x$. 

See [3.194.\_\_nv\_j0f](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_j0f.html#__nv_j0f)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_j0(System.Double)">
<summary>
Calculate the value of the Bessel function of the first kind of order 0 for the input argument $x$. 

See [3.193.\_\_nv\_j0](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_j0.html#__nv_j0)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_isnanf(System.Single)">
<summary>
Determine whether the floating-point value $x$ is a NaN. 

See [3.192.\_\_nv\_isnanf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_isnanf.html#__nv_isnanf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_isnand(System.Double)">
<summary>
Determine whether the floating-point value $x$ is a NaN. 

See [3.191.\_\_nv\_isnand](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_isnand.html#__nv_isnand)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_isinff(System.Single)">
<summary>
Determine whether the floating-point value $x$ is an infinite value (positive or negative). 

See [3.190.\_\_nv\_isinff](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_isinff.html#__nv_isinff)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_isinfd(System.Double)">
<summary>
Determine whether the floating-point value $x$ is an infinite value (positive or negative). 

See [3.189.\_\_nv\_isinfd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_isinfd.html#__nv_isinfd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_isfinited(System.Double)">
<summary>
Determine whether the floating-point value $x$ is a finite value (zero, subnormal, or normal and not infinity or NaN). 

See [3.188.\_\_nv\_isfinited](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_isfinited.html#__nv_isfinited)
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.LibDevice.__nv_int_as_float(System.Int32)">
<summary>
Reinterpret the bits in the signed integer value $x$ as a single-precision floating point value. 

See [3.187.\_\_nv\_int\_as\_float](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_int_as_float.html#__nv_int_as_float)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_int2float_rz(System.Int32)">
<summary>
Convert the signed integer value $x$ to a single-precision floating point value in round-towards-zero mode. 

See [3.186.\_\_nv\_int2floa\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_int2float_rz.html#__nv_int2float_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_int2float_ru(System.Int32)">
<summary>
Convert the signed integer value $x$ to a single-precision floating point value in round-up (to positive infinity) mode. 

See [3.185.\_\_nv\_int2float\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_int2float_ru.html#__nv_int2float_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_int2float_rn(System.Int32)">
<summary>
Convert the signed integer value $x$ to a single-precision floating point value in round-to-nearest-even mode. 

See [3.184.\_\_nv\_int2float\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_int2float_rn.html#__nv_int2float_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_int2float_rd(System.Int32)">
<summary>
Convert the signed integer value $x$ to a single-precision floating point value in round-down (to negative infinity) mode. 

See [3.183.\_\_nv\_int2float\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_int2float_rd.html#__nv_int2float_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_int2double_rn(System.Int32)">
<summary>
Convert the signed integer value $x$ to a double-precision floating point value. 

See [3.182.\_\_nv\_int2double\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_int2double_rn.html#__nv_int2double_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ilogbf(System.Single)">
<summary>
Calculates the unbiased integer exponent of the input argument $x$. 

See [3.181.\_\_nv\_ilogbf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ilogbf.html#__nv_ilogbf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ilogb(System.Double)">
<summary>
Calculates the unbiased integer exponent of the input argument $x$. 

See [3.180.\_\_nv\_ilogb](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ilogb.html#__nv_ilogb)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_hypotf(System.Single,System.Single)">
<summary>
Calculate the length of the hypotenuse of a right triangle whose two sides have lengths $x$ and $y$ without undue overflow or underflow. 

See [3.179.\_\_nv\_hypotf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_hypotf.html#__nv_hypotf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_hypot(System.Double,System.Double)">
<summary>
Calculate the length of the hypotenuse of a right triangle whose two sides have lengths $x$ and $y$ without undue overflow or underflow. 

See [3.178.\_\_nv\_hypot](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_hypot.html#__nv_hypot)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_hiloint2double(System.Int32,System.Int32)">
<summary>
Reinterpret the integer value of hi as the high 32 bits of a double-precision floating point value and the integer value of lo as the low 32 bits of the same double-precision floating point value. 

See [3.177.\_\_nv\_hiloint2double](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_hiloint2double.html#__nv_hiloint2double)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_half2float(System.Int16)">
<summary>
Convert the half-precision floating point value $x$ represented in unsigned short format to a single-precision floating point value. 

See [3.176.\_\_nv\_half2float](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_half2float.html#__nv_half2float)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_hadd(System.Int32,System.Int32)">
<summary>
Compute average of signed input arguments $x$ and $y$ as ( x + y ) &gt;&gt; 1, avoiding overflow in the intermediate sum. 

See [3.175.\_\_nv\_hadd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_hadd.html#__nv_hadd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fsub_rz(System.Single,System.Single)">
<summary>
Compute the difference of $x$ and $y$ in round-towards-zero mode. 

See [3.174.\_\_nv\_fsu\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsub_rz.html#__nv_fsub_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fsub_ru(System.Single,System.Single)">
<summary>
Compute the difference of $x$ and $y$ in round-up (to positive infinity) mode. 

See [3.173.\_\_nv\_fsub\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsub_ru.html#__nv_fsub_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fsub_rn(System.Single,System.Single)">
<summary>
Compute the difference of $x$ and $y$ in round-to-nearest-even rounding mode. 

See [3.172.\_\_nv\_fsub\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsub_rn.html#__nv_fsub_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fsub_rd(System.Single,System.Single)">
<summary>
Compute the difference of $x$ and $y$ in round-down (to negative infinity) mode. 

See [3.171.\_\_nv\_fsub\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsub_rd.html#__nv_fsub_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fsqrt_rz(System.Single)">
<summary>
Compute the square root of $x$ in round-towards-zero mode. 

See [3.170.\_\_nv\_fsqr\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsqrt_rz.html#__nv_fsqrt_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fsqrt_ru(System.Single)">
<summary>
Compute the square root of $x$ in round-up (to positive infinity) mode. 

See [3.169.\_\_nv\_fsqrt\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsqrt_ru.html#__nv_fsqrt_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fsqrt_rn(System.Single)">
<summary>
Compute the square root of $x$ in round-to-nearest-even mode. 

See [3.168.\_\_nv\_fsqrt\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsqrt_rn.html#__nv_fsqrt_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fsqrt_rd(System.Single)">
<summary>
Compute the square root of $x$ in round-down (to negative infinity) mode. 

See [3.167.\_\_nv\_fsqrt\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsqrt_rd.html#__nv_fsqrt_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_frsqrt_rn(System.Single)">
<summary>
Compute the reciprocal square root of $x$ in round-to-nearest-even mode. 

See [3.166.\_\_nv\_frsqrt\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_frsqrt_rn.html#__nv_frsqrt_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_frexpf(System.Single,Microsoft.FSharp.Core.FSharpRef{System.Int32})">
<summary>
Decompose the floating-point value $x$ into a component m for the normalized fraction element and another term n for the exponent. The absolute value of m will be greater than or equal to 0.5 and less than 1.0 or it will be equal to 0; . The integer exponent n will be stored in the location to which nptr points. 

See [3.165.\_\_nv\_frexpf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_frexpf.html#__nv_frexpf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_frexp(System.Double,Microsoft.FSharp.Core.FSharpRef{System.Int32})">
<summary>
Decompose the floating-point value $x$ into a component m for the normalized fraction element and another term n for the exponent. The absolute value of m will be greater than or equal to 0.5 and less than 1.0 or it will be equal to 0; . The integer exponent n will be stored in the location to which nptr points. 

See [3.164.\_\_nv\_frexp](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_frexp.html#__nv_frexp)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_frcp_rz(System.Single)">
<summary>
Compute the reciprocal of $x$ in round-towards-zero mode. 

See [3.163.\_\_nv\_frc\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_frcp_rz.html#__nv_frcp_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_frcp_ru(System.Single)">
<summary>
Compute the reciprocal of $x$ in round-up (to positive infinity) mode. 

See [3.162.\_\_nv\_frcp\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_frcp_ru.html#__nv_frcp_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_frcp_rn(System.Single)">
<summary>
Compute the reciprocal of $x$ in round-to-nearest-even mode. 

See [3.161.\_\_nv\_frcp\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_frcp_rn.html#__nv_frcp_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_frcp_rd(System.Single)">
<summary>
Compute the reciprocal of $x$ in round-down (to negative infinity) mode. 

See [3.160.\_\_nv\_frcp\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_frcp_rd.html#__nv_frcp_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fmul_rz(System.Single,System.Single)">
<summary>
Compute the product of $x$ and $y$ in round-towards-zero mode. 

See [3.159.\_\_nv\_fmu\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmul_rz.html#__nv_fmul_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fmul_ru(System.Single,System.Single)">
<summary>
Compute the product of $x$ and $y$ in round-up (to positive infinity) mode. 

See [3.158.\_\_nv\_fmul\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmul_ru.html#__nv_fmul_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fmul_rn(System.Single,System.Single)">
<summary>
Compute the product of $x$ and $y$ in round-to-nearest-even mode. 

See [3.157.\_\_nv\_fmul\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmul_rn.html#__nv_fmul_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fmul_rd(System.Single,System.Single)">
<summary>
Compute the product of $x$ and $y$ in round-down (to negative infinity) mode. 

See [3.156.\_\_nv\_fmul\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmul_rd.html#__nv_fmul_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fmodf(System.Single,System.Single)">
<summary>
Calculate the floating-point remainder of $x / y$. The absolute value of the computed value is always less than y&apos;s absolute value and will have the same sign as $x$.

See [3.155.\_\_nv\_fmodf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmodf.html#__nv_fmodf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fmod(System.Double,System.Double)">
<summary>
Calculate the floating-point remainder of $x / y$. The absolute value of the computed value is always less than y&apos;s absolute value and will have the same sign as $x$.

See [3.154.\_\_nv\_fmod](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmod.html#__nv_fmod)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fminf(System.Single,System.Single)">
<summary>
Determines the minimum numeric value of the arguments $x$ and $y$. Treats NaN arguments as missing data. If one argument is a NaN and the other is legitimate numeric value, the numeric value is chosen. 

See [3.153.\_\_nv\_fminf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fminf.html#__nv_fminf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fmin(System.Double,System.Double)">
<summary>
Determines the minimum numeric value of the arguments $x$ and $y$. Treats NaN arguments as missing data. If one argument is a NaN and the other is legitimate numeric value, the numeric value is chosen. 

See [3.152.\_\_nv\_fmin](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmin.html#__nv_fmin)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fmaxf(System.Single,System.Single)">
<summary>
Determines the maximum numeric value of the arguments $x$ and $y$. Treats NaN arguments as missing data. If one argument is a NaN and the other is legitimate numeric value, the numeric value is chosen. 

See [3.151.\_\_nv\_fmaxf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmaxf.html#__nv_fmaxf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fmax(System.Double,System.Double)">
<summary>
Determines the maximum numeric value of the arguments $x$ and $y$. Treats NaN arguments as missing data. If one argument is a NaN and the other is legitimate numeric value, the numeric value is chosen. 

See [3.150.\_\_nv\_fmax](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmax.html#__nv_fmax)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fmaf_rz(System.Single,System.Single,System.Single)">
<summary>
Computes the value of as a single ternary operation, rounding the result once in round-towards-zero mode. 

See [3.149.\_\_nv\_fma\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmaf_rz.html#__nv_fmaf_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fmaf_ru(System.Single,System.Single,System.Single)">
<summary>
Computes the value of as a single ternary operation, rounding the result once in round-up (to positive infinity) mode. 

See [3.148.\_\_nv\_fmaf\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmaf_ru.html#__nv_fmaf_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fmaf_rn(System.Single,System.Single,System.Single)">
<summary>
Computes the value of as a single ternary operation, rounding the result once in round-to-nearest-even mode. 

See [3.147.\_\_nv\_fmaf\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmaf_rn.html#__nv_fmaf_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fmaf_rd(System.Single,System.Single,System.Single)">
<summary>
Computes the value of as a single ternary operation, rounding the result once in round-down (to negative infinity) mode. 

See [3.146.\_\_nv\_fmaf\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmaf_rd.html#__nv_fmaf_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fmaf(System.Single,System.Single,System.Single)">
<summary>
Compute the value of as a single ternary operation. After computing the value to infinite precision, the value is rounded once. 

See [3.145.\_\_nv\_fmaf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmaf.html#__nv_fmaf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fma_rz(System.Double,System.Double,System.Double)">
<summary>
Computes the value of as a single ternary operation, rounding the result once in round-towards-zero mode. 

See [3.144.\_\_nv\_fm\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fma_rz.html#__nv_fma_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fma_ru(System.Double,System.Double,System.Double)">
<summary>
Computes the value of as a single ternary operation, rounding the result once in round-up (to positive infinity) mode. 

See [3.143.\_\_nv\_fma\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fma_ru.html#__nv_fma_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fma_rn(System.Double,System.Double,System.Double)">
<summary>
Computes the value of as a single ternary operation, rounding the result once in round-to-nearest-even mode. 

See [3.142.\_\_nv\_fma\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fma_rn.html#__nv_fma_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fma_rd(System.Double,System.Double,System.Double)">
<summary>
Computes the value of as a single ternary operation, rounding the result once in round-down (to negative infinity) mode. 

See [3.141.\_\_nv\_fma\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fma_rd.html#__nv_fma_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fma(System.Double,System.Double,System.Double)">
<summary>
Compute the value of $x * y + z$ as a single ternary operation. After computing the value to infinite precision, the value is rounded once. 

See [3.140.\_\_nv\_fma](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fma.html#__nv_fma)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_floorf(System.Single)">
<summary>
Calculates the largest integer value which is less than or equal to $x$.

See [3.139.\_\_nv\_floorf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_floorf.html#__nv_floorf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_floor(System.Double)">
<summary>
Calculates the largest integer value which is less than or equal to $x$.

See [3.138.\_\_nv\_floor](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_floor.html#__nv_floor)
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float_as_int(System.Single)">
<summary>
Reinterpret the bits in the single-precision floating point value $x$ as a signed integer. 

See [3.137.\_\_nv\_float\_as\_int](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float_as_int.html#__nv_float_as_int)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2ull_rz(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to an unsigned 64-bit integer in round-towards_zero mode. 

See [3.136.\_\_nv\_float2ul\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ull_rz.html#__nv_float2ull_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2ull_ru(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to an unsigned 64-bit integer in round-up (to positive infinity) mode. 

See [3.135.\_\_nv\_float2ull\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ull_ru.html#__nv_float2ull_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2ull_rn(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to an unsigned 64-bit integer in round-to-nearest-even mode. 

See [3.134.\_\_nv\_float2ull\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ull_rn.html#__nv_float2ull_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2ull_rd(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to an unsigned 64-bit integer in round-down (to negative infinity) mode. 

See [3.133.\_\_nv\_float2ull\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ull_rd.html#__nv_float2ull_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2uint_rz(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to an unsigned integer in round towards-zero mode. 

See [3.132.\_\_nv\_float2uin\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2uint_rz.html#__nv_float2uint_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2uint_ru(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to an unsigned integer in round-up (to positive infinity) mode. 

See [3.131.\_\_nv\_float2uint\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2uint_ru.html#__nv_float2uint_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2uint_rn(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to an unsigned integer in round-to-nearest-even mode. 

See [3.130.\_\_nv\_float2uint\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2uint_rn.html#__nv_float2uint_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2uint_rd(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to an unsigned integer in round-down (to negative infinity) mode. 

See [3.129.\_\_nv\_float2uint\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2uint_rd.html#__nv_float2uint_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2ll_rz(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to a signed 64-bit integer in round-towards-zero mode. 

See [3.128.\_\_nv\_float2l\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ll_rz.html#__nv_float2ll_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2ll_ru(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to a signed 64-bit integer in round-up (to positive infinity) mode. 

See [3.127.\_\_nv\_float2ll\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ll_ru.html#__nv_float2ll_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2ll_rn(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to a signed 64-bit integer in round-to-nearest-even mode. 

See [3.126.\_\_nv\_float2ll\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ll_rn.html#__nv_float2ll_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2ll_rd(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to a signed 64-bit integer in round-down (to negative infinity) mode. 

See [3.125.\_\_nv\_float2ll\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ll_rd.html#__nv_float2ll_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2int_rz(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to a signed integer in round-towards-zero mode. 

See [3.124.\_\_nv\_float2in\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2int_rz.html#__nv_float2int_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2int_ru(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to a signed integer in round-up (to positive infinity) mode. 

See [3.123.\_\_nv\_float2int\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2int_ru.html#__nv_float2int_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2int_rn(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to a signed integer in round-to-nearest-even mode. 

See [3.122.\_\_nv\_float2int\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2int_rn.html#__nv_float2int_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2int_rd(System.Single)">
<summary>
Convert the single-precision floating point value $x$ to a signed integer in round-down (to negative infinity) mode. 

See [3.121.\_\_nv\_float2int\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2int_rd.html#__nv_float2int_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_float2half_rn(System.Single)">
<summary>
Convert the single-precision float value $x$ to a half-precision floating point value represented in unsigned short format, in round-to-nearest-even mode. 

See [3.120.\_\_nv\_float2half\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2half_rn.html#__nv_float2half_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_finitef(System.Single)">
<summary>
Determine whether the floating-point value $x$ is a finite value. 

See [3.119.\_\_nv\_finitef](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_finitef.html#__nv_finitef)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ffsll(System.Int64)">
<summary>
Find the position of the first (least significant) bit set to 1 in x, where the least significant bit position is 1. 

See [3.118.\_\_nv\_ffsll](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ffsll.html#__nv_ffsll)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ffs(System.Int32)">
<summary>
Find the position of the first (least significant) bit set to 1 in x, where the least significant bit position is 1. 

See [3.117.\_\_nv\_ffs](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ffs.html#__nv_ffs)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fdiv_rz(System.Single,System.Single)">
<summary>
Divide two floating point values $x$ by $y$ in round-towards-zero mode. 

See [3.116.\_\_nv\_fdi\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fdiv_rz.html#__nv_fdiv_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fdiv_ru(System.Single,System.Single)">
<summary>
Divide two floating point values $x$ by $y$ in round-up (to positive infinity) mode. 

See [3.115.\_\_nv\_fdiv\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fdiv_ru.html#__nv_fdiv_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fdiv_rn(System.Single,System.Single)">
<summary>
Divide two floating point values $x$ by $y$ in round-to-nearest-even mode. 

See [3.114.\_\_nv\_fdiv\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fdiv_rn.html#__nv_fdiv_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fdiv_rd(System.Single,System.Single)">
<summary>
Divide two floating point values $x$ by $y$ in round-down (to negative infinity) mode. 

See [3.113.\_\_nv\_fdiv\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fdiv_rd.html#__nv_fdiv_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fdimf(System.Single,System.Single)">
<summary>
Compute the positive difference between $x$ and $y$. The positive difference is x - y when x &gt; y and +0 otherwise. 

See [3.112.\_\_nv\_fdimf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fdimf.html#__nv_fdimf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fdim(System.Double,System.Double)">
<summary>
Compute the positive difference between $x$ and $y$. The positive difference is x - y when x &gt; y and +0 otherwise. 

See [3.111.\_\_nv\_fdim](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fdim.html#__nv_fdim)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fast_tanf(System.Single)">
<summary>
Calculate the fast approximate tangent of the input argument $x$, measured in radians. 

See [3.110.\_\_nv\_fast\_tanf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_tanf.html#__nv_fast_tanf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fast_sinf(System.Single)">
<summary>
Calculate the fast approximate sine of the input argument $x$, measured in radians. 

See [3.109.\_\_nv\_fast\_sinf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_sinf.html#__nv_fast_sinf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fast_sincosf(System.Single,Microsoft.FSharp.Core.FSharpRef{System.Single},Microsoft.FSharp.Core.FSharpRef{System.Single})">
<summary>
Calculate the fast approximate of sine and cosine of the first input argument $x$ (measured in radians). The results for sine and cosine are written into the second argument, sptr, and, respectively, third argument, zptr. 

See [3.108.\_\_nv\_fast\_sincosf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_sincosf.html#__nv_fast_sincosf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fast_powf(System.Single,System.Single)">
<summary>
Calculate the fast approximate of $x$, the first input argument, raised to the power of $y$. the second input argument. 

See [3.107.\_\_nv\_fast\_powf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_powf.html#__nv_fast_powf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fast_logf(System.Single)">
<summary>
Calculate the fast approximate base logarithm of the input argument $x$. 

See [3.106.\_\_nv\_fast\_logf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_logf.html#__nv_fast_logf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fast_log2f(System.Single)">
<summary>
Calculate the fast approximate base 2 logarithm of the input argument $x$. 

See [3.105.\_\_nv\_fast\_log2f](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_log2f.html#__nv_fast_log2f)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fast_log10f(System.Single)">
<summary>
Calculate the fast approximate base 10 logarithm of the input argument $x$. 

See [3.104.\_\_nv\_fast\_log10f](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_log10f.html#__nv_fast_log10f)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fast_fdividef(System.Single,System.Single)">
<summary>
Calculate the fast approximate division of $x$ by y. 

See [3.103.\_\_nv\_fast\_fdividef](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_fdividef.html#__nv_fast_fdividef)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fast_expf(System.Single)">
<summary>
Calculate the fast approximate base exponential of the input argument $x$. 

See [3.102.\_\_nv\_fast\_expf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_expf.html#__nv_fast_expf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fast_exp10f(System.Single)">
<summary>
Calculate the fast approximate base 10 exponential of the input argument $x$. 

See [3.101.\_\_nv\_fast\_exp10f](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_exp10f.html#__nv_fast_exp10f)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fast_cosf(System.Single)">
<summary>
Calculate the fast approximate cosine of the input argument $x$, measured in radians. 

See [3.100.\_\_nv\_fast\_cosf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_cosf.html#__nv_fast_cosf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fadd_rz(System.Single,System.Single)">
<summary>
Compute the sum of $x$ and $y$ in round-towards-zero mode. 

See [3.99.\_\_nv\_fad\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fadd_rz.html#__nv_fadd_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fadd_ru(System.Single,System.Single)">
<summary>
Compute the sum of $x$ and $y$ in round-up (to positive infinity) mode. 

See [3.98.\_\_nv\_fadd\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fadd_ru.html#__nv_fadd_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fadd_rn(System.Single,System.Single)">
<summary>
Compute the sum of $x$ and $y$ in round-to-nearest-even rounding mode. 

See [3.97.\_\_nv\_fadd\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fadd_rn.html#__nv_fadd_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fadd_rd(System.Single,System.Single)">
<summary>
Compute the sum of $x$ and $y$ in round-down (to negative infinity) mode. 

See [3.96.\_\_nv\_fadd\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fadd_rd.html#__nv_fadd_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fabsf(System.Single)">
<summary>
Calculate the absolute value of the input argument $x$.

See [3.95.\_\_nv\_fabsf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fabsf.html#__nv_fabsf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_fabs(System.Double)">
<summary>
Calculate the absolute value of the input argument $x$. 

See [3.94.\_\_nv\_fabs](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fabs.html#__nv_fabs)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_expm1f(System.Single)">
<summary>
Calculate the base exponential of the input argument $x$, minus 1. 

See [3.93.\_\_nv\_expm1f](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_expm1f.html#__nv_expm1f)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_expm1(System.Double)">
<summary>
Calculate the base exponential of the input argument $x$, minus 1. 

See [3.92.\_\_nv\_expm1](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_expm1.html#__nv_expm1)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_expf(System.Single)">
<summary>
Calculate the base exponential of the input argument $x$. 

See [3.91.\_\_nv\_expf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_expf.html#__nv_expf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_exp2f(System.Single)">
<summary>
Calculate the base 2 exponential of the input argument $x$. 

See [3.90.\_\_nv\_exp2f](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_exp2f.html#__nv_exp2f)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_exp2(System.Double)">
<summary>
Calculate the base 2 exponential of the input argument $x$. 

See [3.89.\_\_nv\_exp2](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_exp2.html#__nv_exp2)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_exp10f(System.Single)">
<summary>
Calculate the base 10 exponential of the input argument $x$. 

See [3.88.\_\_nv\_exp10f](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_exp10f.html#__nv_exp10f)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_exp10(System.Double)">
<summary>
Calculate the base 10 exponential of the input argument $x$. 

See [3.87.\_\_nv\_exp10](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_exp10.html#__nv_exp10)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_exp(System.Double)">
<summary>
Calculate the base exponential of the input argument $x$. 

See [3.86.\_\_nv\_exp](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_exp.html#__nv_exp)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_erfinvf(System.Single)">
<summary>
Calculate the inverse error function of the input argument $y$, for $y$ in the interval $[-1, 1]$. The inverse error function finds the value $x$ that satisfies the equation $y = erf(x)$, for $-1 \leq y \leq -1$, and $-\infty \leq x \leq \infty$. 

See [3.85.\_\_nv\_erfinvf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfinvf.html#__nv_erfinvf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_erfinv(System.Double)">
<summary>
Calculate the inverse error function of the input argument $y$, for y in the interval [-1, 1]. The inverse error function finds the value $x$ that satisfies the equation y = erf(x), for , and . 

See [3.84.\_\_nv\_erfinv](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfinv.html#__nv_erfinv)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_erff(System.Single)">
<summary>
Calculate the value of the error function for the input argument $x$. 

See [3.83.\_\_nv\_erff](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erff.html#__nv_erff)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_erfcxf(System.Single)">
<summary>
Calculate the scaled complementary error function of the input argument $x$. 

See [3.82.\_\_nv\_erfcxf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfcxf.html#__nv_erfcxf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_erfcx(System.Double)">
<summary>
Calculate the scaled complementary error function of the input argument $x$. 

See [3.81.\_\_nv\_erfcx](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfcx.html#__nv_erfcx)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_erfcinvf(System.Single)">
<summary>
Calculate the inverse complementary error function of the input argument $y$, for $y$ in the interval $[0, 2]$. The inverse complementary error function find the value $x$ that satisfies the equation $y = erfc(x)$, for $0 \leq y \leq 2$, and $-\infty \leq x \leq \infty$. 

See [3.80.\_\_nv\_erfcinvf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfcinvf.html#__nv_erfcinvf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_erfcinv(System.Double)">
<summary>
Calculate the inverse complementary error function of the input argument $y$, for $y$ in the interval $[0, 2]$. The inverse complementary error function find the value $x$ that satisfies the equation $y = erfc(x)$, for $0 \leq y \leq 2$, and $-\infty \leq x \leq \infty$. 

See [3.79.\_\_nv\_erfcinv](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfcinv.html#__nv_erfcinv)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_erfcf(System.Single)">
<summary>
Calculate the complementary error function of the input argument $x$, $1 - erf(x)$.

See [3.78.\_\_nv\_erfcf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfcf.html#__nv_erfcf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_erfc(System.Double)">
<summary>
Calculate the complementary error function of the input argument $x$, $1 - erf(x)$. 

See [3.77.\_\_nv\_erfc](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfc.html#__nv_erfc)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_erf(System.Double)">
<summary>
Calculate the value of the error function for the input argument $x$. 

See [3.76.\_\_nv\_erf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erf.html#__nv_erf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_dsqrt_rz(System.Double)">
<summary>
Compute the square root of $x$ in round-towards-zero mode. 

See [3.75.\_\_nv\_dsqrt\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dsqrt_rz.html#__nv_dsqrt_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_dsqrt_ru(System.Double)">
<summary>
Compute the square root of $x$ in round-up (to positive infinity) mode. 

See [3.74.\_\_nv\_dsqrt\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dsqrt_ru.html#__nv_dsqrt_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_dsqrt_rn(System.Double)">
<summary>
Compute the square root of $x$ in round-to-nearest-even mode. 

See [3.73.\_\_nv\_dsqrt\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dsqrt_rn.html#__nv_dsqrt_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_dsqrt_rd(System.Double)">
<summary>
Compute the square root of $x$ in round-down (to negative infinity) mode. 

See [3.72.\_\_nv\_dsqrt\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dsqrt_rd.html#__nv_dsqrt_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_drcp_rz(System.Double)">
<summary>
Compute the reciprocal of $x$ in round-towards-zero mode. 

See [3.71.\_\_nv\_drcp\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_drcp_rz.html#__nv_drcp_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_drcp_ru(System.Double)">
<summary>
Compute the reciprocal of $x$ in round-up (to positive infinity) mode. 

See [3.70.\_\_nv\_drcp\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_drcp_ru.html#__nv_drcp_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_drcp_rn(System.Double)">
<summary>
Compute the reciprocal of $x$ in round-to-nearest-even mode. 

See [3.69.\_\_nv\_drcp\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_drcp_rn.html#__nv_drcp_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_drcp_rd(System.Double)">
<summary>
Compute the reciprocal of $x$ in round-down (to negative infinity) mode. 

See [3.68.\_\_nv\_drcp\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_drcp_rd.html#__nv_drcp_rd)
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double_as_longlong(System.Double)">
<summary>
Reinterpret the bits in the double-precision floating point value $x$ as a signed 64-bit integer. 

See [3.67.\_\_nv\_double\_as\_longlong](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double_as_longlong.html#__nv_double_as_longlong)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2ull_rz(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to an unsigned 64-bit integer value in round-towards-zero mode. 

See [3.66.\_\_nv\_double2ull\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ull_rz.html#__nv_double2ull_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2ull_ru(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to an unsigned 64-bit integer value in round-up (to positive infinity) mode. 

See [3.65.\_\_nv\_double2ull\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ull_ru.html#__nv_double2ull_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2ull_rn(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to an unsigned 64-bit integer value in round-to-nearest-even mode. 

See [3.64.\_\_nv\_double2ull\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ull_rn.html#__nv_double2ull_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2ull_rd(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to an unsigned 64-bit integer value in round-down (to negative infinity) mode. 

See [3.63.\_\_nv\_double2ull\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ull_rd.html#__nv_double2ull_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2uint_rz(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to an unsigned integer value in round-towards-zero mode. 

See [3.62.\_\_nv\_double2uint\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2uint_rz.html#__nv_double2uint_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2uint_ru(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to an unsigned integer value in round-up (to positive infinity) mode. 

See [3.61.\_\_nv\_double2uint\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2uint_ru.html#__nv_double2uint_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2uint_rn(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to an unsigned integer value in round-to-nearest-even mode. 

See [3.60.\_\_nv\_double2uint\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2uint_rn.html#__nv_double2uint_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2uint_rd(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to an unsigned integer value in round-down (to negative infinity) mode. 

See [3.59.\_\_nv\_double2uint\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2uint_rd.html#__nv_double2uint_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2loint(System.Double)">
<summary>
Reinterpret the low 32 bits in the double-precision floating point value $x$ as a signed integer. 

See [3.58.\_\_nv\_double2loint](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2loint.html#__nv_double2loint)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2ll_rz(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to a signed 64-bit integer value in round-towards-zero mode. 

See [3.57.\_\_nv\_double2ll\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ll_rz.html#__nv_double2ll_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2ll_ru(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to a signed 64-bit integer value in round-up (to positive infinity) mode. 

See [3.56.\_\_nv\_double2ll\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ll_ru.html#__nv_double2ll_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2ll_rn(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to a signed 64-bit integer value in round-to-nearest-even mode. 

See [3.55.\_\_nv\_double2ll\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ll_rn.html#__nv_double2ll_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2ll_rd(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to a signed 64-bit integer value in round-down (to negative infinity) mode. 

See [3.54.\_\_nv\_double2ll\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ll_rd.html#__nv_double2ll_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2int_rz(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to a signed integer value in round-towards-zero mode. 

See [3.53.\_\_nv\_double2in\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2int_rz.html#__nv_double2int_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2int_ru(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to a signed integer value in roundup (to positive infinity) mode. 

See [3.52.\_\_nv\_double2int\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2int_ru.html#__nv_double2int_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2int_rn(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to a signed integer value in round-to-nearest-even mode. 

See [3.51.\_\_nv\_double2int\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2int_rn.html#__nv_double2int_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2int_rd(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to a signed integer value in round-down (to negative infinity) mode. 

See [3.50.\_\_nv\_double2int\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2int_rd.html#__nv_double2int_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2hiint(System.Double)">
<summary>
Reinterpret the high 32 bits in the double-precision floating point value $x$ as a signed integer. 

See [3.49.\_\_nv\_double2hiint](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2hiint.html#__nv_double2hiint)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2float_rz(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to a single-precision floating point value in round-towards-zero mode. 

See [3.48.\_\_nv\_double2floa\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2float_rz.html#__nv_double2float_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2float_ru(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to a single-precision floating point value in round-up (to positive infinity) mode. 

See [3.47.\_\_nv\_double2float\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2float_ru.html#__nv_double2float_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2float_rn(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to a single-precision floating point value in round-to-nearest-even mode.

See [3.46.\_\_nv\_double2float\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2float_rn.html#__nv_double2float_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_double2float_rd(System.Double)">
<summary>
Convert the double-precision floating point value $x$ to a single-precision floating point value in round-down (to negative infinity) mode. 

See [3.45.\_\_nv\_double2float\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2float_rd.html#__nv_double2float_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_dmul_rz(System.Double,System.Double)">
<summary>
Multiplies two floating point values $x$ and $y$ in round-towards-zero mode. 

See [3.44.\_\_nv\_dmu\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dmul_rz.html#__nv_dmul_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_dmul_ru(System.Double,System.Double)">
<summary>
Multiplies two floating point values $x$ and $y$ in round-up (to positive infinity) mode. 

See [3.43.\_\_nv\_dmul\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dmul_ru.html#__nv_dmul_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_dmul_rn(System.Double,System.Double)">
<summary>
Multiplies two floating point values $x$ and $y$ in round-to-nearest-even mode.

See [3.42.\_\_nv\_dmul\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dmul_rn.html#__nv_dmul_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_dmul_rd(System.Double,System.Double)">
<summary>
Multiplies two floating point values $x$ and $y$ in round-down (to negative infinity) mode. 

See [3.41.\_\_nv\_dmul\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dmul_rd.html#__nv_dmul_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ddiv_rz(System.Double,System.Double)">
<summary>
Divides two floating point values $x$ by $y$ in round-towards-zero mode. 

See [3.40.\_\_nv\_ddi\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ddiv_rz.html#__nv_ddiv_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ddiv_ru(System.Double,System.Double)">
<summary>
Divides two floating point values $x$ by $y$ in round-up (to positive infinity) mode. 

See [3.39.\_\_nv\_ddiv\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ddiv_ru.html#__nv_ddiv_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ddiv_rn(System.Double,System.Double)">
<summary>
Divides two floating point values $x$ by $y$ in round-to-nearest-even mode. 

See [3.38.\_\_nv\_ddiv\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ddiv_rn.html#__nv_ddiv_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ddiv_rd(System.Double,System.Double)">
<summary>
Divides two floating point values $x$ by $y$ in round-down (to negative infinity) mode. 

See [3.37.\_\_nv\_ddiv\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ddiv_rd.html#__nv_ddiv_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_dadd_rz(System.Double,System.Double)">
<summary>
Adds two floating point values $x$ and $y$ in round-towards-zero mode. 

See [3.36.\_\_nv\_dad\_rz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dadd_rz.html#__nv_dadd_rz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_dadd_ru(System.Double,System.Double)">
<summary>
Adds two floating point values $x$ and $y$ in round-up (to positive infinity) mode. 

See [3.35.\_\_nv\_dadd\_ru](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dadd_ru.html#__nv_dadd_ru)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_dadd_rn(System.Double,System.Double)">
<summary>
Adds two floating point values $x$ and $y$ in round-to-nearest-even mode. 

See [3.34.\_\_nv\_dadd\_rn](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dadd_rn.html#__nv_dadd_rn)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_dadd_rd(System.Double,System.Double)">
<summary>
Adds two floating point values $x$ and $y$ in round-down (to negative infinity) mode. 

See [3.33.\_\_nv\_dadd\_rd](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dadd_rd.html#__nv_dadd_rd)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_cospif(System.Single)">
<summary>
Calculate the cosine of $x$ (measured in radians), where x is the input argument. 

See [3.32.\_\_nv\_cospif](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_cospif.html#__nv_cospif)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_cospi(System.Double)">
<summary>
Calculate the cosine of $x$ (measured in radians), where x is the input argument. 

See [3.31.\_\_nv\_cospi](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_cospi.html#__nv_cospi)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_coshf(System.Single)">
<summary>
Calculate the hyperbolic cosine of the input argument $x$. 

See [3.30.\_\_nv\_coshf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_coshf.html#__nv_coshf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_cosh(System.Double)">
<summary>
Calculate the hyperbolic cosine of the input argument $x$. 

See [3.29.\_\_nv\_cosh](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_cosh.html#__nv_cosh)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_cosf(System.Single)">
<summary>
Calculate the cosine of the input argument $x$ (measured in radians). 

See [3.28.\_\_nv\_cosf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_cosf.html#__nv_cosf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_cos(System.Double)">
<summary>
Calculate the cosine of the input argument $x$ (measured in radians). 

See [3.27.\_\_nv\_cos](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_cos.html#__nv_cos)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_copysignf(System.Single,System.Single)">
<summary>
Create a floating-point value with the magnitude $x$ and the sign of $y$. 

See [3.26.\_\_nv\_copysignf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_copysignf.html#__nv_copysignf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_copysign(System.Double,System.Double)">
<summary>
Create a floating-point value with the magnitude $x$ and the sign of $y$. 

See [3.25.\_\_nv\_copysign](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_copysign.html#__nv_copysign)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_clzll(System.Int64)">
<summary>
Count the number of consecutive leading zero bits, starting at the most significant bit (bit 63) of $x$.

See [3.24.\_\_nv\_clzll](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_clzll.html#__nv_clzll)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_clz(System.Int32)">
<summary>
Count the number of consecutive leading zero bits, starting at the most significant bit (bit 31) of $x$.

See [3.23.\_\_nv\_clz](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_clz.html#__nv_clz)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ceilf(System.Single)">
<summary>
Compute the smallest integer value not less than $x$.

See [3.22.\_\_nv\_ceilf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ceilf.html#__nv_ceilf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_ceil(System.Double)">
<summary>
Compute the smallest integer value not less than $x$.

See [3.21.\_\_nv\_ceil](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ceil.html#__nv_ceil)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_cbrtf(System.Single)">
<summary>
Calculate the cube root of $x$. 

See [3.20.\_\_nv\_cbrtf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_cbrtf.html#__nv_cbrtf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_cbrt(System.Double)">
<summary>
Calculate the cube root of $x$. 

See [3.19.\_\_nv\_cbrt](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_cbrt.html#__nv_cbrt)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_byte_perm(System.Int32,System.Int32,System.Int32)">
<summary>
Returns a 32-bit integer consisting of four bytes from eight input bytes provided in the two input integers $x$ and $y$, 
as specified by a selector, s. 

####Remarks

The input bytes are indexed as follows: 

* `input[0]` = x&lt;7:0&gt; 
* `input[1]` = x&lt;15:8&gt; 
* `input[2]` = x&lt;23:16&gt; 
* `input[3]` = x&lt;31:24&gt; 
* `input[4]` = y&lt;7:0&gt; 
* `input[5]` = y&lt;15:8&gt; 
* `input[6]` = y&lt;23:16&gt; 
* `input[7]` = y&lt;31:24&gt; 

The selector indices are as follows (the upper 16-bits of the selector are not used): 

* `selector[0]` = s&lt;2:0&gt; 
* `selector[1]` = s&lt;6:4&gt; 
* `selector[2]` = s&lt;10:8&gt; 
* `selector[3]` = s&lt;14:12&gt;


See [3.18.\_\_nv\_byte_perm](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_byte_perm.html#__nv_byte_perm)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_brevll(System.UInt64)">
<summary>
Reverses the bit order of the 64 bit unsigned integer $x$.

See [3.17.\_\_nv\_brevll](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_brevll.html#__nv_brevll)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_brev(System.UInt32)">
<summary>
Reverses the bit order of the 32 bit unsigned integer $x$.

See [3.16.\_\_nv\_brev](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_brev.html#__nv_brev)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_atanhf(System.Single)">
<summary>
Calculate the arc hyperbolic tangent of the input argument $x$.

See [3.15.\_\_nv\_atanhf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_atanhf.html#__nv_atanhf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_atanh(System.Double)">
<summary>
Calculate the arc hyperbolic tangent of the input argument $x$. 

See [3.14.\_\_nv\_atanh](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_atanh.html#__nv_atanh)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_atanf(System.Single)">
<summary>
Calculate the principal value of the arc tangent of the input argument $x$. 

See [3.13.\_\_nv\_atanf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_atanf.html#__nv_atanf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_atan2f(System.Single,System.Single)">
<summary>
Calculate the principal value of the arc tangent of the ratio of first and second input arguments $x / y$. The quadrant of the result is determined by the signs of inputs $x$ and $y$. 

See [3.12.\_\_nv\_atan2f](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_atan2f.html#__nv_atan2f)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_atan2(System.Double,System.Double)">
<summary>
Calculate the principal value of the arc tangent of the ratio of first and second input arguments $x / y$. The quadrant of the result is determined by the signs of inputs $x$ and $y$. 

See [3.11.\_\_nv\_atan2](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_atan2.html#__nv_atan2)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_atan(System.Double)">
<summary>
Calculate the principal value of the arc tangent of the input argument $x$. 

See [3.10.\_\_nv\_atan](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_atan.html#__nv_atan)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_asinhf(System.Single)">
<summary>
Calculate the arc hyperbolic sine of the input argument $x$. 

See [3.9.\_\_nv\_asinhf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_asinhf.html#__nv_asinhf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_asinh(System.Double)">
<summary>
Calculate the arc hyperbolic sine of the input argument $x$. 

See [3.8.\_\_nv\_asinh](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_asinh.html#__nv_asinh)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_asinf(System.Single)">
<summary>
Calculate the principal value of the arc sine of the input argument $x$. 

See [3.7.\_\_nv\_asinf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_asinf.html#__nv_asinf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_asin(System.Double)">
<summary>
Calculate the principal value of the arc sine of the input argument $x$. 

See [3.6.\_\_nv\_asin](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_asin.html#__nv_asin)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_acoshf(System.Single)">
<summary>
Calculate the nonnegative arc hyperbolic cosine of the input argument $x$. 

See [3.5.\_\_nv\_acoshf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_acoshf.html#__nv_acoshf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_acosh(System.Double)">
<summary>
Calculate the nonnegative arc hyperbolic cosine of the input argument $x$. 

See [3.4.\_\_nv\_acosh](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_acosh.html#__nv_acosh)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_acosf(System.Single)">
<summary>
Calculate the principal value of the arc cosine of the input argument $x$. 

See [3.3.\_\_nv\_acosf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_acosf.html#__nv_acosf)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_acos(System.Double)">
<summary>
Calculate the principal value of the arc cosine of the input argument $x$. 

See [3.2.\_\_nv\_acos](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_acos.html#__nv_acos)
</summary>
</member>
<member name="M:Alea.CUDA.LibDevice.__nv_abs(System.Int32)">
<summary>
Determine the absolute value of the 32-bit signed integer $x$.

See [3.1. \_\_nv\_abs](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_abs.html#__nv_abs)
</summary>
</member>
<member name="T:Alea.CUDA.LibDevice">
<summary>
Provides basic library for kernel authoring. 
Please reference the [NVidia LibDevice User&apos;s Guide](http://docs.nvidia.com/cuda/libdevice-users-guide/index.html)
for more detail.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.License.DisposableObject">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.License.MachineId.MacOSX">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.License.MachineId.Linux">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.License.MachineId.Windows">

</member>
<member name="T:Alea.CUDA.License.MachineId">

</member>
<member name="T:Alea.CUDA.License">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.MemoryUtil.gather``1(Alea.CUDA.IWorkerContext,Alea.CUDA.deviceptr{``0},``0[],System.Int32,System.Int32)">
<summary>
Gathers data from device to host.
 
#### Parameters
 - `ctx` : worker context, you can get this by `worker.Context`.
 - `dptr` : the source device pointer.
 - `offset` : the start offset in __host array__.
 - `length` : number of elements to gather.
</summary>
</member>
<member name="M:Alea.CUDA.MemoryUtil.scatter``1(Alea.CUDA.IWorkerContext,``0[],Alea.CUDA.deviceptr{``0},System.Int32,System.Int32)">
<summary>
Scatters host data to device via a device pointer. 

#### Parameters
 - `ctx` : worker context, you can get this by `worker.Context`.
 - `host` : a host array of data.
 - `dptr` : the destination device pointer.
 - `offset` : the start offset in __host array__.
 - `length` : number of elements to scatter.
</summary>
</member>
<member name="T:Alea.CUDA.MemoryUtil">
<summary>
 Provides some device memory utilities.
</summary>
</member>
<member name="T:Alea.CUDA.NVVMInterop.nvvmProgram">
<summary>
 P/Invoke alias type `nativeint -&gt; nvvmProgram`.
</summary>
</member>
<member name="T:Alea.CUDA.NVVMInterop.nvvmResult">
<summary>
 P/Invoke alias type `__nvvmResult__ -&gt; nvvmResult`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.NVVMInterop.__nvvmResult__">
<summary>
 P/Invoke enum type `__nvvmResult__` (10 enumerators).
</summary>
</member>
<member name="T:Alea.CUDA.NVVMInterop.size_t">
<summary>
 P/Invoke alias type `nativeint -&gt; size_t`.
</summary>
</member>
<member name="M:Alea.CUDA.NVVMInterop.nvvmGetErrorStringEx(Alea.CUDA.NVVMInterop.__nvvmResult__)">
<summary>
 Gets error string.
</summary>
</member>
<member name="M:Alea.CUDA.NVVMInterop.nvvmSafeCall(Alea.CUDA.NVVMInterop.__nvvmResult__)">
<summary>
 Throws exception when the result is not success.
</summary>
</member>
<member name="M:Alea.CUDA.NVVMInterop.nvvmGetProgramLog(System.IntPtr,System.Text.StringBuilder)">
<summary>
 P/Invoke function for `nvvmGetProgramLog@nvvmGetProgramLog`.
</summary>
</member>
<member name="P:Alea.CUDA.NVVMInterop.nvvmGetProgramLog'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.NVVMInterop.nvvmGetProgramLogSize(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `nvvmGetProgramLogSize@nvvmGetProgramLogSize`.
</summary>
</member>
<member name="P:Alea.CUDA.NVVMInterop.nvvmGetProgramLogSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.NVVMInterop.nvvmGetCompiledResult(System.IntPtr,System.Byte*)">
<summary>
 P/Invoke function for `nvvmGetCompiledResult@nvvmGetCompiledResult`.
</summary>
</member>
<member name="P:Alea.CUDA.NVVMInterop.nvvmGetCompiledResult'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.NVVMInterop.nvvmGetCompiledResultSize(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `nvvmGetCompiledResultSize@nvvmGetCompiledResultSize`.
</summary>
</member>
<member name="P:Alea.CUDA.NVVMInterop.nvvmGetCompiledResultSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.NVVMInterop.nvvmVerifyProgram(System.IntPtr,System.Int32,System.SByte**)">
<summary>
 P/Invoke function for `nvvmVerifyProgram@nvvmVerifyProgram`.
</summary>
</member>
<member name="P:Alea.CUDA.NVVMInterop.nvvmVerifyProgram'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.NVVMInterop.nvvmCompileProgram(System.IntPtr,System.Int32,System.SByte**)">
<summary>
 P/Invoke function for `nvvmCompileProgram@nvvmCompileProgram`.
</summary>
</member>
<member name="P:Alea.CUDA.NVVMInterop.nvvmCompileProgram'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.NVVMInterop.nvvmAddModuleToProgram(System.IntPtr,System.Byte*,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `nvvmAddModuleToProgram@nvvmAddModuleToProgram`.
</summary>
</member>
<member name="P:Alea.CUDA.NVVMInterop.nvvmAddModuleToProgram'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.NVVMInterop.nvvmDestroyProgram(System.IntPtr*)">
<summary>
 P/Invoke function for `nvvmDestroyProgram@nvvmDestroyProgram`.
</summary>
</member>
<member name="P:Alea.CUDA.NVVMInterop.nvvmDestroyProgram'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.NVVMInterop.nvvmCreateProgram(System.IntPtr*)">
<summary>
 P/Invoke function for `nvvmCreateProgram@nvvmCreateProgram`.
</summary>
</member>
<member name="P:Alea.CUDA.NVVMInterop.nvvmCreateProgram'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.NVVMInterop.nvvmVersion(System.Int32*,System.Int32*)">
<summary>
 P/Invoke function for `nvvmVersion@nvvmVersion`.
</summary>
</member>
<member name="P:Alea.CUDA.NVVMInterop.nvvmVersion'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.NVVMInterop.nvvmGetErrorString(Alea.CUDA.NVVMInterop.__nvvmResult__)">
<summary>
 P/Invoke function for `nvvmGetErrorString@nvvmGetErrorString`.
</summary>
</member>
<member name="P:Alea.CUDA.NVVMInterop.nvvmGetErrorString'">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.NVVMInterop.NVVMException">
<summary>
 Exception of P/Invoke result enum.
</summary>
</member>
<member name="T:Alea.CUDA.NVVMInterop">
<summary>
 Raw P/Invoke types and functions for NVVM.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Overrides.CustomFromUnmanagedMarshaler">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Overrides.CustomToUnmanagedMarshaler">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Overrides.CustomPropertyGetBuilders">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Overrides.CustomCallBuilders">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Overrides.CustomConstantBuilders">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Overrides.CustomTypeBuilders">

</member>
<member name="T:Alea.CUDA.Overrides">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Posix">

</member>
<member name="M:Alea.CUDA.QualifierPatterns.|Const|Mutable|Volatile|(Alea.CUDA.TypeQualifier)">
<summary>
 Active pattern for qualifier.
</summary>
</member>
<member name="T:Alea.CUDA.QualifierPatterns">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.MonitorElement.Parameters(System.String)">
<summary>
[omit]
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.MonitorElement.Name(System.String)">
<summary>
Element attribute `name` for setting the name of the monitor. The default
value is `none`:
 
- `none` : do nothing about messages.
- `default` : this monitor will print out the high importance message to `stderr`.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.MonitorElement.Parameters">
<summary>
[omit]
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.MonitorElement.Name">
<summary>
Element attribute `name` for setting the name of the monitor. The default
value is `none`:
 
- `none` : do nothing about messages.
- `default` : this monitor will print out the high importance message to `stderr`.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SettingElements.MonitorElement">
<summary>
Configures a default event monitor.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.LicenseElement.ServerProxy(System.String)">
<summary>
[omit]
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.LicenseElement.RepositoryPath(System.String)">
<summary>
Element attribute `repositoryPath` for setting the path for license repository.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.LicenseElement.ServerProxy">
<summary>
[omit]
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.LicenseElement.RepositoryPath">
<summary>
Element attribute `repositoryPath` for setting the path for license repository.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SettingElements.LicenseElement">
<summary>
Configures properties for license system.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.CULibElement.Version(System.String)">
<summary>
Specify the version of this library, e.g. `6.5`.
If the value is empty string, on Windows, a default version will be
choosen, such as `cublas 6.5`; on Posix system, library with no version
will be choosen. The default value is empty string.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.CULibElement.Path(System.String)">
<summary>
Element attribute `path` to set path for NVIDIA CUDA library.
If the value is empty string, Alea GPU will search the library
in system path. The default value is empty string.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.CULibElement.Version">
<summary>
Specify the version of this library, e.g. `6.5`.
If the value is empty string, on Windows, a default version will be
choosen, such as `cublas 6.5`; on Posix system, library with no version
will be choosen. The default value is empty string.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.CULibElement.Path">
<summary>
Element attribute `path` to set path for NVIDIA CUDA library.
If the value is empty string, Alea GPU will search the library
in system path. The default value is empty string.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SettingElements.CULibElement">
<summary>
If you need to use Alea.CUDA&apos;s wrapper for NVIDIA CUDA libraries, such as cuBLAS,
you need make sure Alea.CUDA can find those libraries. This configuration element
allows you to set the path of those libraries explicitly.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.SettingElements.JITCompileElement.Level(System.String)">
<summary>
Element attribute `level` to set the default JIT compiling level.
The default value is `Optimized`. Valid values are following:

- `Diagnostic` : using `DiagnosticConfig`, for debugging;
- `Profiling` : using `ProfilingConfig`, for source code correlation profiling;
- others : using `OptimizedConfig`, for optimized compiling.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.JITCompileElement.Level">
<summary>
Element attribute `level` to set the default JIT compiling level.
The default value is `Optimized`. Valid values are following:

- `Diagnostic` : using `DiagnosticConfig`, for debugging;
- `Profiling` : using `ProfilingConfig`, for source code correlation profiling;
- others : using `OptimizedConfig`, for optimized compiling.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SettingElements.JITCompileElement">
<summary>
Configures the default behavior for JIT compiling.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.CUDADriverElement.DefaultPath(System.String)">
<summary>
Element attribute `defaultPath` to set the default path that Alea.CUDA
uses to search for your CUDA driver. The default value is empty string.

You can use some variables in configuring this:
 
- `@base` : will be replaced by `AppDomain.CurrentDomain.BaseDirectory`.
- `@cwd` : will be replaced by current working directory.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.CUDADriverElement.DefaultName(System.String)">
<summary>
Element attribute `defaultName` to set the default CUDA driver name.
By default, it has different names according to your operating system:

- Windows : `nvcuda.dll`
- MacOSX : `libcuda.dylib`
- Linux : `libcuda.so` 
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.CUDADriverElement.DefaultPath">
<summary>
Element attribute `defaultPath` to set the default path that Alea.CUDA
uses to search for your CUDA driver. The default value is empty string.

You can use some variables in configuring this:
 
- `@base` : will be replaced by `AppDomain.CurrentDomain.BaseDirectory`.
- `@cwd` : will be replaced by current working directory.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.CUDADriverElement.DefaultName">
<summary>
Element attribute `defaultName` to set the default CUDA driver name.
By default, it has different names according to your operating system:

- Windows : `nvcuda.dll`
- MacOSX : `libcuda.dylib`
- Linux : `libcuda.so` 
</summary>
</member>
<member name="M:Alea.CUDA.SettingElements.CUDADriverElement.GetCUDADriverFilePath(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SettingElements.CUDADriverElement">
<summary>
Alea.CUDA uses the CUDA driver installed on your system. When there is 
non-standard installation or the CUDA driver can not be found in your path,
you need to set this so that Alea.CUDA can find your CUDA driver.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.ResourceElement.Path(System.String)">
<summary>
Element attribute `path` to set the directory path where Alea.CUDA will
try to find the libraries or natives.
If the libraries or natives are not found in this path, Alea.CUDA will
try to find the resource assemblies, and extract libraries or natives
under this folder.

You can use some variables in configuring this:
 
- `@base` : will be replaced by `AppDomain.CurrentDomain.BaseDirectory`.
- `@cwd` : will be replaced by current working directory.

The default value is `@base`.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.ResourceElement.AssemblyPath(System.String)">
<summary>
Element attribute `assemblyPath` to set the folder that contains resource assemblies.
When Alea.CUDA cannot find native resources for JIT compiling, it will 
try to extract those native resources from resource assemblies.

You can use some variables in configuring this:
 
- `@base` : will be replaced by `AppDomain.CurrentDomain.BaseDirectory`.
- `@cwd` : will be replaced by current working directory.

The default value is `@base`.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.ResourceElement.Path">
<summary>
Element attribute `path` to set the directory path where Alea.CUDA will
try to find the libraries or natives.
If the libraries or natives are not found in this path, Alea.CUDA will
try to find the resource assemblies, and extract libraries or natives
under this folder.

You can use some variables in configuring this:
 
- `@base` : will be replaced by `AppDomain.CurrentDomain.BaseDirectory`.
- `@cwd` : will be replaced by current working directory.

The default value is `@base`.
</summary>
</member>
<member name="P:Alea.CUDA.SettingElements.ResourceElement.AssemblyPath">
<summary>
Element attribute `assemblyPath` to set the folder that contains resource assemblies.
When Alea.CUDA cannot find native resources for JIT compiling, it will 
try to extract those native resources from resource assemblies.

You can use some variables in configuring this:
 
- `@base` : will be replaced by `AppDomain.CurrentDomain.BaseDirectory`.
- `@cwd` : will be replaced by current working directory.

The default value is `@base`.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SettingElements.ResourceElement">
<summary>
Configures resources. There are resources needed for
JIT compiling such as GPU bitcode libraries and native compilers. If you
need JIT compiling, you must make sure these resources are properly set.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SettingElements.DiagnosticsElement">
<summary>
Configures diagnostic settings. This is used internally.
</summary>
</member>
<member name="T:Alea.CUDA.SettingElements">
<summary>
 This module contains configuration element types for settings.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.bessel_jn(System.Int32,System.Double)">
<summary>
Bessel function of the first kind of order n.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.gammai(System.Int32)">
<summary>
Gamma function for integer values.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.factorial(System.Int32)">
<summary>
Factorial, used in Bessel functions.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.gammapdf_precalc(System.Double,System.Double,System.Double,System.Double)">
<summary>
Evaluates the pdf of a gamma distribution at the point x
with a pre-calculated value of log (gamma alpha).
Both beta and alpha must be positive.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.gammapdf(System.Double,System.Double,System.Double)">
<summary>
Evaluates the pdf of a gamma distribution at the point x.
Both beta and alpha must be positive.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.gamma(System.Double)">
<summary>
Gamma function for a positive real argument $x$ defined as
 
$$$
\begin{equation}
log \Gamma(x) = log \int_0^\infty t^{x-1} e^{-t} dt
\end{equation}

First calculates the log gamma function and then takes the exponential of it.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.lgamma(System.Double)">
<summary>
Log(Gamma) function for a positive real argument $x$ defined as
 
$$$
\begin{equation}
log \Gamma(x) = log \int_0^\infty t^{x-1} e^{-t} dt
\end{equation}

Computation is based on an algorithm outlined in references 1 and 2.
Uses rational functions that theoretically approximate log (gamma) to at least 18 significant decimal digits. 
The approximation for x &gt; 12 is from reference 3, while approximations for x &lt; 12.0 are similar to those in
reference 1, but are unpublished.

Original FORTRAN77 version by William Cody, Laura Stoltz.

Reference:

    William Cody, Kenneth Hillstrom,
    Chebyshev Approximations for the Natural Logarithm of the
    Gamma Function,
    Mathematics of Computation,
    Volume 21, Number 98, April 1967, pages 198-203.

    Kenneth Hillstrom,
    ANL/AMD Program ANLC366S, DGAMMA/DLGAMA,
    May 1969.

    John Hart, Ward Cheney, Charles Lawson, Hans Maehly,
    Charles Mesztenyi, John Rice, Henry Thatcher,
    Christoph Witzgall,
    Computer Approximations,
    Wiley, 1968,
    LC: QA297.C64.

The implementation is tested against Matlab.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.normpdff(System.Single)">
<summary>
Normal probability density function

$$$ 
\begin{equation} 
\frac{1}{\sqrt{2\pi}} exp\left(-\frac{x^2}{2}\right) 
\end{equation}

The value is set to zero outside [-maxForPdf, maxForPdf]
The value maxForPdf is calculated as follows
 
$$$ 
\begin{equation} 
\exp\left\{-\left(\log(\sqrt(2 \pi)) + \frac{x^2}{2} \right) \right\} = \text{DBL_MIN} = 2^{-1021} 
\end{equation}

This results in $ x = \pm 37.5974555739746700 = 37.59667968750000 $ using 52 bit.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.normpdf(System.Double)">
<summary>
Normal probability density function

$$$ 
\begin{equation} 
\frac{1}{\sqrt{2\pi}} exp\left(-\frac{x^2}{2}\right) 
\end{equation}

The value is set to zero outside [-maxForPdf, maxForPdf]
The value maxForPdf is calculated as follows
 
$$$ 
\begin{equation} 
\exp\left\{-\left(\log(\sqrt(2 \pi)) + \frac{x^2}{2} \right) \right\} = \text{DBL_MIN} = 2^{-1021} 
\end{equation}

This results in $ x = \pm 37.5974555739746700 = 37.59667968750000 $ using 52 bit.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.normcdfinv_sb_ex(System.Double)">
<summary>
Inverse normal cumulative distribution function
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.normcdfinvf_sb(System.Single)">
<summary>
Inverse normal cumulative distribution function (float32).
Implementation based on [Shaw-Brickman](http://arxiv.org/pdf/0901.0638v5.pdf)
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.normcdfinv_sb(System.Double)">
<summary>
Inverse normal cumulative distribution function.
Implementation based on [Shaw-Brickman](http://arxiv.org/pdf/0901.0638v5.pdf)
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.normcdfinv_ack(System.Double)">
<summary>
Inverse normal cumulative distribution function
[Acklam](http://home.online.no/~pjacklam/notes/invnorm/).
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.normcdff_as(System.Single)">
<summary>
Cumulative normal distribution function. 
   
$$$
\begin{equation} 
\Phi(x) = \int_{-\infty}^x \phi(x) = \int_{-\infty}^x \frac{1}{\sqrt{2\pi}} \exp\left(\frac{-u^2}{2}\right) du
\end{equation}
 
by a simple rational approximation. It uses the asymptotic expansion (26.2.12)
in [Abramowitz-Stegun, p. 932.](http://www.math.sfu.ca/~cbm/aands/page_932.htm)

For most cases this version is accurate enough, in particular for $ x \in [-6, 6] $.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.normcdf_as(System.Double)">
<summary>
Cumulative normal distribution function. 
   
$$$
\begin{equation} 
\Phi(x) = \int_{-\infty}^x \phi(x) = \int_{-\infty}^x \frac{1}{\sqrt{2\pi}} \exp\left(\frac{-u^2}{2}\right) du
\end{equation}
 
by a simple rational approximation. It uses the asymptotic expansion (26.2.12)
in [Abramowitz-Stegun, p. 932.](http://www.math.sfu.ca/~cbm/aands/page_932.htm)

For most cases this version is accurate enough, in particular for $ x \in [-6, 6] $.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.normcdf(System.Double)">
<summary>
Cumulative normal distribution function
   
Default implmentation based on error function.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.normcdff_erf(System.Single)">
<summary>
Cumulative normal distribution function
   
$$$
\begin{equation} 
\Phi(x) = \int_{-\infty}^x \phi(x) = \int_{-\infty}^x \frac{1}{\sqrt{2\pi}} \exp\left(\frac{-u^2}{2}\right) du
\end{equation}

Implemented with error function.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.normcdf_erf(System.Double)">
<summary>
Cumulative normal distribution function
   
$$$
\begin{equation} 
\Phi(x) = \int_{-\infty}^x \phi(x) = \int_{-\infty}^x \frac{1}{\sqrt{2\pi}} \exp\left(\frac{-u^2}{2}\right) du
\end{equation}

Implemented with error function.
</summary>
</member>
<member name="P:Alea.CUDA.SpecialFunction.oneOverSqrt2">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.erfcx_jw(System.Double)">
<summary>
Scaled complementary error function 

$$$
\begin{equation}
\erfcx(x) = e^{x^2} \erfc(x)
\end{equation}
 
Implementation based on C code of [libcerf](http://apps.jcns.fz-juelich.de/libcerf) by
 
- Steven G. Johnson, Massachusetts Institute of Technology, 2012
- Joachim Wuttke, Forschungszentrum Jülich, 2013, package maintainer

This function combines a few different ideas.

First, for x &gt; 50, it uses a continued-fraction expansion (same as
for the Faddeeva function, but with algebraic simplifications for z=i*x).

Second, for 0 &lt;= x &lt;= 50, it uses Chebyshev polynomial approximations,
but with two twists:

a) It maps x to y = 4 / (4+x) in [0,1].  This simple transformation,
inspired by a similar transformation in the octave-forge/specfun
erfcx by Soren Hauberg, results in much faster Chebyshev convergence
than other simple transformations I have examined.
 
b) Instead of using a single Chebyshev polynomial for the entire
[0,1] y interval, we break the interval up into 100 equal
subintervals, with a switch/lookup table, and use much lower
degree Chebyshev polynomials in each subinterval. This greatly
improves performance in my tests.
 
For x &lt; 0, we use the relationship erfcx(-x) = 2 exp(x^2) - erfc(x),
with the usual checks for overflow etcetera.

Performance-wise, it seems to be substantially faster than either
the SLATEC DERFC function [or an erfcx function derived therefrom]
or Cody&apos;s CALERF function (from netlib.org/specfun), while
retaining near machine precision in accuracy.

</summary>
</member>
<member name="P:Alea.CUDA.SpecialFunction.ispi">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.erfcx_y100(System.Double)">
<summary>
Ported from the C code of Steven G. Johnson, October 2012.

Given y100=100*y, where y = 4/(4+x) for x &gt;= 0, compute erfc(x).

Uses a look-up table of 100 different Chebyshev polynomials
for y intervals [0,0.01], [0.01,0.02], ...., [0.99,1], generated
with the help of Maple and a little shell script.  This allows
the Chebyshev polynomials to be of significantly lower degree (about 1/4)
compared to fitting the whole [0,1] interval with a single polynomial.

</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.erfcx_a(System.Double)">
<summary>
Original version, superseded by the new implementation below
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.erfcx(System.Double)">
<summary>
Scaled complementary error function 

$$$
\begin{equation}
\erfcx(x) = e^{x^2} \erfc(x)
\end{equation}

Simple implementation giving approximately 12-13 digit accuracy globally.
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.erf(System.Double)">
<summary>
Error function

$ \DeclareMathOperator{\erf}{erf} $
$ \DeclareMathOperator{\erfc}{erfc} $
$ \DeclareMathOperator{\sgn}{sgn} $

$$$
\begin{equation}
\erf(x) = \frac{2}{\sqrt{\pi}}\int_0^x \! exp(-t \cdot t) dt
\end{equation}

$$$
\begin{equation}
\erfc(x) =  1-\erf(x)
\end{equation}

Source: Sun FDMLib 5.3

[Original FORTRAN version can be found here](http://www.netlib.org/specfun/erf)
 
Reference:
 
W. J. Cody,
  Rational Chebychev approximations for the
  error function.
  Mathematics of Computations 23 (1969) 631-637
 
W. J. Cody,
  Performance evaluations of programs for the
  error and complementary error function.
  Transactions of the ACM on Mathematical Software,
  16:1 (March 1990) 38-46
 
W. J. Cody,
  SPECFUN - A portable special function package,
  In: New Computing environments;
  Microcomputers in Large-Scale Scientific Computing,
  A. Wouk, SIAM, 1987, 1-12
 
W. J. Cody,
  [Specfun/erf](http://www.netlib.org/specfun/erf)

For calculations with complex arguments see:
 
Walter Gautschi
  &quot;Efficient computation of the complex error function&quot;
  SIAM J. Numer. Anal.
  7:1 (1970), 187-198
 
J.A.C. Weideman
  &quot;Computation of the complex error function&quot;
  SIAM J. Numer. Anal.
  31:5 (1994), 1497-1518
 

Note that:
 
- $ \erf(-x) = -\erf(x) $
- $ \erfc(-x) = 2 - \erfc(x) $

Method 1. 

For $ | x | \in [0, 0.84375] $:

$ \erf(x)  = x + x \cdot R(x^2) $
 
$$$
\begin{equation}        
\erfc(x) = \left\{
    \begin{array}{l l}
        1 - \erf(x) &amp; \quad \text{ if $x \in [-.84375,0.25]$} \\
        0.5 + ((0.5-x)-x \cdot R)  &amp; \quad \text{if $x \in [0.25,0.84375]$}
    \end{array} \right\}
\end{equation}

where $ R = \frac{P}{Q} $ where P is an odd poly of degree 8 and
Q is an odd poly of degree 10.
            
-57.90
$ | R - \frac{\erf(x)-x}{x} | &lt;= 2 $


Remark: 

The formula is derived by noting
 
$$$
\begin{equation}       
- \erf(x) = \frac{2}{\sqrt{\pi}}*(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots)
\end{equation}

and that

$$$
\begin{equation}
\frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
\end{equation}

is close to one. 

The interval is chosen because the fix
point of $ \erf(x) $ is near $ 0.6174 $ (i.e., $ \erf(x) = x $ when $x$ is
near $0.6174$), and by some experiment, $0.84375$ is chosen to
guarantee the error is less than one ulp for $erf$.

Method 2. 

For $ |x| \in [0.84375,1.25]$, let $ s = |x| - 1 $, and $ c = 0.84506291151 $ rounded to single (24 bits)

$$$
\begin{equation}
\erf(x)  = \sgn(x)(c  + \frac{P1(s)}{Q1(s)})
\end{equation}

$$$
\begin{equation}        
\erfc(x) = \left\{
    \begin{array}{l l}
        (1-c)  - \frac{P1(s)}{Q1(s)}        &amp; \quad \text{ if $ x &gt; 0 $} \\
        1 + (c + \frac{P1(s)}{Q1(s)})       &amp; \quad \text{ if $ x &lt; 0 $} \\
        | \frac{P1}{Q1} - (\erf(|x|) - c) | &amp; \quad 2^{-59.06}
    \end{array} \right\}
\end{equation}

Remark: here we use the taylor series expansion at $x = 1$.

$$$
\begin{equation}
\erf(1+s) = \erf(1) + s \cdot Poly(s) = 0.845 \ldots + \frac{P1(s)}{Q1(s)}
\end{equation}

That is, we use rational approximation to approximate

$ \erf(1+s) - (c = (single)0.84506291151) $

Note that $ |\frac{P1}{Q1} |&lt; 0.078 $ for $ x \in [0.84375,1.25] $ where

- $ P1(s) = \text{degree 6 poly in s} $
- $ Q1(s) = \text{degree 6 poly in s} $

Method 3. 

For $ x \in [1.25,\frac{1}{0.35(~2.857143)}] $:

$$$
\begin{equation}
\erfc(x) = (\frac{1}{x}) \cdot \exp(-x \cdot x-0.5625 + \frac{R1}{S1})
\end{equation}

$$$
\begin{equation}
\erf(x)  = 1 - \erfc(x)
\end{equation}

where

- $ R1(z) = \text{degree 7 poly in z,} (z = \frac{1}{x^2}) $
- $ S1(z) = \text{degree 8 poly in z} $



Method 4. 

For $ x \in [\frac{1}{0.35},28] $

$$$
\begin{equation}
\erfc(x) = \left\{
    \begin{array}{l l}
        (\frac{1}{x})\exp(-x(x-0.5625+\frac{R2}{S2}))           &amp; \quad \text{ if $ x &gt; 0 $} \\
        2.0 - \frac{1}{x}\exp(-x \cdot x-0.5625+\frac{R2}{S2})  &amp; \quad \text{ if $ -6 &lt; x &lt; 0 $} \\
        2.0 - tiny                                              &amp; \quad \text{ if $ x &lt;= -6 $}
    \end{array} \right\}
\end{equation}

$$$
\begin{equation}
\erf(x)  = \left\{
    \begin{array}{l l}
        \sgn(x)(1.0 - \erfc(x))     &amp; \quad \text{ if $ x &lt; 6 $, else} \\
        \sgn(x)*(1.0 - tiny)        &amp; \quad
    \end{array} \right\}
\end{equation}

where

- $ R2(z) = $ degree 6 poly in z, $ z = \frac{1}{x^2} $
- $ S2(z) = $ degree 7 poly in z

Note1:

To compute $ \exp(-x \cdot x-0.5625+\frac{R}{S}) $, let s be a single precision number and $ s := x $ ; then:

- $ -x \cdot x = -s \cdot s + (s-x)(s+x) $
- $ \exp(-x \cdot x-0.5626+\frac{R}{S}) = \exp(-s \cdot s-0.5625)exp((s-x)(s+x)+\frac{R}{S}) $

Note2:

Here 4 and 5 make use of the asymptotic series

$$$
\begin{equation}
\erfc(x) \approx{\frac{\exp(-x \cdot x)}{x \cdot \sqrt{\pi}} \cdot (1 + Poly(\frac{1}{x^2})}
\end{equation}

We use rational approximation to approximate

$$$
\begin{equation}
g(s) = f(\frac{1}{x^2}) = \log(\erfc(x) \cdot x) - x \cdot x + 0.5625
\end{equation}

Here is the error bound for $ \frac{R1}{S1} $ and $ \frac{R2}{S2} $

- $ |\frac{R1}{S1} - f(x)|  &lt; 2^{-62.57} $
- $ |\frac{R2}{S2} - f(x)|  &lt; 2^{-61.52} $

For $ \infty &gt; x &gt;= 28 $:

$$$
\begin{equation}
\erf(x)  = \sgn(x)(1 - tiny)  \text{(raise inexact)}
\end{equation}

$$$
\begin{equation}
\erfc(x) = \left\{
    \begin{array}{l l}
    tiny \cdot tiny      &amp; \quad \text{(raise underflow) if $ x &gt; 0 $} \\
    2 - tiny            &amp; \quad \text{ if $ x &lt; 0 $}
    \end{array} \right\}
\end{equation}

Special cases:

- $ \erf(0)  = 0 $ 
- $ \erf(\infty) = 1 $ 
- $ \erf(-\infty) = -1 $
- $ \erfc(0) = 1 $
- $ \erfc(\infty) = 0 $
- $ \erfc(-\infty) = 2 $
- $ \erf(NaN) $ is NaN
- $ \erfc(NaN) $ is NaN

`ConstantsErf` contains coefficients for approximation of the following functions 

- $ \erf \in [0,0.84375] $
- $ \erf \in [0.84375, 1.25] $
- $ \erfc \in [1.25, \frac{1}{0.35}] $
- $ \erfc \in [\frac{1}{0.35}, 28] $
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.erfc(System.Double)">
<summary>
Complementary error function

$ \DeclareMathOperator{\erf}{erf} $
$ \DeclareMathOperator{\erfc}{erfc} $
$ \DeclareMathOperator{\sgn}{sgn} $
    
$$$
\begin{equation}
\erf(x) = \frac{2}{\sqrt{\pi}}\int_0^x \! exp(-t \cdot t) dt
\end{equation}

$$$
\begin{equation}
\erfc(x) =  1-\erf(x)
\end{equation}

Source: Sun FDMLib 5.3

[Original FORTRAN version can be found here](http://www.netlib.org/specfun/erf)
 
Reference:
 
W. J. Cody,
  Rational Chebychev approximations for the
  error function.
  Mathematics of Computations 23 (1969) 631-637
 
W. J. Cody,
  Performance evaluations of programs for the
  error and complementary error function.
  Transactions of the ACM on Mathematical Software,
  16:1 (March 1990) 38-46

W. J. Cody,
  SPECFUN - A portable special function package,
  In: New Computing environments;
  Microcomputers in Large-Scale Scientific Computing,
  A. Wouk, SIAM, 1987, 1-12
 
W. J. Cody,
  [Specfun/erf](http://www.netlib.org/specfun/erf)
 
For calculations with complex arguments see:

Walter Gautschi
  &quot;Efficient computation of the complex error function&quot;
  SIAM J. Numer. Anal.
  7:1 (1970), 187-198

J.A.C. Weideman
  &quot;Computation of the complex error function&quot;
  SIAM J. Numer. Anal.
  31:5 (1994), 1497-1518


Note that:

- $ \erf(-x) = -\erf(x) $
- $ \erfc(-x) = 2 - \erfc(x) $

Method 1. 

For $ | x | \in [0, 0.84375] $:

$ \erf(x)  = x + x \cdot R(x^2) $
 
$$$
\begin{equation}
\erfc(x) = \left\{
    \begin{array}{l l}
        1 - \erf(x) &amp; \quad \text{ if $x \in [-.84375,0.25]$} \\
        0.5 + ((0.5-x)-x \cdot R)  &amp; \quad \text{if $x \in [0.25,0.84375]$}
    \end{array} \right\}
\end{equation}

where $ R = \frac{P}{Q} $ where P is an odd poly of degree 8 and
Q is an odd poly of degree 10.
            
-57.90
$ | R - \frac{\erf(x)-x}{x} | &lt;= 2 $


Remark: 

The formula is derived by noting
 
$$$
\begin{equation}
\erf(x) = \frac{2}{\sqrt{\pi}}*(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots)
\end{equation}

and that

$$$
\begin{equation}
\frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
\end{equation}

is close to one. 

The interval is chosen because the fix
point of $ \erf(x) $ is near $ 0.6174 $ (i.e., $ \erf(x) = x $ when $x$ is
near $0.6174$), and by some experiment, $0.84375$ is chosen to
guarantee the error is less than one ulp for $erf$.

Method 2. 

For $ |x| \in [0.84375,1.25]$, let $ s = |x| - 1 $, and $ c = 0.84506291151 $ rounded to single (24 bits)

$$$
\begin{equation}
\erf(x)  = \sgn(x)(c  + \frac{P1(s)}{Q1(s)})
\end{equation}

$$$
\begin{equation}        
\erfc(x) = \left\{
    \begin{array}{l l}
        (1-c)  - \frac{P1(s)}{Q1(s)}        &amp; \quad \text{ if $ x &gt; 0 $} \\
        1 + (c + \frac{P1(s)}{Q1(s)})       &amp; \quad \text{ if $ x &lt; 0 $} \\
        | \frac{P1}{Q1} - (\erf(|x|) - c) | &amp; \quad 2^{-59.06}
    \end{array} \right\}
\end{equation}

Remark: here we use the taylor series expansion at $x = 1$.

$$$
\begin{equation}
\erf(1+s) = \erf(1) + s \cdot Poly(s) = 0.845 \ldots + \frac{P1(s)}{Q1(s)}
\end{equation}

That is, we use rational approximation to approximate

$ \erf(1+s) - (c = (single)0.84506291151) $

Note that $ |\frac{P1}{Q1} |&lt; 0.078 $ for $ x \in [0.84375,1.25] $ where

- $ P1(s) = \text{degree 6 poly in s} $
- $ Q1(s) = \text{degree 6 poly in s} $

Method 3. 

For $ x \in [1.25,\frac{1}{0.35(~2.857143)}] $:

$$$
\begin{equation}
\erfc(x) = (\frac{1}{x}) \cdot \exp(-x \cdot x-0.5625 + \frac{R1}{S1})
\end{equation}

$$$
\begin{equation}
\erf(x)  = 1 - \erfc(x)
\end{equation}

where

- $ R1(z) = \text{degree 7 poly in z,} (z = \frac{1}{x^2}) $
- $ S1(z) = \text{degree 8 poly in z} $



Method 4. 

For $ x \in [\frac{1}{0.35},28] $

$$$
\begin{equation}
\erfc(x) = \left\{
    \begin{array}{l l}
        (\frac{1}{x})\exp(-x(x-0.5625+\frac{R2}{S2}))           &amp; \quad \text{ if $ x &gt; 0 $} \\
        2.0 - \frac{1}{x}\exp(-x \cdot x-0.5625+\frac{R2}{S2})  &amp; \quad \text{ if $ -6 &lt; x &lt; 0 $} \\
        2.0 - tiny                                              &amp; \quad \text{ if $ x &lt;= -6 $}
    \end{array} \right\}
\end{equation}

$$$
\begin{equation}
\erf(x)  = \left\{
    \begin{array}{l l}
        \sgn(x)(1.0 - \erfc(x))     &amp; \quad \text{ if $ x &lt; 6 $, else} \\
        \sgn(x)*(1.0 - tiny)        &amp; \quad
    \end{array} \right\}
\end{equation}

where

- $ R2(z) = $ degree 6 poly in z, $ z = \frac{1}{x^2} $
- $ S2(z) = $ degree 7 poly in z

Note1:

To compute $ \exp(-x \cdot x-0.5625+\frac{R}{S}) $, let s be a single precision number and $ s := x $ ; then:

- $ -x \cdot x = -s \cdot s + (s-x)(s+x) $
- $ \exp(-x \cdot x-0.5626+\frac{R}{S}) = \exp(-s \cdot s-0.5625)exp((s-x)(s+x)+\frac{R}{S}) $

Note2:

Here 4 and 5 make use of the asymptotic series

$$$
\begin{equation}
\erfc(x) \approx{\frac{\exp(-x \cdot x)}{x \cdot \sqrt{\pi}} \cdot (1 + Poly(\frac{1}{x^2})}
\end{equation}

We use rational approximation to approximate

$$$
\begin{equation}
g(s) = f(\frac{1}{x^2}) = \log(\erfc(x) \cdot x) - x \cdot x + 0.5625
\end{equation}

Here is the error bound for $ \frac{R1}{S1} $ and $ \frac{R2}{S2} $

- $ |\frac{R1}{S1} - f(x)|  &lt; 2^{-62.57} $
- $ |\frac{R2}{S2} - f(x)|  &lt; 2^{-61.52} $

For $ \infty &gt; x &gt;= 28 $:

$$$
\begin{equation}
\erf(x)  = \sgn(x)(1 - tiny)  \text{(raise inexact)}
\end{equation}

$$$
\begin{equation}
\erfc(x) = \left\{
    \begin{array}{l l}
    tiny \cdot tiny      &amp; \quad \text{(raise underflow) if $ x &gt; 0 $} \\
    2 - tiny            &amp; \quad \text{ if $ x &lt; 0 $}
    \end{array} \right\}
\end{equation}

Special cases:

- $ \erf(0)  = 0 $ 
- $ \erf(\infty) = 1 $ 
- $ \erf(-\infty) = -1 $
- $ \erfc(0) = 1 $
- $ \erfc(\infty) = 0 $
- $ \erfc(-\infty) = 2 $
- $ \erf(NaN) $ is NaN
- $ \erfc(NaN) $ is NaN

`ConstantsErf` contains coefficients for approximation of the following functions 

- $ \erf \in [0,0.84375] $
- $ \erf \in [0.84375, 1.25] $
- $ \erfc \in [1.25, \frac{1}{0.35}] $
- $ \erfc \in [\frac{1}{0.35}, 28] $
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.fast_fdividef(System.Single,System.Single)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.fast_fdivide(System.Double,System.Double)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.copysignf(System.Single,System.Single)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.SpecialFunction.copysign(System.Double,System.Double)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SpecialFunction.ConstantsLogGammaFunction">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SpecialFunction.ConstantsNormalPdf">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SpecialFunction.ConstantsShawBrickmanEx">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SpecialFunction.ConstantsShawBrickman">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SpecialFunction.ConstantsAcklam">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SpecialFunction.ConstantsAbramowitzStegunF32">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SpecialFunction.ConstantsAbramowitzStegun">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.SpecialFunction.ConstantsErf">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.SpecialFunction">
<summary>
 Provides some special functions to be used from within kernels.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.UsageByInstanceUtil">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.UsageByMethodUtil">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.UsageUtil">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Util.CLRTypeUtil">

</member>
<member name="T:Alea.CUDA.Util">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.Blob.AddSlot(Microsoft.FSharp.Core.FSharpFunc{Alea.CUDA.Utilities.BlobSlot,Alea.CUDA.Utilities.BlobSlot})">
<summary>
 Adds a `BlobSlot` to the current `BlobBlock`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.Blob">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobArray">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobArrayAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobArrayCompactSeqAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobArrayCompactSeq`1">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobArraySeqAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobArraySeq`1">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobArray`1">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.BlobBlock.Freeze">
<summary>
 Freezes the state of the block
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.BlobBlock.AddSlot(Microsoft.FSharp.Core.FSharpFunc{Alea.CUDA.Utilities.BlobSlot,Alea.CUDA.Utilities.BlobSlot})">
<summary>
 Add a new `BlobSlot` to the block
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobBlock">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobEqualLengthArrayCompactSeqAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobEqualLengthArrayCompactSeq`1">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobEqualLengthArraySeqAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobEqualLengthArraySeq`1">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobMemory">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobScalar">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobScalarAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobScalar`1">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobSlot">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.BlobSlotCategory">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.ClassAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.ClassEmbeddedArrayFieldAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.ClassFieldAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.DeviceArrayAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.DeviceStructAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.DiscriminatedUnionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.IBlobArray">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.IBlobArrayCompactSeq">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.IBlobArraySeq">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.IBlobEqualLengthArrayCompactSeq">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.IBlobEqualLengthArraySeq">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.IBlobScalar">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.IteratorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.IteratorState">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.Iterator`1.Ref(Alea.CUDA.Utilities.Iterator{`0},System.Int32)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Iterator`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.Unit}})">
<summary>
 Create write-only iterator by set function.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Iterator`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{System.Int32,`0})">
<summary>
 Create read-only iterator by get function.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Iterator`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{System.Int32,`0},Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.Unit}})">
<summary>
 Create iterator by get and set function.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Iterator`1.#ctor(`0[])">
<summary>
 Create iterator by array.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Iterator`1.#ctor(Alea.CUDA.deviceptr{`0})">
<summary>
 Create iterator by device pointer.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.Iterator`1">
<summary>
 General iterator type, supports deviceptr and array. This type is only used within kernels.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.Profiler._Profile(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Profiler.Profile(System.String,System.String,System.String,System.Boolean)">
<summary>
 A static method to run a profiling.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Profiler.Profile(System.String,System.String,System.String)">
<summary>
 A static method to run a profiling.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Profiler.Profile(System.String,System.String)">
<summary>
 A static method to run a profiling.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Profiler.Profile">
<summary>
 Starts profiling.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.Profiler">
<summary>
Run a vprof of an executable.
 
#### Examples

    [lang=csharp]
    var profilingResults = Profiler.Profile(
        @&quot;D:\dev\MyApp\MyApp.exe&quot;,
        &quot;&quot;,
        @&quot;D:\dev\MyApp&quot;,
        true);
    foreach (var profilingResult in profilingResults)
    {
        profilingResult.Dump();
        Console.WriteLine(&quot;==================================\n&quot;);
    }
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.ProfilingConfig._Create(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Alea.CUDA.AddressSize})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.ProfilingConfig.Create(System.String,System.String,System.String)">
<summary>
 Creates parameters using your provided executable, arguments, and working directory.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.ProfilingConfig.Create(System.String,System.String)">
<summary>
 Creates parameters using your provided executable and arguments.
</summary>
</member>
<member name="T:Alea.CUDA.Utilities.ProfilingConfig">
<summary>
 Parameters used to start a vprof.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.ProfilingMetric">
<summary>
 The metrics of vprof result.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.ProfilingResult">
<summary>
 The result of a vprof.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.RecordAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.RecordEmbeddedArrayFieldAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.RecordExcludedFieldAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.StructEmbeddedArrayFieldAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.StructEmbeddedArrayItemAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.StructEmbeddedArrayPropertyAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.StructPointerPropertyAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.UInt32AndFloat32">
<summary>
 A union of a `uint32` and a `float32`, 4 byte layout.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.UInt64AndFloat">
<summary>
 A union of a `uint64` and a `float`, 8 byte layout.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Utilities.UnionStorage.NullStorage">
<summary>
 A default null storage.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.UnionStorage.Merge(Alea.CUDA.Utilities.UnionStorage)">
<summary>
 Merges another union storage with this union storage.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.UnionStorage.Facet``1(Microsoft.FSharp.Core.FSharpFunc{Alea.CUDA.IRModuleBuildingContext,Alea.CUDA.Constructs.IRType})">
<summary>
 Gets a union case.  You need to specify the factory function of that `IRType`.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.UnionStorage.CreateIRType(Alea.CUDA.IRModuleBuildingContext)">
<summary>
 Creates the `IRType` of this union storage.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.UnionStorage.AllocateSharedArray(System.Int32)">
<summary>
 Allocates this union storage as an array on shared memory.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.UnionStorage.AllocateShared">
<summary>
 Allocates this union storage on shared memory.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.UnionStorage.#ctor(Microsoft.FSharp.Core.FSharpFunc{Alea.CUDA.IRModuleBuildingContext,Alea.CUDA.Constructs.IRType})">
<summary>
 Creates a new union storage using the provided `IRType` factory function.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.UnionStorage">
<summary>
A dynamic union storage type used within kernels. To create it, you need to provide an 
`IRType` factory function.  You can also merge (union) different union storage together.
This type is used to simulate some C++ meta-programming type creation.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.UnionStorageAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.Array2D.DiffArray2D">
<summary>
 Expose matrix-matrix and matrix-vector subtraction with ordinary - operator.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.Array2D.SumArray2D">
<summary>
 Expose matrix-matrix and matrix-vector summation with ordinary + operator.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.Array2D.ProdArray2D">
<summary>
 Expose matrix-matrix and matrix-vector multiplication with ordinary * operator.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.Array2D.op_DotMinus``3(``0,``1)">
<summary>
 Expose matrix-matrix and matrix-vector subtraction with ordinary - operator.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Array2D.op_DotPlus``3(``0,``1)">
<summary>
 Expose matrix-matrix and matrix-vector summation with ordinary + operator.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Array2D.op_DotMultiply``3(``0,``1)">
<summary>
 Expose matrix-matrix and matrix-vector multiplication with ordinary * operator.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Array2D.matrixVectorProd``3(``0[0:,0:],``0[])">
<summary>
 Matrix-vector multiplication.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Array2D.matrixProd``3(``0[0:,0:],``0[0:,0:])">
<summary>
 Matrix-matrix multiplication.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Array2D.ofArrayRowMajor``1(System.Int32,System.Int32,``0[])">
<summary>
 Transforms 1D array `a` to the Array2D type using row major order
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Array2D.ofArrayColumnMajor``1(System.Int32,System.Int32,``0[])">
<summary>
 Transforms 1D array `a` to the Array2D type using column major order
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Array2D.toArrayRowMajor``1(``0[0:,0:])">
<summary>
 Flatten a 2d array into a 1d array in row major order, also known as C storage format.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Array2D.toArrayColumnMajor``1(``0[0:,0:])">
<summary>
 Flatten a 2d array into a 1d array in column major order, also known as Fortran storage format.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Array2D.ofArray``1(``0[][])">
<summary>
 Convert an array of arrays to the actual Array2D type
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Array2D.ofSameDimension``1(``0[0:,0:],``0[0:,0:])">
<summary>
 Returns true _iff_  (rows in `a` = rows in `b`) AND (cols in `a` = cols in `b`)
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Array2D.numElements``1(``0[0:,0:])">
<summary>
 Number of elements in 2D array `a`.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Array2D.numCols``1(``0[0:,0:])">
<summary>
 Number of columns in 2D array `a`
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Array2D.numRows``1(``0[0:,0:])">
<summary>
 Number of rows in 2D array `a`
</summary>
</member>
<member name="T:Alea.CUDA.Utilities.Array2D">
<summary>
 A group of host functions to help when working with 2D arrays
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Common.uint32ToFloatNormalized(System.UInt32)">
<summary>
 Converts an uint32 value to a float value on the interval [0, 1). 
 The maximal value `0u - 1u = 4294967295u` is thereby mapped to `1.0 - __epsilon()`, the largest value strictly smaller than 1.0, not equal to 1.0.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Common.uint64ToFloatNormalized(System.UInt64)">
<summary>
 Converts an uint64 value to a float value on the interval [0, 1). 
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Common.uint32ToFloat32Normalized(System.UInt32)">
<summary>
 Converts an uint32 value to a float32 value on the interval [0, 1). 
 The maximal value `0u - 1u = 4294967295u` is thereby mapped to `1.0 - __epsilon()`, the largest value strictly smaller than 1.0, not equal to 1.0.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Common.padding(System.Int32,System.Int32)">
<summary>
 Computes padding using divup
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Common.log2ceil(System.Int32)">
<summary>
 Log base 2 with ceiling
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Common.log2(System.Int32)">
<summary>
 Log base 2
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Common.nextpow2(System.Int32)">
<summary>
 Finds the next power of 2 of i
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Common.nextAlignedOffset(System.Int32,System.Int32)">
<summary>
 Get next aligned offset.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Common.ispow2(System.Int32)">
<summary>
 Is x a power of 2?
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Common.divup(System.Int32,System.Int32)">
<summary>
 Compute the smallest multiple of den greater than or equal to num
</summary>
</member>
<member name="T:Alea.CUDA.Utilities.Common">
<summary>
 A collection of common simple utility functions.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.loadWithOptionsAndLibraries``1(Alea.CUDA.CompileOptions,Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.IRModule},Alea.CUDA.Worker,Alea.CUDA.Template{Alea.CUDA.Entry{``0}})">
<summary>
 Load template with libraries and specified compiling options.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.loadWithLibraries``1(Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.IRModule},Alea.CUDA.Worker,Alea.CUDA.Template{Alea.CUDA.Entry{``0}})">
<summary>
 Load template with libraries.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.loadWithOptions``1(Alea.CUDA.CompileOptions,Alea.CUDA.Worker,Alea.CUDA.Template{Alea.CUDA.Entry{``0}})">
<summary>
 Load template with specified compiling options.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.load``1(Alea.CUDA.Worker,Alea.CUDA.Template{Alea.CUDA.Entry{``0}})">
<summary>
 Load template.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.link``1(Alea.CUDA.IRModule{``0})">
<summary>
 Link `IRModule`
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.linkWithArch``1(Alea.CUDA.DeviceArch,Alea.CUDA.IRModule{``0})">
<summary>
 Link `IRModule` with specified device arch.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.linkWithLibraries``1(Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.IRModule},Alea.CUDA.IRModule{``0})">
<summary>
 Link `IRModule` with libraries.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.linkWithLibrariesAndArch``1(Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.IRModule},Alea.CUDA.DeviceArch,Alea.CUDA.IRModule{``0})">
<summary>
 Link `IRModule` with libraries and specified device arch.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.compile``1(Alea.CUDA.Template{``0})">
<summary>
 Compile template.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.compileWithOptions``1(Alea.CUDA.CompileOptions,Alea.CUDA.Template{``0})">
<summary>
 Compile template with specified compiling options.
</summary>
</member>
<member name="T:Alea.CUDA.Utilities.Compiler">
<summary>
 Some compiler helper functions.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Uint32ToFloatNormalized">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Uint32ToFloatNormalizedAttribute">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.NormCdfAS">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.NormCdfASAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.NormCdfInvSBEx">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.NormCdfInvSBExAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.NormCdfInvSB">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.NormCdfInvSBAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.NormCDF">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.NormCDFAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Asinh">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.AsinhAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Rsqrt">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.RsqrtAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Fma">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.FmaAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Pow">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.PowAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.SinCos">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.SinCosAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.IsNan">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.IsNanAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Nan">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.NanAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Quarter">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.QuarterAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Half">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.HalfAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Sqrt2">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Sqrt2Attribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.EulerE">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.EulerEAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.OneOver2To32MinusOne">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.OneOver2To32MinusOneAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.OneOver2To32">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.OneOver2To32Attribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Sqrt2Pi">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Sqrt2PiAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Pi">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.PiAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.MinusTwo">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.MinusTwoAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Two">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.TwoAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.MinusOne">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.MinusOneAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.One">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.OneAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.MinVal">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.MinValAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.MaxVal">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.MaxValAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.Epsilon">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.EpsilonAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.NegInfinity">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.NegInfinityAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.PosInfinity">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.PosInfinityAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.GOfInt64">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.GOfInt32">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.GUInt2Int">
<summary>
[omit]        
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.GInt2UInt">
<summary>
[omit]        
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.GFloat2UInt">
<summary>
[omit]        
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.GUInt2Float">
<summary>
[omit]        
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.GFloat2Int">
<summary>
[omit]        
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.GInt2Float">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.GUInt">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.GInt">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.GFloat">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.GConv">
<summary>
[omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice.GConvAttribute">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__uint32_to_float_normalized``1(System.UInt32)">
<summary>
Converts an uint32 value to a float or float32 value on the interval [0, 1). 
The maximal value `0u - 1u = 4294967295u` is thereby mapped to `1.0 - __epsilon()`, the largest value strictly smaller than 1.0, not equal to 1.0.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__normcdf_as``1(``0)">
<summary>
Cumulative normal distribution function. $x$ can be float or float32
   
$$$
\begin{equation} 
\Phi(x) = \int_{-\infty}^x \phi(x) = \int_{-\infty}^x \frac{1}{\sqrt{2\pi}} \exp\left(\frac{-u^2}{2}\right) du
\end{equation}
 
by a simple rational approximation. It uses the asymptotic expansion (26.2.12)
in [Abramowitz-Stegun, p. 932.](http://www.math.sfu.ca/~cbm/aands/page_932.htm)

For most cases this version is accurate enough, in particular for $ x \in [-6, 6] $.

</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__normcdfinv_sbex``1(``0)">
<summary>
 Inverse normal cumulative distribution function.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__normcdfinv_sb``1(``0)">
<summary>
 Inverse normal cumulative distribution function.
 Implementation based on [Shaw-Brickman](http://arxiv.org/pdf/0901.0638v5.pdf)
 $x$ can be either float or float32
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__normcdf``1(``0)">
<summary>
Calculate the cumulative distribution function of the standard normal distribution for input argument $x$. $x$ can be either float or float32.

See [3.242.\_\_nv\_normcdf](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_normcdf.html#__nv_normcdf)

  $$ \Phi(x) = \int_{-\infty}^x \phi(x) = \int_{-\infty}^x \frac{1}{\sqrt{2\pi}} \exp\left(\frac{-u^2}{2}\right) du $$

based on the erf implementation of the Sun FDMLib version 5.3 and http://www.netlib.org/specfun/erf.
It is more accurate than the versions of Abramowitz-Stegun.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__asinh``1(``0)">
<summary>
Calculate the arc hyperbolic sine of the input argument $x$. $x$ can be either float or float32.

See [3.8.\_\_nv\_asinh](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_asinh.html#__nv_asinh)
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__rsqrt``1(``0)">
<summary>
Calculate the reciprocal of the nonnegative square root of $x$, $\frac{1}{\sqrt{x}}$. $x$ can be float or float32.

See [3.263.\_\_nv\_rsqrt](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rsqrt.html#__nv_rsqrt)
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__fma``1(``0,``0,``0)">
<summary>
Compute the value of $x * y + z$ as a single ternary operation. After computing the value to infinite precision, the value is rounded once. 
$x$, $y$, and $z$ can be float or float32.
See [3.140.\_\_nv\_fma](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fma.html#__nv_fma)
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__pow``1(``0,``0)">
<summary>
 Calculate the value of $x$ to the power of $y$. $x$ and $y$ can either be float or float32.

 See [3.248.\_\_nv\_pow](http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_pow.html#__nv_pow) for more information.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__sincos``1(``0,Microsoft.FSharp.Core.FSharpRef{``0},Microsoft.FSharp.Core.FSharpRef{``0})">
<summary>
 Calculate the sine and cosine of the first input argument $x$ (measured in radians). The results for sine and cosine are
 written into `sref` and `cref`, respectively. $x$ can be either a float or float32.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__isnan``1(``0)">
<summary>
 Returns true if $x$ is nan. $x$ can be a float or float32.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__nan``1">
<summary>
 Returns nan or nanf depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__quarter``1">
<summary>
 Returns 0.25 or 0.25f depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__half``1">
<summary>
 Returns 0.5 or 0.5f depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__sqrt2``1">
<summary>
 Returns the constant $\sqrt{2}$
 as a float or float32 depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__e``1">
<summary>
 Returns the Euler constant $e$
 as a float or float32 depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__oneover2to32minus1``1">
<summary>
Returns the constant $ \begin{equation} \frac{1}{2^{-32}-1} \end{equation} $
as a float or float32 depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__oneover2to32``1">
<summary>
 Returns the constant $ \begin{equation} 2^{-32} \end{equation} $
 as a float or float32 depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__sqrt2pi``1">
<summary>
 Returns the constant $2\pi$ as a float or float32 depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__pi``1">
<summary>
 Returns $\pi$ as a float or float32 depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__minus_two``1">
<summary>
 Returns -2.0 or -2.0f depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__two``1">
<summary>
 Returns 2.0 or 2.0f depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__minus_one``1">
<summary>
 Returns -1.0 or -1.0f depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__one``1">
<summary>
 Returns 1.0 or 1.0f depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__minval``1">
<summary>
 Generic function for minimum value
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__maxval``1">
<summary>
 Generic function for maximum value.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__epsilon``1">
<summary>
 Gives the difference between 1.0 and the next-nearest number representable as a machine-precision number. 
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__neginf``1">
<summary>
 Returns negitive infinity as a float or float32, depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__posinf``1">
<summary>
 Returns positive infinity as a float or float32 depending on the type interpreted at kernel compile time.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__bilinear_interpolate_bycol``10(System.Int32,System.Int32,Alea.CUDA.Utilities.Iterator{``0},Alea.CUDA.Utilities.Iterator{``0},Alea.CUDA.Utilities.Iterator{``0},``0,``0)">
<summary>
Bilinear interpolation by column.

#### Args

* `numRows` - number of y-coordinates corresponding to rows of data matrix
* `numCols` - number of x-coordinates corresponding to columns of data matrix
* `rowCoords` - y-coordinates
* `colCoords` - x-coordinates
* `values` - values iterated by column e.g. v(i,j) = values.[j * numRows + i]
* `rowCoord` - the y-coordinate where to interpolate
* `colCoord` - the x-coordinate where to interpolate
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__bilinear_interpolate_byrow``10(System.Int32,System.Int32,Alea.CUDA.Utilities.Iterator{``0},Alea.CUDA.Utilities.Iterator{``0},Alea.CUDA.Utilities.Iterator{``0},``0,``0)">
<summary>
Bilinear interpolation by row.

#### Args

* `numRows` - number of y-coordinates corresponding to rows of data matrix
* `numCols` - number of x-coordinates corresponding to columns of data matrix
* `rowCoords` - y-coordinates
* `colCoords` - x-coordinates
* `values` - values iterated by row e.g. v(i,j) = values.[i * numCols + j]
* `rowCoord` - the y-coordinate where to interpolate
* `colCoord` - the x-coordinate where to interpolate
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__bilinear_interpolate``10(System.Int32,System.Int32,Alea.CUDA.Utilities.Iterator{``0},Alea.CUDA.Utilities.Iterator{``0},Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}},``0,``0)">
<summary>
Bilinear interpolation.

#### Args

* `numRows` - number of y-coordinates corresponding to rows of data matrix
* `numCols` - number of x-coordinates corresponding to columns of data matrix
* `rowCoords` - y-coordinates
* `colCoords` - x-coordinates
* `values` - values at the (x, y)-coordinates in a matrix of row major storage order
* `rowCoord` - the y-coordinate where to interpolate
* `colCoord` - the x-coordinate where to interpolate 
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__bilinear_interpolate_by_index``10(System.Int32,System.Int32,Alea.CUDA.Utilities.Iterator{``0},Alea.CUDA.Utilities.Iterator{``0},Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}},``0,``0,System.Int32,System.Int32)">
<summary>
Bilinear interpolation.

#### Args

* `numRows` - number of y-coordinates corresponding to rows of data matrix
* `numCols` - number of x-coordinates corresponding to columns of data matrix
* `rowCoords` - y-coordinates
* `colCoords` - x-coordinates
* `values` - values at the (x, y)-coordinates in a matrix of row major storage order
* `rowCoord` - the y-coordinate where to interpolate
* `colCoord` - the x-coordinate where to interpolate 
* `rowIndex` - index from binary search of colCoord
* `colIndex` - index from binary search of colCoord
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__linear_interpolate``5(System.Int32,Alea.CUDA.Utilities.Iterator{``0},Alea.CUDA.Utilities.Iterator{``0},``0)">
<summary>
Linear interpolation.

#### Args

* `n` - number of x-coordinates and function values
* `x` - x-coordinates
* `f` - function values at the x-coordinates
* `xi` - the x-coordinate where to interpolate 
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__linear_interpolate_by_index``5(Alea.CUDA.Utilities.Iterator{``0},Alea.CUDA.Utilities.Iterator{``0},``0,System.Int32)">
<summary>
Linear interpolation.
 
#### Args

* `n` - number of x-coordinates and function values
* `x` - x-coordinates
* `f` - function values at the x-coordinates
* `xi` - the x-coordinate where to interpolate 
* `index` - the index of xi in x
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__binary_search``1(System.Int32,Alea.CUDA.Utilities.Iterator{``0},``0)">
<summary>
Binary search. The function returns the index i, in the sequence v, of the __left__
value in the sub-interval `[v[i], v[i+1]]` to which the value x belongs such that we have `v[i] &lt;= x &lt;= v[i+1]`.
If `x &lt; v[0]`, then `0` is returned, and if `x &gt;= v[n-1]`, then `n-2` is still returned. 

See [this link](http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html)
for some tricky parts of the algorithm. 
 
#### Args

* `n` the sequence length
* `v` the sequence to search in 
* `x` the value to search for

#### Returns 

* Index `i`, in the array `v`, so that `v[i] &lt;= x &lt;= v[i+1]`
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__gofint64``1(System.Int64)">
<summary>
Generic inline F# converter function.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__gofint32``1(System.Int32)">
<summary>
Generic inline F# converter function.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__guint2int``2(``0)">
<summary>
Generic inline F# converter function.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__gint2uint``2(``0)">
<summary>
Generic inline F# converter function.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__gfloat2uint``2(``0)">
<summary>
Generic inline F# converter function.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__guint2float``2(``0)">
<summary>
Generic inline F# converter function.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__gfloat2int``2(``0)">
<summary>
Generic inline F# converter function.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__gint2float``2(``0)">
<summary>
Generic inline F# converter function.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__guint``2(``0)">
<summary>
Generic inline F# converter function.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__gint``2(``0)">
<summary>
Generic inline F# converter function.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__gfloat``2(``0)">
<summary>
Generic inline F# converter function.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDevice.__gconv``2(``0)">
<summary>
Generic inline F# converter function.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice">
<summary>
 Contains functions and custom attributes which aim to extend the `LibDevice` functions for use with generics.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDevice2">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.NumericLiteralG">
<summary>
 F# literal definition for a generic number. This helps you to write generic inline functions in F#.
</summary>
</member>
<member name="P:Alea.CUDA.Utilities.NumericTraits.RealTraits.Real64">
<summary>
 Generate traits for double precision number.
</summary>
</member>
<member name="P:Alea.CUDA.Utilities.NumericTraits.RealTraits.Real32">
<summary>
 Generate traits for single precision number.
</summary>
</member>
<member name="T:Alea.CUDA.Utilities.NumericTraits.RealTraits">
<summary>
 Factory to generate `RealTraits&lt;&apos;T&gt;`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.NumericTraits.RealTraits`1">
<summary>
 Various converters and properties of a real type (`float` or `float32`).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.NumericTraits.RealTraitsAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.NumericTraits">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.Utilities.TestUtil.IRunner`2.Verify">
<summary>
 Verify function, if don&apos;t want to verify, return None.
</summary>
</member>
<member name="P:Alea.CUDA.Utilities.TestUtil.IRunner`2.Tests">
<summary>
 Factories to create tests.
</summary>
</member>
<member name="P:Alea.CUDA.Utilities.TestUtil.IRunner`2.Baseline">
<summary>
 Factory to create test for the baseline.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.IRunner`2.Description(`0,System.Int32)">
<summary>
 Give input and iters, return description of this runner.
</summary>
</member>
<member name="T:Alea.CUDA.Utilities.TestUtil.IRunner`2">
<summary>
 Test runner interface.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.ITest`2.Run(`0,System.Int32)">
<summary>
 Given input and iters, run the test, return output and performance (in string), or 
 if the input is too large and cannot run the test, return None.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.ITest`2.Name(`0,System.Int32)">
<summary>
 Given input and iters, return a name for this test.
</summary>
</member>
<member name="T:Alea.CUDA.Utilities.TestUtil.ITest`2">
<summary>
 Test interface.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.splitter``2(System.String,Microsoft.FSharp.Core.Unit)">
<summary>
 A test that used for splitting.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.run``2(Alea.CUDA.Utilities.TestUtil.IRunner{``0,``1},System.Int32,``0)">
<summary>
 Run a set of tests.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.genByArray``1(``0[],System.Int32)">
<summary>
 Returns _ith_ element from _array_.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.genRandomSingle2``1(System.Double,System.Double,``0)">
<summary>
 Generates a float2 struct with random x &amp; y values falling between _minv_ and _maxv_
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.genRandomSingle``1(System.Double,System.Double,``0)">
<summary>
 Generates a random single precision value falling between _minv_ and _maxv_.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.genRandomDouble2``1(System.Double,System.Double,``0)">
<summary>
 Generates a double2 struct with random x &amp; y values falling between _minv_ and _maxv_
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.genRandomDouble``1(System.Double,System.Double,``0)">
<summary>
 Generates a random double precision value falling between _minv_ and _maxv_.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.genRandomUInt64``1(System.Int32,System.Int32,``0)">
<summary>
 Generates a random 64-bit unsigned integer falling between _minv_ and _maxv_.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.genRandomSInt64``1(System.Int32,System.Int32,``0)">
<summary>
 Generates a random 64-bit signed integer falling between _minv_ and _maxv_.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.genRandomUInt32``1(System.Int32,System.Int32,``0)">
<summary>
 Generates a random 32-bit unsigned integer falling between _minv_ and _maxv_.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.genRandomSInt32``1(System.Int32,System.Int32,``0)">
<summary>
 Generates a random 32-bit signed integer falling between _minv_ and _maxv_.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.genRandomUInt16``1(System.Int32,System.Int32,``0)">
<summary>
 Generates a random 16-bit unsigned integer falling between _minv_ and _maxv_.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.genRandomSInt16``1(System.Int32,System.Int32,``0)">
<summary>
 Generates a random 16-bit signed integer falling between _minv_ and _maxv_.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.genRandomUInt8``1(System.Int32,System.Int32,``0)">
<summary>
 Generates a random 8-bit unsigned integer falling between _minv_ and _maxv_.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.genRandomSInt8``1(System.Int32,System.Int32,``0)">
<summary>
 Generates a random 8-bit signed integer falling between _minv_ and _maxv_.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.genRandomBool``1(``0)">
<summary>
 Generates a random boolean value.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.TestUtil">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.Timing.TimingLogger.Touch">
<summary>
 Stop then immediately start the timer.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.Timing.TimingLogger.Finish">
<summary>
 Stops the timer, sets finished to _true_.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.Timing.TimingLogger">
<summary>
 A class to assist with detailed logging of program events
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.Timing.tictoc``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Measure CPU time.
</summary>
</member>
<member name="T:Alea.CUDA.Utilities.Timing">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.__Experiments">
<summary>
[omit]
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.ToLinqExpression(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Convert the quotation expression to LINQ expression trees

 This operation will only succeed for a subset of quotation expressions.

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.EvaluateUntyped(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.Evaluate``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 Evaluate the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.CompileUntyped(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.Compile``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="T:Microsoft.FSharp.Linq.QuotationEvaluator">
<summary>
 [omit]
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluation.LinqExpressionHelper``1(``0)">
<summary>
 This function should not be called directly. 
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluation.Expr`1.Eval``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 Evaluate the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluation.Expr`1.Compile``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluation.Expr.EvalUntyped(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluation.Expr.CompileUntyped(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluation.Expr.ToLinqExpression(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Convert the quotation expression to LINQ expression trees

 This operation will only succeed for a subset of quotation expressions.

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.QuotationEvaluation.HelperTypes">
<summary>
 A set of types used for implementing quotation conversions.
 These are public only because targets of Linq Lambda expressions require them to be so
</summary>
</member>
<member name="T:Microsoft.FSharp.Linq.QuotationEvaluation">
<summary>
 [omit]
 This module provides Compile and Eval extension members
 for F# quotation values, implemented by translating to LINQ
 expression trees and using the LINQ dynamic compiler.
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.ExtraHashCompare.GenericNotEqualIntrinsic``1(``0,``0)">
<summary>
 An intrinsic for compiling &lt;c&gt;&amp;lt;@ x &lt;&gt; y @&amp;gt;&lt;/c&gt; to expression trees
</summary>
</member>
<member name="T:Microsoft.FSharp.Linq.ExtraHashCompare">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:System.AssemblyVersionInformation">

</member>
</members>
</doc>
